{"version":3,"sources":["./src/addons/competency/pages/coursecompetencies/coursecompetencies.html","./src/addons/competency/pages/coursecompetencies/coursecompetencies.module.ts","./src/addons/competency/pages/coursecompetencies/coursecompetencies.page.ts"],"names":[],"mappings":"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","file":"default~competency-course-contents-lazy-module~competency-course-details-lazy-module.js","sourcesContent":["export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <ion-title>\\r\\n            <h1>{{ 'addon.competency.coursecompetencies' | translate }}</h1>\\r\\n        </ion-title>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content class=\\\"limited-width\\\">\\r\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!competencies.loaded\\\" (ionRefresh)=\\\"refreshCourseCompetencies($event.target)\\\">\\r\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n    </ion-refresher>\\r\\n    <core-loading [hideUntil]=\\\"competencies.loaded\\\">\\r\\n        <ion-card *ngIf=\\\"!user && courseCompetencies && courseCompetencies.statistics.competencycount > 0\\\">\\r\\n            <ng-container *ngIf=\\\"courseCompetencies.cangradecompetencies\\\">\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"courseCompetencies.settings.pushratingstouserplans\\\">\\r\\n                    <ion-label>{{ 'addon.competency.coursecompetencyratingsarepushedtouserplans' | translate }}</ion-label>\\r\\n                </ion-item>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"!courseCompetencies.settings.pushratingstouserplans\\\" color=\\\"danger\\\">\\r\\n                    <ion-label>{{ 'addon.competency.coursecompetencyratingsarenotpushedtouserplans' | translate }}</ion-label>\\r\\n                </ion-item>\\r\\n            </ng-container>\\r\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"courseCompetencies.statistics.canbegradedincourse\\\">\\r\\n                <ion-label>\\r\\n                    <span id=\\\"addon-competency-course-{{courseId}}-progress\\\">\\r\\n                        {{ 'addon.competency.xcompetenciesproficientoutofyincourse' | translate: {$a:\\r\\n                        {x: courseCompetencies.statistics.proficientcompetencycount, y: courseCompetencies.statistics.competencycount} } }}\\r\\n                    </span>\\r\\n                    <core-progress-bar [progress]=\\\"courseCompetencies.statistics.proficientcompetencypercentage\\\"\\r\\n                        ariaDescribedBy=\\\"addon-competency-course-{{courseId}}-progress\\\">\\r\\n                    </core-progress-bar>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n            <ion-item class=\\\"ion-text-wrap\\\"\\r\\n                *ngIf=\\\"courseCompetencies.statistics.canmanagecoursecompetencies && courseCompetencies.statistics.leastproficientcount > 0\\\">\\r\\n                <ion-label>\\r\\n                    <p class=\\\"item-heading\\\">{{ 'addon.competency.competenciesmostoftennotproficientincourse' | translate }}</p>\\r\\n                    <p *ngFor=\\\"let comp of courseCompetencies.statistics.leastproficient\\\">\\r\\n                        <button class=\\\"as-link\\\" (click)=\\\"openCompetencySummary(comp.id)\\\">\\r\\n                            {{ comp.shortname }} - {{ comp.idnumber }}\\r\\n                        </button>\\r\\n                    </p>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n        </ion-card>\\r\\n\\r\\n        <h2 class=\\\"ion-margin-horizontal\\\" *ngIf=\\\"courseCompetencies && courseCompetencies.statistics.competencycount > 0\\\">\\r\\n            {{ 'addon.competency.coursecompetencies' | translate }}\\r\\n        </h2>\\r\\n        <ion-card *ngIf=\\\"user\\\">\\r\\n            <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                <core-user-avatar [user]=\\\"user\\\" slot=\\\"start\\\"></core-user-avatar>\\r\\n                <ion-label>\\r\\n                    <p class=\\\"item-heading\\\">{{ user.fullname }}</p>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n        </ion-card>\\r\\n        <core-empty-box *ngIf=\\\"courseCompetencies && courseCompetencies.statistics.competencycount == 0\\\" icon=\\\"fas-award\\\"\\r\\n            message=\\\"{{ 'addon.competency.nocompetenciesincourse' | translate }}\\\">\\r\\n        </core-empty-box>\\r\\n\\r\\n        <div *ngIf=\\\"competencies.loaded\\\">\\r\\n            <ion-card *ngFor=\\\"let competency of competencies.items\\\">\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" (click)=\\\"competencies.select(competency)\\\"\\r\\n                    [attr.aria-label]=\\\"competency.competency.shortname\\\" detail=\\\"true\\\" button>\\r\\n                    <ion-label>\\r\\n                        <p class=\\\"item-heading\\\">\\r\\n                            {{competency.competency.shortname}} <em>{{competency.competency.idnumber}}</em>\\r\\n                        </p>\\r\\n                    </ion-label>\\r\\n                    <ion-badge slot=\\\"end\\\" *ngIf=\\\"competency.usercompetencycourse && competency.usercompetencycourse.gradename\\\"\\r\\n                        [color]=\\\"competency.usercompetencycourse.proficiency ? 'success' : 'danger'\\\">\\r\\n                        {{ competency.usercompetencycourse.gradename }}\\r\\n                    </ion-badge>\\r\\n                </ion-item>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                    <ion-label>\\r\\n                        <p *ngIf=\\\"competency.competency.description\\\">\\r\\n                            <core-format-text [text]=\\\"competency.competency.description\\\" contextLevel=\\\"course\\\"\\r\\n                                [contextInstanceId]=\\\"courseId\\\">\\r\\n                            </core-format-text>\\r\\n                        </p>\\r\\n                        <div>\\r\\n                            <p class=\\\"item-heading\\\">{{ 'addon.competency.path' | translate }}</p>\\r\\n                            <p>\\r\\n                                <a *ngIf=\\\"competency.comppath.showlinks\\\" [href]=\\\"getCompetencyFrameworkUrl(competency)\\\" core-link\\r\\n                                    [title]=\\\"competency.comppath.framework.name\\\">\\r\\n                                    {{ competency.comppath.framework.name }}\\r\\n                                </a>\\r\\n                                <ng-container *ngIf=\\\"!competency.comppath.showlinks\\\">\\r\\n                                    {{ competency.comppath.framework.name }}\\r\\n                                </ng-container>\\r\\n                                &nbsp;/&nbsp;\\r\\n                                <ng-container *ngFor=\\\"let ancestor of competency.comppath.ancestors\\\">\\r\\n                                    <button class=\\\"as-link\\\" *ngIf=\\\"competency.comppath.showlinks\\\"\\r\\n                                        (click)=\\\"openCompetencySummary(ancestor.id)\\\">\\r\\n                                        {{ ancestor.name }}\\r\\n                                    </button>\\r\\n                                    <ng-container *ngIf=\\\"!competency.comppath.showlinks\\\">{{ ancestor.name }}</ng-container>\\r\\n                                    <ng-container *ngIf=\\\"!ancestor.last\\\">&nbsp;/&nbsp;</ng-container>\\r\\n                                </ng-container>\\r\\n                            </p>\\r\\n                        </div>\\r\\n                        <div *ngIf=\\\"courseCompetencies?.statistics.canmanagecoursecompetencies\\\">\\r\\n                            <p class=\\\"item-heading\\\">{{ 'addon.competency.uponcoursecompletion' | translate }}</p>\\r\\n                            <ng-container *ngFor=\\\"let ruleoutcome of competency.ruleoutcomeoptions\\\">\\r\\n                                <span *ngIf=\\\"ruleoutcome.selected\\\">{{ ruleoutcome.text }}</span>\\r\\n                            </ng-container>\\r\\n                        </div>\\r\\n                        <div>\\r\\n                            <p class=\\\"item-heading\\\">{{ 'addon.competency.activities' | translate }}</p>\\r\\n                            <p *ngIf=\\\"competency.coursemodules.length == 0\\\">\\r\\n                                {{ 'addon.competency.noactivities' | translate }}\\r\\n                            </p>\\r\\n                            <ion-item class=\\\"ion-text-wrap core-course-module-handler\\\" [attr.aria-label]=\\\"activity.name\\\" core-link\\r\\n                                *ngFor=\\\"let activity of competency.coursemodules\\\" [href]=\\\"activity.url\\\" capture=\\\"true\\\">\\r\\n                                <core-mod-icon slot=\\\"start\\\" [modicon]=\\\"activity.iconurl\\\" [showAlt]=\\\"false\\\" *ngIf=\\\"activity.iconurl\\\">\\r\\n                                </core-mod-icon>\\r\\n                                <ion-label>\\r\\n                                    <core-format-text [text]=\\\"activity.name\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"activity.id\\\"\\r\\n                                        [courseId]=\\\"courseId\\\">\\r\\n                                    </core-format-text>\\r\\n                                </ion-label>\\r\\n                            </ion-item>\\r\\n                        </div>\\r\\n                        <div *ngIf=\\\"competency.plans\\\">\\r\\n                            <p class=\\\"item-heading\\\">{{ 'addon.competency.userplans' | translate }}</p>\\r\\n                            <p *ngIf=\\\"competency.plans.length == 0\\\">\\r\\n                                {{ 'addon.competency.nouserplanswithcompetency' | translate }}\\r\\n                            </p>\\r\\n                            <ion-item class=\\\"ion-text-wrap\\\" *ngFor=\\\"let plan of competency.plans\\\" [href]=\\\"plan.url\\\"\\r\\n                                [attr.aria-label]=\\\"plan.name\\\" core-link capture=\\\"true\\\">\\r\\n                                <ion-label>\\r\\n                                    <core-format-text [text]=\\\"plan.name\\\" contextLevel=\\\"user\\\" [contextInstanceId]=\\\"plan.userid\\\">\\r\\n                                    </core-format-text>\\r\\n                                </ion-label>\\r\\n                            </ion-item>\\r\\n                        </div>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n            </ion-card>\\r\\n        </div>\\r\\n    </core-loading>\\r\\n</ion-content>\\r\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { NgModule } from '@angular/core';\n\nimport { CoreSharedModule } from '@/core/shared.module';\nimport { AddonCompetencyCourseCompetenciesPage } from './coursecompetencies.page';\n\n@NgModule({\n    imports: [\n        CoreSharedModule,\n    ],\n    declarations: [\n        AddonCompetencyCourseCompetenciesPage,\n    ],\n})\nexport class AddonCompetencyCourseCompetenciesPageModule {}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n    AddonCompetencyDataForCourseCompetenciesPageWSResponse,\n    AddonCompetencyDataForCourseCompetenciesPageCompetency,\n} from '@addons/competency/services/competency';\nimport { CoreUserProfile } from '@features/user/services/user';\nimport { IonRefresher } from '@ionic/angular';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { ContextLevel } from '@/core/constants';\nimport { ADDON_COMPETENCY_SUMMARY_PAGE } from '@addons/competency/competency.module';\nimport { CoreListItemsManager } from '@classes/items-management/list-items-manager';\nimport { CoreRoutedItemsManagerSourcesTracker } from '@classes/items-management/routed-items-manager-sources-tracker';\nimport { AddonCompetencyCourseCompetenciesSource } from '@addons/competency/classes/competency-course-competencies-source';\nimport { CoreTime } from '@singletons/time';\nimport { CoreAnalytics, CoreAnalyticsEventType } from '@services/analytics';\nimport { CoreSites } from '@services/sites';\nimport { Translate } from '@singletons';\n\n/**\n * Page that displays the list of competencies of a course.\n */\n@Component({\n    selector: 'page-addon-competency-coursecompetencies',\n    templateUrl: 'coursecompetencies.html',\n})\nexport class AddonCompetencyCourseCompetenciesPage implements OnInit, OnDestroy {\n\n    competencies!: CoreListItemsManager<\n        AddonCompetencyDataForCourseCompetenciesPageCompetency,\n        AddonCompetencyCourseCompetenciesSource\n    >;\n\n    protected logView: () => void;\n\n    constructor() {\n        this.logView = CoreTime.once(() => this.performLogView());\n\n        try {\n            const courseId = CoreNavigator.getRequiredRouteNumberParam('courseId');\n            const userId = CoreNavigator.getRouteNumberParam('userId');\n            const source = CoreRoutedItemsManagerSourcesTracker.getOrCreateSource(\n                AddonCompetencyCourseCompetenciesSource,\n                [courseId, userId],\n            );\n\n            this.competencies = new CoreListItemsManager(source, AddonCompetencyCourseCompetenciesPage);\n        } catch (error) {\n            CoreDomUtils.showErrorModal(error);\n            CoreNavigator.back();\n\n            return;\n        }\n    }\n\n    get courseCompetencies(): AddonCompetencyDataForCourseCompetenciesPageWSResponse | undefined {\n        return this.competencies.getSource().courseCompetencies;\n    }\n\n    get courseId(): number {\n        return this.competencies.getSource().COURSE_ID;\n    }\n\n    get user(): CoreUserProfile | undefined {\n        return this.competencies.getSource().user;\n    }\n\n    get showLeastProficientCompetencies(): boolean {\n        return !!this.courseCompetencies?.statistics.canmanagecoursecompetencies\n            && this.courseCompetencies?.statistics.leastproficientcount > 0;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async ngOnInit(): Promise<void> {\n        await this.fetchCourseCompetencies();\n        await this.competencies.start();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnDestroy(): void {\n        this.competencies.destroy();\n    }\n\n    /**\n     * Get competency framework url.\n     *\n     * @param competency Competency.\n     * @returns Competency framework url.\n     */\n    getCompetencyFrameworkUrl(competency: AddonCompetencyDataForCourseCompetenciesPageCompetency): string {\n        const { pluginbaseurl, framework, pagecontextid } = competency.comppath;\n\n        return `${pluginbaseurl}/competencies.php?competencyframeworkid=${framework.id}&pagecontextid=${pagecontextid}`;\n    }\n\n    /**\n     * Fetches the competencies and updates the view.\n     *\n     * @returns Promise resolved when done.\n     */\n    protected async fetchCourseCompetencies(): Promise<void> {\n        try {\n            await this.competencies.getSource().reload();\n\n            this.logView();\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'Error getting course competencies data.');\n        }\n    }\n\n    /**\n     * Opens the summary of a competency.\n     *\n     * @param competencyId Competency Id.\n     */\n    openCompetencySummary(competencyId: number): void {\n        CoreNavigator.navigate(\n            `./${competencyId}/${ADDON_COMPETENCY_SUMMARY_PAGE}`,\n            {\n                params: {\n                    contextLevel: ContextLevel.COURSE,\n                    contextInstanceId: this.courseId,\n                },\n            },\n        );\n    }\n\n    /**\n     * Refreshes the competencies.\n     *\n     * @param refresher Refresher.\n     */\n    async refreshCourseCompetencies(refresher?: IonRefresher): Promise<void> {\n        await this.competencies.getSource().invalidateCache();\n\n        this.fetchCourseCompetencies().finally(() => {\n            refresher?.complete();\n        });\n    }\n\n    /**\n     * Log view.\n     */\n    protected performLogView(): void {\n        const source = this.competencies.getSource();\n        if (source.USER_ID && source.USER_ID !== CoreSites.getCurrentSiteUserId()) {\n            // Only log event when viewing own competencies. In LMS viewing students competencies uses a different view.\n            return;\n        }\n\n        CoreAnalytics.logEvent({\n            type: CoreAnalyticsEventType.VIEW_ITEM_LIST,\n            ws: 'tool_lp_data_for_course_competencies_page',\n            name: Translate.instant('addon.competency.coursecompetencies'),\n            data: {\n                category: 'competency',\n                courseid: source.COURSE_ID,\n            },\n            url: `/admin/tool/lp/coursecompetencies.php?courseid=${source.COURSE_ID}`,\n        });\n    }\n\n}\n"],"sourceRoot":"webpack:///"}