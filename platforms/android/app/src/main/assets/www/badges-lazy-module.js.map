{"version":3,"sources":["./src/addons/badges/pages/issued-badge/issued-badge.html","./src/addons/badges/pages/user-badges/user-badges.html","./src/addons/badges/badges-lazy.module.ts","./src/addons/badges/classes/user-badges-source.ts","./src/addons/badges/pages/issued-badge/issued-badge.ts","./src/addons/badges/pages/user-badges/user-badges.ts","./src/core/classes/items-management/swipe-navigation-items-manager.ts"],"names":[],"mappings":"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","file":"badges-lazy-module.js","sourcesContent":["export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <ion-title>\\r\\n            <h1 *ngIf=\\\"badge\\\">{{ badge.name }}</h1>\\r\\n            <h1 *ngIf=\\\"!badge\\\">{{ 'addon.badges.badges' | translate }}</h1>\\r\\n        </ion-title>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content [core-swipe-navigation]=\\\"badges\\\" class=\\\"limited-width\\\">\\r\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!badgeLoaded\\\" (ionRefresh)=\\\"refreshBadges($event.target)\\\">\\r\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n    </ion-refresher>\\r\\n    <core-loading [hideUntil]=\\\"badgeLoaded\\\">\\r\\n        <ion-item-group *ngIf=\\\"badge\\\">\\r\\n            <ion-item class=\\\"ion-text-wrap ion-text-center\\\">\\r\\n                <ion-label>\\r\\n                    <img *ngIf=\\\"badge.badgeurl\\\" class=\\\"large-avatar\\\" [src]=\\\"badge.badgeurl\\\" core-external-content [alt]=\\\"badge.name\\\" />\\r\\n                    <ion-badge color=\\\"danger\\\" *ngIf=\\\"badge.dateexpire && currentTime >= badge.dateexpire\\\">\\r\\n                        {{ 'addon.badges.expired' | translate }}\\r\\n                    </ion-badge>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n        </ion-item-group>\\r\\n\\r\\n        <ion-item-group *ngIf=\\\"user\\\">\\r\\n            <ion-item-divider>\\r\\n                <ion-label>\\r\\n                    <h2>{{ 'addon.badges.recipientdetails' | translate}}</h2>\\r\\n                </ion-label>\\r\\n            </ion-item-divider>\\r\\n            <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                <ion-label>\\r\\n                    <p class=\\\"item-heading\\\">{{ 'core.name' | translate}}</p>\\r\\n                    <p>{{ user.fullname }}</p>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n        </ion-item-group>\\r\\n\\r\\n        <ng-container *ngIf=\\\"badge\\\">\\r\\n            <ion-item-group>\\r\\n                <ion-item-divider>\\r\\n                    <ion-label>\\r\\n                        <h2>{{ 'addon.badges.issuerdetails' | translate}}</h2>\\r\\n                    </ion-label>\\r\\n                </ion-item-divider>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"badge.issuername\\\">\\r\\n                    <ion-label>\\r\\n                        <p class=\\\"item-heading\\\">{{ 'addon.badges.issuername' | translate}}</p>\\r\\n                        <p>{{ badge.issuername }}</p>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"badge.issuercontact\\\">\\r\\n                    <ion-label>\\r\\n                        <p class=\\\"item-heading\\\">{{ 'addon.badges.contact' | translate}}</p>\\r\\n                        <p><a href=\\\"mailto:{{badge.issuercontact}}\\\" core-link auto-login=\\\"no\\\" [showBrowserWarning]=\\\"false\\\">\\r\\n                                {{ badge.issuercontact }}\\r\\n                            </a></p>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n            </ion-item-group>\\r\\n\\r\\n            <ion-item-group>\\r\\n                <ion-item-divider>\\r\\n                    <ion-label>\\r\\n                        <h2>{{ 'addon.badges.badgedetails' | translate}}</h2>\\r\\n                    </ion-label>\\r\\n                </ion-item-divider>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"badge.name\\\">\\r\\n                    <ion-label>\\r\\n                        <p class=\\\"item-heading\\\">{{ 'core.name' | translate}}</p>\\r\\n                        <p>{{ badge.name }}</p>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"badge.version\\\">\\r\\n                    <ion-label>\\r\\n                        <p class=\\\"item-heading\\\">{{ 'addon.badges.version' | translate}}</p>\\r\\n                        <p>{{ badge.version }}</p>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"badge.language\\\">\\r\\n                    <ion-label>\\r\\n                        <p class=\\\"item-heading\\\">{{ 'addon.badges.language' | translate}}</p>\\r\\n                        <p>{{ badge.language }}</p>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"badge.description\\\">\\r\\n                    <ion-label>\\r\\n                        <p class=\\\"item-heading\\\">{{ 'core.description' | translate}}</p>\\r\\n                        <p>{{ badge.description }}</p>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"badge.imageauthorname\\\">\\r\\n                    <ion-label>\\r\\n                        <p class=\\\"item-heading\\\">{{ 'addon.badges.imageauthorname' | translate}}</p>\\r\\n                        <p>{{ badge.imageauthorname }}</p>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"badge.imageauthoremail\\\">\\r\\n                    <ion-label>\\r\\n                        <p class=\\\"item-heading\\\">{{ 'addon.badges.imageauthoremail' | translate}}</p>\\r\\n                        <p><a href=\\\"mailto:{{badge.imageauthoremail}}\\\" core-link auto-login=\\\"no\\\" [showBrowserWarning]=\\\"false\\\">\\r\\n                                {{ badge.imageauthoremail }}\\r\\n                            </a></p>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"badge.imageauthorurl\\\">\\r\\n                    <ion-label>\\r\\n                        <p class=\\\"item-heading\\\">{{ 'addon.badges.imageauthorurl' | translate}}</p>\\r\\n                        <p><a [href]=\\\"badge.imageauthorurl\\\" core-link auto-login=\\\"no\\\"> {{ badge.imageauthorurl }} </a></p>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"badge.imagecaption\\\">\\r\\n                    <ion-label>\\r\\n                        <p class=\\\"item-heading\\\">{{ 'addon.badges.imagecaption' | translate}}</p>\\r\\n                        <p>{{ badge.imagecaption }}</p>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"course\\\">\\r\\n                    <ion-label>\\r\\n                        <p class=\\\"item-heading\\\">{{ 'core.course' | translate}}</p>\\r\\n                        <p>\\r\\n                            <core-format-text [text]=\\\"course.fullname\\\" contextLevel=\\\"course\\\" [contextInstanceId]=\\\"courseId\\\">\\r\\n                            </core-format-text>\\r\\n                        </p>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n                <!-- Criteria (not yet available) -->\\r\\n            </ion-item-group>\\r\\n\\r\\n            <ion-item-group>\\r\\n                <ion-item-divider>\\r\\n                    <ion-label>\\r\\n                        <h2>{{ 'addon.badges.issuancedetails' | translate}}</h2>\\r\\n                    </ion-label>\\r\\n                </ion-item-divider>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"badge.dateissued\\\">\\r\\n                    <ion-label>\\r\\n                        <p class=\\\"item-heading\\\">{{ 'addon.badges.dateawarded' | translate}}</p>\\r\\n                        <p>{{badge.dateissued * 1000 | coreFormatDate }}</p>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"badge.dateexpire\\\">\\r\\n                    <ion-label>\\r\\n                        <p class=\\\"item-heading\\\">{{ 'addon.badges.expirydate' | translate}}</p>\\r\\n                        <p>\\r\\n                            {{ badge.dateexpire * 1000 | coreFormatDate }}\\r\\n                            <span class=\\\"text-danger\\\" *ngIf=\\\"currentTime >= badge.dateexpire\\\">\\r\\n                                {{ 'addon.badges.warnexpired' | translate }}\\r\\n                            </span>\\r\\n                        </p>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n                <!-- Evidence (not yet available) -->\\r\\n            </ion-item-group>\\r\\n\\r\\n            <!-- Endorsement -->\\r\\n            <ion-item-group *ngIf=\\\"badge.endorsement\\\">\\r\\n                <ion-item-divider>\\r\\n                    <ion-label>\\r\\n                        <h2>{{ 'addon.badges.bendorsement' | translate}}</h2>\\r\\n                    </ion-label>\\r\\n                </ion-item-divider>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"badge.endorsement.issuername\\\">\\r\\n                    <ion-label>\\r\\n                        <p class=\\\"item-heading\\\">{{ 'addon.badges.issuername' | translate}}</p>\\r\\n                        <p>{{ badge.endorsement.issuername }}</p>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"badge.endorsement.issueremail\\\">\\r\\n                    <ion-label>\\r\\n                        <p class=\\\"item-heading\\\">{{ 'addon.badges.issueremail' | translate}}</p>\\r\\n                        <p>\\r\\n                            <a href=\\\"mailto:{{badge.endorsement.issueremail}}\\\" core-link auto-login=\\\"no\\\" [showBrowserWarning]=\\\"false\\\">\\r\\n                                {{ badge.endorsement.issueremail }}\\r\\n                            </a>\\r\\n                        </p>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"badge.endorsement.issuerurl\\\">\\r\\n                    <ion-label>\\r\\n                        <p class=\\\"item-heading\\\">{{ 'addon.badges.issuerurl' | translate}}</p>\\r\\n                        <p><a [href]=\\\"badge.endorsement.issuerurl\\\" core-link auto-login=\\\"no\\\"> {{ badge.endorsement.issuerurl }} </a></p>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"badge.endorsement.dateissued\\\">\\r\\n                    <ion-label>\\r\\n                        <p class=\\\"item-heading\\\">{{ 'addon.badges.dateawarded' | translate}}</p>\\r\\n                        <p>{{ badge.endorsement.dateissued * 1000 | coreFormatDate }}</p>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"badge.endorsement.claimid\\\">\\r\\n                    <ion-label>\\r\\n                        <p class=\\\"item-heading\\\">{{ 'addon.badges.claimid' | translate}}</p>\\r\\n                        <p><a [href]=\\\"badge.endorsement.claimid\\\" core-link auto-login=\\\"no\\\"> {{ badge.endorsement.claimid }} </a></p>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"badge.endorsement.claimcomment\\\">\\r\\n                    <ion-label>\\r\\n                        <p class=\\\"item-heading\\\">{{ 'addon.badges.claimcomment' | translate}}</p>\\r\\n                        <p>{{ badge.endorsement.claimcomment }}</p>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n            </ion-item-group>\\r\\n\\r\\n            <!-- Related badges -->\\r\\n            <ion-item-group *ngIf=\\\"badge.relatedbadges\\\">\\r\\n                <ion-item-divider>\\r\\n                    <ion-label>\\r\\n                        <h2>{{ 'addon.badges.relatedbages' | translate}}</h2>\\r\\n                    </ion-label>\\r\\n                </ion-item-divider>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngFor=\\\"let relatedBadge of badge.relatedbadges\\\">\\r\\n                    <ion-label>\\r\\n                        <p class=\\\"item-heading\\\">{{ relatedBadge.name }}</p>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"badge.relatedbadges.length == 0\\\">\\r\\n                    <ion-label>\\r\\n                        <p class=\\\"item-heading\\\">{{ 'addon.badges.norelated' | translate}}</p>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n            </ion-item-group>\\r\\n\\r\\n            <!-- Competencies alignment -->\\r\\n            <ion-item-group *ngIf=\\\"badge.alignment\\\">\\r\\n                <ion-item-divider>\\r\\n                    <ion-label>\\r\\n                        <h2>{{ 'addon.badges.alignment' | translate}}</h2>\\r\\n                    </ion-label>\\r\\n                </ion-item-divider>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngFor=\\\"let alignment of badge.alignment\\\" [href]=\\\"alignment.targeturl\\\" core-link\\r\\n                    auto-login=\\\"no\\\">\\r\\n                    <ion-label>\\r\\n                        <p class=\\\"item-heading\\\">{{ alignment.targetname }}</p>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"badge.alignment.length == 0\\\">\\r\\n                    <ion-label>\\r\\n                        <p class=\\\"item-heading\\\">{{ 'addon.badges.noalignment' | translate}}</p>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n            </ion-item-group>\\r\\n        </ng-container>\\r\\n    </core-loading>\\r\\n</ion-content>\\r\\n\";","export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <ion-title>\\r\\n            <h1>{{ 'addon.badges.badges' | translate }}</h1>\\r\\n        </ion-title>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content>\\r\\n    <core-split-view>\\r\\n        <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!badges.loaded\\\" (ionRefresh)=\\\"refreshBadges($event.target)\\\">\\r\\n            <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n        </ion-refresher>\\r\\n        <core-loading [hideUntil]=\\\"badges.loaded\\\">\\r\\n            <core-empty-box *ngIf=\\\"badges.empty\\\" icon=\\\"fas-trophy\\\" [message]=\\\"'addon.badges.nobadges' | translate\\\">\\r\\n            </core-empty-box>\\r\\n\\r\\n            <ion-list *ngIf=\\\"!badges.empty\\\" class=\\\"ion-no-margin\\\">\\r\\n                <ion-item button class=\\\"ion-text-wrap\\\" *ngFor=\\\"let badge of badges.items\\\" [attr.aria-label]=\\\"badge.name\\\"\\r\\n                    (click)=\\\"badges.select(badge)\\\" [attr.aria-current]=\\\"badges.getItemAriaCurrent(badge)\\\" detail=\\\"true\\\">\\r\\n                    <ion-avatar slot=\\\"start\\\">\\r\\n                        <img [src]=\\\"badge.badgeurl\\\" [alt]=\\\"badge.name\\\" core-external-content>\\r\\n                    </ion-avatar>\\r\\n                    <ion-label>\\r\\n                        <p class=\\\"item-heading\\\">{{ badge.name }}</p>\\r\\n                        <p>{{ badge.dateissued * 1000 | coreFormatDate :'strftimedatetimeshort' }}</p>\\r\\n                    </ion-label>\\r\\n                    <ion-badge slot=\\\"end\\\" color=\\\"danger\\\" *ngIf=\\\"badge.dateexpire && currentTime >= badge.dateexpire\\\">\\r\\n                        {{ 'addon.badges.expired' | translate }}\\r\\n                    </ion-badge>\\r\\n                </ion-item>\\r\\n            </ion-list>\\r\\n        </core-loading>\\r\\n    </core-split-view>\\r\\n</ion-content>\\r\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { conditionalRoutes } from '@/app/app-routing.module';\nimport { CoreScreen } from '@services/screen';\nimport { CoreSharedModule } from '@/core/shared.module';\n\nimport { AddonBadgesIssuedBadgePage } from './pages/issued-badge/issued-badge';\nimport { AddonBadgesUserBadgesPage } from './pages/user-badges/user-badges';\n\nconst mobileRoutes: Routes = [\n    {\n        path: '',\n        pathMatch: 'full',\n        component: AddonBadgesUserBadgesPage,\n    },\n    {\n        path: ':badgeHash',\n        component: AddonBadgesIssuedBadgePage,\n    },\n];\n\nconst tabletRoutes: Routes = [\n    {\n        path: '',\n        component: AddonBadgesUserBadgesPage,\n        children: [\n            {\n                path: ':badgeHash',\n                component: AddonBadgesIssuedBadgePage,\n            },\n        ],\n    },\n];\n\nconst routes: Routes = [\n    ...conditionalRoutes(mobileRoutes, () => CoreScreen.isMobile),\n    ...conditionalRoutes(tabletRoutes, () => CoreScreen.isTablet),\n];\n\n@NgModule({\n    imports: [\n        RouterModule.forChild(routes),\n        CoreSharedModule,\n    ],\n    declarations: [\n        AddonBadgesUserBadgesPage,\n        AddonBadgesIssuedBadgePage,\n    ],\n})\nexport class AddonBadgesLazyModule {}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Params } from '@angular/router';\nimport { CoreRoutedItemsManagerSource } from '@classes/items-management/routed-items-manager-source';\nimport { AddonBadges, AddonBadgesUserBadge } from '../services/badges';\n\n/**\n * Provides a collection of user badges.\n */\nexport class AddonBadgesUserBadgesSource extends CoreRoutedItemsManagerSource<AddonBadgesUserBadge> {\n\n    readonly COURSE_ID: number;\n    readonly USER_ID: number;\n\n    constructor(courseId: number, userId: number) {\n        super();\n\n        this.COURSE_ID = courseId;\n        this.USER_ID = userId;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getItemPath(badge: AddonBadgesUserBadge): string {\n        return badge.uniquehash;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getItemQueryParams(): Params {\n        return {\n            courseId: this.COURSE_ID,\n            userId: this.USER_ID,\n        };\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected async loadPageItems(): Promise<{ items: AddonBadgesUserBadge[] }> {\n        const badges = await AddonBadges.getUserBadges(this.COURSE_ID, this.USER_ID);\n\n        return { items: badges };\n    }\n\n}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnDestroy, OnInit } from '@angular/core';\nimport { IonRefresher } from '@ionic/angular';\nimport { CoreTimeUtils } from '@services/utils/time';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreSites } from '@services/sites';\nimport { CoreUser, CoreUserProfile } from '@features/user/services/user';\nimport { AddonBadges, AddonBadgesUserBadge } from '../../services/badges';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreCourses, CoreEnrolledCourseData } from '@features/courses/services/courses';\nimport { CoreNavigator } from '@services/navigator';\nimport { ActivatedRoute } from '@angular/router';\nimport { CoreSwipeNavigationItemsManager } from '@classes/items-management/swipe-navigation-items-manager';\nimport { AddonBadgesUserBadgesSource } from '@addons/badges/classes/user-badges-source';\nimport { CoreRoutedItemsManagerSourcesTracker } from '@classes/items-management/routed-items-manager-sources-tracker';\nimport { CoreAnalytics, CoreAnalyticsEventType } from '@services/analytics';\nimport { CoreTime } from '@singletons/time';\n\n/**\n * Page that displays the list of calendar events.\n */\n@Component({\n    selector: 'page-addon-badges-issued-badge',\n    templateUrl: 'issued-badge.html',\n})\nexport class AddonBadgesIssuedBadgePage implements OnInit, OnDestroy {\n\n    protected badgeHash = '';\n    protected userId!: number;\n    protected logView: (badge: AddonBadgesUserBadge) => void;\n\n    courseId = 0;\n    user?: CoreUserProfile;\n    course?: CoreEnrolledCourseData;\n    badge?: AddonBadgesUserBadge;\n    badges: CoreSwipeNavigationItemsManager;\n    badgeLoaded = false;\n    currentTime = 0;\n\n    constructor(protected route: ActivatedRoute) {\n        this.courseId = CoreNavigator.getRouteNumberParam('courseId') || this.courseId; // Use 0 for site badges.\n        this.userId = CoreNavigator.getRouteNumberParam('userId') || CoreSites.getRequiredCurrentSite().getUserId();\n        this.badgeHash = CoreNavigator.getRouteParam('badgeHash') || '';\n\n        const source = CoreRoutedItemsManagerSourcesTracker.getOrCreateSource(\n            AddonBadgesUserBadgesSource,\n            [this.courseId, this.userId],\n        );\n\n        this.badges = new CoreSwipeNavigationItemsManager(source);\n\n        this.logView = CoreTime.once((badge) => {\n            CoreAnalytics.logEvent({\n                type: CoreAnalyticsEventType.VIEW_ITEM,\n                ws: 'core_badges_view_user_badges',\n                name: badge.name,\n                data: { id: badge.uniquehash, category: 'badges' },\n                url: `/badges/badge.php?hash=${badge.uniquehash}`,\n            });\n        });\n    }\n\n    /**\n     * View loaded.\n     */\n    ngOnInit(): void {\n        this.fetchIssuedBadge().finally(() => {\n            this.badgeLoaded = true;\n        });\n\n        this.badges.start();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnDestroy(): void {\n        this.badges.destroy();\n    }\n\n    /**\n     * Fetch the issued badge required for the view.\n     *\n     * @returns Promise resolved when done.\n     */\n    async fetchIssuedBadge(): Promise<void> {\n        this.currentTime = CoreTimeUtils.timestamp();\n\n        this.user = await CoreUser.getProfile(this.userId, this.courseId, true);\n\n        try {\n            const badges = await AddonBadges.getUserBadges(this.courseId, this.userId);\n            const badge = badges.find((badge) => this.badgeHash == badge.uniquehash);\n\n            if (!badge) {\n                return;\n            }\n\n            this.badge = badge;\n            if (badge.courseid) {\n                try {\n                    this.course = await CoreCourses.getUserCourse(badge.courseid, true);\n                } catch {\n                    // Maybe an old deleted course.\n                    this.course = undefined;\n                }\n            }\n\n            this.logView(badge);\n        } catch (message) {\n            CoreDomUtils.showErrorModalDefault(message, 'Error getting badge data.');\n        }\n    }\n\n    /**\n     * Refresh the badges.\n     *\n     * @param refresher Refresher.\n     */\n    async refreshBadges(refresher?: IonRefresher): Promise<void> {\n        await CoreUtils.ignoreErrors(Promise.all([\n            AddonBadges.invalidateUserBadges(this.courseId, this.userId),\n        ]));\n\n        await CoreUtils.ignoreErrors(Promise.all([\n            this.fetchIssuedBadge(),\n        ]));\n\n        refresher?.complete();\n    }\n\n}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { AfterViewInit, Component, OnDestroy, ViewChild } from '@angular/core';\nimport { IonRefresher } from '@ionic/angular';\nimport { AddonBadges, AddonBadgesUserBadge } from '../../services/badges';\nimport { CoreTimeUtils } from '@services/utils/time';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreSites } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreSplitViewComponent } from '@components/split-view/split-view';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreListItemsManager } from '@classes/items-management/list-items-manager';\nimport { AddonBadgesUserBadgesSource } from '@addons/badges/classes/user-badges-source';\nimport { CoreRoutedItemsManagerSourcesTracker } from '@classes/items-management/routed-items-manager-sources-tracker';\nimport { CoreAnalytics, CoreAnalyticsEventType } from '@services/analytics';\nimport { CoreTime } from '@singletons/time';\nimport { Translate } from '@singletons';\n\n/**\n * Page that displays the list of calendar events.\n */\n@Component({\n    selector: 'page-addon-badges-user-badges',\n    templateUrl: 'user-badges.html',\n})\nexport class AddonBadgesUserBadgesPage implements AfterViewInit, OnDestroy {\n\n    currentTime = 0;\n    badges: CoreListItemsManager<AddonBadgesUserBadge, AddonBadgesUserBadgesSource>;\n\n    @ViewChild(CoreSplitViewComponent) splitView!: CoreSplitViewComponent;\n\n    protected logView: () => void;\n\n    constructor() {\n        let courseId = CoreNavigator.getRouteNumberParam('courseId') ?? 0; // Use 0 for site badges.\n        const userId = CoreNavigator.getRouteNumberParam('userId') ?? CoreSites.getCurrentSiteUserId();\n\n        if (courseId === CoreSites.getCurrentSiteHomeId()) {\n            // Use courseId 0 for site home, otherwise the site doesn't return site badges.\n            courseId = 0;\n        }\n\n        this.badges = new CoreListItemsManager(\n            CoreRoutedItemsManagerSourcesTracker.getOrCreateSource(AddonBadgesUserBadgesSource, [courseId, userId]),\n            AddonBadgesUserBadgesPage,\n        );\n\n        this.logView = CoreTime.once(() => {\n            CoreAnalytics.logEvent({\n                type: CoreAnalyticsEventType.VIEW_ITEM_LIST,\n                ws: 'core_badges_view_user_badges',\n                name: Translate.instant('addon.badges.badges'),\n                data: { courseId: this.badges.getSource().COURSE_ID, category: 'badges' },\n                url: '/badges/mybadges.php',\n            });\n        });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async ngAfterViewInit(): Promise<void> {\n        await this.fetchInitialBadges();\n\n        this.badges.start(this.splitView);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnDestroy(): void {\n        this.badges.destroy();\n    }\n\n    /**\n     * Refresh the badges.\n     *\n     * @param refresher Refresher.\n     */\n    async refreshBadges(refresher?: IonRefresher): Promise<void> {\n        await CoreUtils.ignoreErrors(\n            AddonBadges.invalidateUserBadges(\n                this.badges.getSource().COURSE_ID,\n                this.badges.getSource().USER_ID,\n            ),\n        );\n        await CoreUtils.ignoreErrors(this.badges.reload());\n\n        refresher?.complete();\n    }\n\n    /**\n     * Obtain the initial list of badges.\n     */\n    private async fetchInitialBadges(): Promise<void> {\n        this.currentTime = CoreTimeUtils.timestamp();\n\n        try {\n            await this.badges.reload();\n\n            this.logView();\n        } catch (message) {\n            CoreDomUtils.showErrorModalDefault(message, 'Error loading badges');\n\n            this.badges.reset();\n        }\n    }\n\n}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { ActivatedRoute, ActivatedRouteSnapshot, UrlSegment } from '@angular/router';\n\nimport { CoreNavigator } from '@services/navigator';\n\nimport { CoreRoutedItemsManager } from './routed-items-manager';\nimport { CoreRoutedItemsManagerSource } from './routed-items-manager-source';\n\n/**\n * Helper class to manage the state and routing of a swipeable page.\n */\nexport class CoreSwipeNavigationItemsManager<\n    Item = unknown,\n    Source extends CoreRoutedItemsManagerSource<Item> = CoreRoutedItemsManagerSource<Item>\n>\n    extends CoreRoutedItemsManager<Item, Source> {\n\n    /**\n     * Process page started operations.\n     */\n    async start(): Promise<void> {\n        this.updateSelectedItem();\n    }\n\n    /**\n     * Navigate to the next item.\n     */\n    async navigateToNextItem(): Promise<void> {\n        await this.navigateToItemBy(1, 'forward');\n    }\n\n    /**\n     * Navigate to the previous item.\n     */\n    async navigateToPreviousItem(): Promise<void> {\n        await this.navigateToItemBy(-1, 'back');\n    }\n\n    /**\n     * Has a next item.\n     *\n     * @returns If has next item.\n     */\n    async hasNextItem(): Promise<boolean> {\n        const item = await this.getItemBy(1);\n\n        return !!item;\n    }\n\n    /**\n     * Has a previous item.\n     *\n     * @returns If has previous item.\n     */\n    async hasPreviousItem(): Promise<boolean> {\n        const item = await this.getItemBy(-1);\n\n        return !!item;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected getCurrentPageRoute(): ActivatedRoute | null {\n        return CoreNavigator.getCurrentRoute();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected getSelectedItemPathFromRoute(route: ActivatedRouteSnapshot): string | null {\n        const segments: UrlSegment[] = [];\n\n        while (route) {\n            segments.push(...route.url);\n\n            if (!route.firstChild) {\n                break;\n            }\n\n            route = route.firstChild;\n        }\n\n        return segments.map(segment => segment.path).join('/').replace(/\\/+/, '/').trim() || null;\n    }\n\n    /**\n     * Navigate to an item by an offset.\n     *\n     * @param delta Index offset.\n     * @param animationDirection Animation direction.\n     */\n    protected async navigateToItemBy(delta: number, animationDirection: 'forward' | 'back'): Promise<void> {\n        const item = await this.getItemBy(delta);\n\n        if (!item) {\n            return;\n        }\n\n        await this.navigateToItem(item, { animationDirection, replace: true });\n    }\n\n    /**\n     * Get item by an offset.\n     *\n     * @param delta Index offset.\n     * @returns The item or null if none.\n     */\n    protected async getItemBy(delta: number): Promise<Item | null> {\n        const items = this.getSource().getItems();\n        const selectedIndex = (this.selectedItem && items?.indexOf(this.selectedItem)) ?? -1;\n\n        if (selectedIndex === -1 || items === null) {\n            return null;\n        }\n\n        const deltaStep = delta > 0 ? 1 : -1;\n        let nextIndex = selectedIndex;\n        let deltaMoved = 0;\n\n        while (deltaMoved !== delta) {\n            nextIndex += deltaStep;\n\n            if (nextIndex < 0) {\n                return null;\n            }\n\n            if (nextIndex >= items.length) {\n                break;\n            }\n\n            if (this.skipItemInSwipe(items[nextIndex])) {\n                continue;\n            }\n\n            deltaMoved += deltaStep;\n        }\n\n        if (deltaMoved === delta) {\n            return items[nextIndex];\n        }\n\n        if (!this.getSource().isCompleted()) {\n            await this.getSource().load();\n\n            return this.getItemBy(delta);\n        }\n\n        return null;\n    }\n\n    /**\n     * Check if an item should be skipped during swipe navigation.\n     *\n     * @param item Item.\n     * @returns Whether to skip this item during swipe navigation.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    protected skipItemInSwipe(item: Item): boolean {\n        return false;\n    }\n\n}\n"],"sourceRoot":"webpack:///"}