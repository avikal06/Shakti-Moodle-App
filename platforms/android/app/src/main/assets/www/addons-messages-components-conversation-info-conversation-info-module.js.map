{"version":3,"sources":["./src/addons/messages/components/conversation-info/conversation-info.html","./src/addons/messages/components/conversation-info/conversation-info.component.ts","./src/addons/messages/components/conversation-info/conversation-info.module.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAe,8IAA+E,0CAA0C,qiBAAqiB,oCAAoC,o8BAAo8B,+CAA+C,6BAA6B,GAAG,8fAA8f,mBAAmB,kfAAkf,E;;;;;;;;;;;;ACAvuF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAAqC;AACrC,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,iDAAiD;AACjD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAEwB;AAMxB;AACkB;AACF;AACH;AAE9C;;GAEG;IAKU,sCAAsC,SAAtC,sCAAsC;IAU/C,YACc,KAAqB;QAArB,UAAK,GAAL,KAAK,CAAgB;QAT1B,mBAAc,GAAG,CAAC,CAAC;QAE5B,WAAM,GAAG,KAAK,CAAC;QAEf,YAAO,GAAsC,EAAE,CAAC;QAChD,gBAAW,GAAG,KAAK,CAAC;QACpB,kBAAa,GAAG,KAAK,CAAC;IAKtB,CAAC;IAED;;OAEG;IACH,QAAQ;QACJ,IAAI,CAAC,SAAS,EAAE,CAAC,OAAO,CAAC,GAAG,EAAE;YAC1B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACvB,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;OAIG;IACa,SAAS;;YACrB,mCAAmC;YACnC,IAAI;gBACA,MAAM,YAAY,GAAG,MAAM,gEAAa,CAAC,eAAe,CAAC,IAAI,CAAC,cAAc,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBACjG,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;gBAEjC,uBAAuB;gBACvB,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;aAC7B;YAAC,OAAO,KAAK,EAAE;gBACZ,gEAAY,CAAC,qBAAqB,CAAC,KAAK,EAAE,wBAAwB,CAAC,CAAC;aACvE;QACL,CAAC;KAAA;IAED;;;;;OAKG;IACa,YAAY,CAAC,WAAqB;;YAC9C,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;YAE3B,MAAM,SAAS,GAAG,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YAExD,MAAM,IAAI,GAAG,MAAM,gEAAa,CAAC,sBAAsB,CAAC,IAAI,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC;YACxF,IAAI,WAAW,EAAE;gBACb,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aACpD;iBAAM;gBACH,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;aAC/B;YAED,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;QACxC,CAAC;KAAA;IAED;;;;;OAKG;IACG,eAAe,CAAC,gBAA6B;;YAC/C,IAAI;gBACA,MAAM,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;aACjC;YAAC,OAAO,KAAK,EAAE;gBACZ,gEAAY,CAAC,qBAAqB,CAAC,KAAK,EAAE,wBAAwB,CAAC,CAAC;gBACpE,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;aAC7B;oBAAS;gBACN,gBAAgB,IAAI,gBAAgB,EAAE,CAAC;aAC1C;QACL,CAAC;KAAA;IAED;;;;;OAKG;IACG,WAAW,CAAC,SAAwB;;YACtC,MAAM,QAAQ,GAAoB,EAAE,CAAC;YAErC,QAAQ,CAAC,IAAI,CAAC,gEAAa,CAAC,sBAAsB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;YACzE,QAAQ,CAAC,IAAI,CAAC,gEAAa,CAAC,6BAA6B,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;YAEhF,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YAE5B,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC,OAAO,CAAC,GAAG,EAAE;gBAChC,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,QAAQ,GAAG;YAC1B,CAAC,CAAC,CAAC;QACP,CAAC;KAAA;IAED;;;;OAIG;IACH,UAAU,CAAC,MAAe;QACtB,2DAAe,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACpC,CAAC;CAEJ;;YAtHQ,8DAAc;;;6BAYlB,mDAAK;;AAFG,sCAAsC;IAJlD,+DAAS,CAAC;QACP,QAAQ,EAAE,uCAAuC;QACjD,kQAAqC;KACxC,CAAC;GACW,sCAAsC,CA4GlD;AA5GkD;;;;;;;;;;;;;AChCnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAAqC;AACrC,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,iDAAiD;AACjD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAEQ;AACe;AAC+B;AAErC;IAUrC,4CAA4C,SAA5C,4CAA4C;CAAG;AAA/C,4CAA4C;IARxD,8DAAQ,CAAC;QACN,YAAY,EAAE;YACV,mGAAsC;SACzC;QACD,OAAO,EAAE;YACL,oEAAgB;SACnB;KACJ,CAAC;GACW,4CAA4C,CAAG;AAAH","file":"addons-messages-components-conversation-info-conversation-info-module.js","sourcesContent":["export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-title>\\r\\n            <h1>{{ 'addon.messages.groupinfo' | translate }}</h1>\\r\\n        </ion-title>\\r\\n        <ion-buttons slot=\\\"end\\\">\\r\\n            <ion-button fill=\\\"clear\\\" (click)=\\\"closeModal()\\\" [attr.aria-label]=\\\"'core.close' | translate\\\">\\r\\n                <ion-icon name=\\\"fas-xmark\\\" slot=\\\"icon-only\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n            </ion-button>\\r\\n        </ion-buttons>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content>\\r\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!loaded\\\" (ionRefresh)=\\\"refreshData($event.target)\\\">\\r\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n    </ion-refresher>\\r\\n\\r\\n    <core-loading [hideUntil]=\\\"loaded\\\">\\r\\n        <ion-item class=\\\"ion-text-center\\\" *ngIf=\\\"conversation\\\">\\r\\n            <ion-label>\\r\\n                <div class=\\\"large-avatar\\\">\\r\\n                    <img class=\\\"avatar\\\" [src]=\\\"conversation.imageurl\\\" core-external-content [alt]=\\\"conversation.name\\\"\\r\\n                        onError=\\\"this.src='assets/img/group-avatar.svg'\\\">\\r\\n                </div>\\r\\n                <h2>\\r\\n                    <core-format-text [text]=\\\"conversation.name\\\" contextLevel=\\\"system\\\" [contextInstanceId]=\\\"0\\\"></core-format-text>\\r\\n                </h2>\\r\\n                <p>\\r\\n                    <core-format-text *ngIf=\\\"conversation.subname\\\" [text]=\\\"conversation.subname\\\" contextLevel=\\\"system\\\"\\r\\n                        [contextInstanceId]=\\\"0\\\">\\r\\n                    </core-format-text>\\r\\n                </p>\\r\\n                <p>{{ 'addon.messages.numparticipants' | translate:{$a: conversation.membercount} }}</p>\\r\\n            </ion-label>\\r\\n        </ion-item>\\r\\n\\r\\n        <ion-item class=\\\"ion-text-wrap addon-messages-conversation-item\\\" *ngFor=\\\"let member of members\\\" (click)=\\\"closeModal(member.id)\\\"\\r\\n            detail=\\\"true\\\" button>\\r\\n            <core-user-avatar [user]=\\\"member\\\" [linkProfile]=\\\"false\\\" [checkOnline]=\\\"member.showonlinestatus\\\" slot=\\\"start\\\">\\r\\n            </core-user-avatar>\\r\\n            <ion-label>\\r\\n                <p class=\\\"item-heading\\\">\\r\\n                    {{ member.fullname }}\\r\\n                    <ion-icon name=\\\"fas-user-slash\\\" *ngIf=\\\"member.isblocked\\\"\\r\\n                        [attr.aria-label]=\\\"'addon.messages.contactblocked' | translate\\\">\\r\\n                    </ion-icon>\\r\\n                </p>\\r\\n            </ion-label>\\r\\n        </ion-item>\\r\\n\\r\\n        <core-infinite-loading [enabled]=\\\"canLoadMore\\\" (action)=\\\"loadMoreMembers($event)\\\" [error]=\\\"loadMoreError\\\">\\r\\n        </core-infinite-loading>\\r\\n    </core-loading>\\r\\n</ion-content>\\r\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, Input, OnInit } from '@angular/core';\nimport { IonRefresher } from '@ionic/angular';\nimport {\n    AddonMessagesConversationFormatted,\n    AddonMessagesConversationMember,\n    AddonMessages,\n} from '../../services/messages';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { ActivatedRoute } from '@angular/router';\nimport { ModalController } from '@singletons';\n\n/**\n * Component that displays the list of conversations, including group conversations.\n */\n@Component({\n    selector: 'page-addon-messages-conversation-info',\n    templateUrl: 'conversation-info.html',\n})\nexport class AddonMessagesConversationInfoComponent implements OnInit {\n\n    @Input() conversationId = 0;\n\n    loaded = false;\n    conversation?: AddonMessagesConversationFormatted;\n    members: AddonMessagesConversationMember[] = [];\n    canLoadMore = false;\n    loadMoreError = false;\n\n    constructor(\n        protected route: ActivatedRoute,\n    ) {\n    }\n\n    /**\n     * Component loaded.\n     */\n    ngOnInit(): void {\n        this.fetchData().finally(() => {\n            this.loaded = true;\n        });\n    }\n\n    /**\n     * Fetch the required data.\n     *\n     * @returns Promise resolved when done.\n     */\n    protected async fetchData(): Promise<void> {\n        // Get the conversation data first.\n        try {\n            const conversation = await AddonMessages.getConversation(this.conversationId, false, true, 0, 0);\n            this.conversation = conversation;\n\n            // Now get the members.\n            await this.fetchMembers();\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'Error getting members.');\n        }\n    }\n\n    /**\n     * Get conversation members.\n     *\n     * @param loadingMore Whether we are loading more data or just the first ones.\n     * @returns Promise resolved when done.\n     */\n    protected async fetchMembers(loadingMore?: boolean): Promise<void> {\n        this.loadMoreError = false;\n\n        const limitFrom = loadingMore ? this.members.length : 0;\n\n        const data = await AddonMessages.getConversationMembers(this.conversationId, limitFrom);\n        if (loadingMore) {\n            this.members = this.members.concat(data.members);\n        } else {\n            this.members = data.members;\n        }\n\n        this.canLoadMore = data.canLoadMore;\n    }\n\n    /**\n     * Function to load more members.\n     *\n     * @param infiniteComplete Infinite scroll complete function. Only used from core-infinite-loading.\n     * @returns Resolved when done.\n     */\n    async loadMoreMembers(infiniteComplete?: () => void): Promise<void> {\n        try {\n            await this.fetchMembers(true);\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'Error getting members.');\n            this.loadMoreError = true;\n        } finally {\n            infiniteComplete && infiniteComplete();\n        }\n    }\n\n    /**\n     * Refresh the data.\n     *\n     * @param refresher Refresher.\n     * @returns Promise resolved when done.\n     */\n    async refreshData(refresher?: IonRefresher): Promise<void> {\n        const promises: Promise<void>[] = [];\n\n        promises.push(AddonMessages.invalidateConversation(this.conversationId));\n        promises.push(AddonMessages.invalidateConversationMembers(this.conversationId));\n\n        await Promise.all(promises);\n\n        await this.fetchData().finally(() => {\n            refresher?.complete();\n        });\n    }\n\n    /**\n     * Close modal.\n     *\n     * @param userId User conversation to load.\n     */\n    closeModal(userId?: number): void {\n        ModalController.dismiss(userId);\n    }\n\n}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { NgModule } from '@angular/core';\nimport { CoreSharedModule } from '@/core/shared.module';\nimport { AddonMessagesConversationInfoComponent } from './conversation-info.component';\n\nexport { AddonMessagesConversationInfoComponent };\n\n@NgModule({\n    declarations: [\n        AddonMessagesConversationInfoComponent,\n    ],\n    imports: [\n        CoreSharedModule,\n    ],\n})\nexport class AddonMessagesConversationInfoComponentModule {}\n"],"sourceRoot":"webpack:///"}