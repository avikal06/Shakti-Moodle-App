{"version":3,"sources":["./src/addons/mod/lesson/pages/index/index.html","./src/addons/mod/lesson/pages/player/player.html","./src/addons/mod/lesson/pages/user-retake/user-retake.html","./src/addons/mod/lesson/lesson-lazy.module.ts","./src/addons/mod/lesson/pages/index/index.ts","./src/addons/mod/lesson/pages/player/player.scss","./src/addons/mod/lesson/pages/player/player.ts","./src/addons/mod/lesson/pages/user-retake/user-retake.scss","./src/addons/mod/lesson/pages/user-retake/user-retake.ts"],"names":[],"mappings":"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","file":"lesson-lazy-module.js","sourcesContent":["export default \"<ion-header collapsible>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <ion-title>\\r\\n            <h1>\\r\\n                <core-format-text [text]=\\\"title\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"module?.id\\\" [courseId]=\\\"courseId\\\">\\r\\n                </core-format-text>\\r\\n            </h1>\\r\\n        </ion-title>\\r\\n        <ion-buttons slot=\\\"end\\\">\\r\\n            <!-- The buttons defined by the component will be added in here. -->\\r\\n        </ion-buttons>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content class=\\\"limited-width\\\">\\r\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"activityComponent?.showLoading\\\" (ionRefresh)=\\\"activityComponent?.doRefresh($event.target)\\\">\\r\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n    </ion-refresher>\\r\\n\\r\\n    <addon-mod-lesson-index [module]=\\\"module\\\" [courseId]=\\\"courseId\\\" [group]=\\\"group\\\" [action]=\\\"action\\\" (dataRetrieved)=\\\"updateData($event)\\\">\\r\\n    </addon-mod-lesson-index>\\r\\n</ion-content>\\r\\n\";","export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <ion-title>\\r\\n            <h1>\\r\\n                <core-format-text [text]=\\\"title\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"lesson?.coursemodule\\\" [courseId]=\\\"courseId\\\">\\r\\n                </core-format-text>\\r\\n            </h1>\\r\\n        </ion-title>\\r\\n        <ion-buttons slot=\\\"end\\\">\\r\\n            <ion-button fill=\\\"clear\\\" *ngIf=\\\"displayMenu || mediaFile\\\" [attr.aria-label]=\\\"'addon.mod_lesson.lessonmenu' | translate\\\"\\r\\n                (click)=\\\"showMenu()\\\">\\r\\n                <ion-icon name=\\\"fas-bookmark\\\" slot=\\\"icon-only\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n            </ion-button>\\r\\n        </ion-buttons>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content class=\\\"limited-width\\\">\\r\\n    <core-loading [hideUntil]=\\\"loaded\\\">\\r\\n        <!-- Info messages. Only show the first one. -->\\r\\n        <ion-card class=\\\"core-info-card\\\" *ngIf=\\\"lesson && messages?.length\\\">\\r\\n            <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                <ion-icon name=\\\"fas-circle-info\\\" slot=\\\"start\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                <ion-label>{{ messages[0].message }}</ion-label>\\r\\n            </ion-item>\\r\\n        </ion-card>\\r\\n\\r\\n        <div *ngIf=\\\"lesson\\\" [ngClass]='{\\\"addon-mod_lesson-slideshow\\\": lesson.slideshow}'\\r\\n            [ngStyle]=\\\"{'width': lessonWidth, 'height': lessonHeight}\\\">\\r\\n\\r\\n            <core-timer *ngIf=\\\"endTime\\\" [endTime]=\\\"endTime\\\" (finished)=\\\"timeUp()\\\" [timeLeftClassThreshold]=\\\"-1\\\"\\r\\n                [timerText]=\\\"'addon.mod_lesson.timeremaining' | translate\\\">\\r\\n            </core-timer>\\r\\n\\r\\n            <!-- Retake and ongoing score. -->\\r\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"showRetake && !eolData && !processData\\\">\\r\\n                <ion-label>\\r\\n                    <p>{{ 'addon.mod_lesson.attempt' | translate:{$a: retake} }}</p>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n            <ion-item *ngIf=\\\"pageData && pageData.ongoingscore && !eolData && !processData\\\"\\r\\n                class=\\\"addon-mod_lesson-ongoingscore ion-text-wrap\\\">\\r\\n                <ion-label>{{ pageData.ongoingscore }}</ion-label>\\r\\n            </ion-item>\\r\\n\\r\\n            <!-- Page content. -->\\r\\n            <ion-card *ngIf=\\\"!eolData && !processData\\\">\\r\\n                <!-- Content page. -->\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"!question && pageContent\\\">\\r\\n                    <ion-label>\\r\\n                        <core-format-text [component]=\\\"component\\\" [componentId]=\\\"lesson.coursemodule\\\" [text]=\\\"pageContent\\\"\\r\\n                            contextLevel=\\\"module\\\" [contextInstanceId]=\\\"lesson.coursemodule\\\" [courseId]=\\\"courseId\\\">\\r\\n                        </core-format-text>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n\\r\\n                <!-- Question page. -->\\r\\n                <!-- We need to set ngIf loaded to make formGroup directive restart every time a page changes, see MOBILE-2540. -->\\r\\n                <form *ngIf=\\\"question && loaded\\\" [formGroup]=\\\"questionForm\\\" #questionFormEl (ngSubmit)=\\\"submitQuestion($event)\\\">\\r\\n\\r\\n                    <ion-item-divider class=\\\"ion-text-wrap\\\" *ngIf=\\\"pageContent\\\">\\r\\n                        <ion-label>\\r\\n                            <h2>\\r\\n                                <core-format-text [component]=\\\"component\\\" [componentId]=\\\"lesson?.coursemodule\\\" [text]=\\\"pageContent\\\"\\r\\n                                    contextLevel=\\\"module\\\" [contextInstanceId]=\\\"lesson.coursemodule\\\" [courseId]=\\\"courseId\\\">\\r\\n                                </core-format-text>\\r\\n                            </h2>\\r\\n                        </ion-label>\\r\\n                    </ion-item-divider>\\r\\n\\r\\n                    <!-- Render a different input depending on the type of the question. -->\\r\\n                    <ng-container [ngSwitch]=\\\"question.template\\\">\\r\\n\\r\\n                        <!-- Short answer. -->\\r\\n                        <ion-item class=\\\"ion-text-wrap\\\" *ngSwitchCase=\\\"'shortanswer'\\\">\\r\\n                            <ion-label class=\\\"sr-only\\\" stacked></ion-label>\\r\\n                            <ion-input [type]=\\\"question.input!.type\\\" placeholder=\\\"{{ 'addon.mod_lesson.youranswer' | translate }}\\\"\\r\\n                                [id]=\\\"question.input!.id\\\" [formControlName]=\\\"question.input!.name\\\" autocorrect=\\\"off\\\"\\r\\n                                [maxlength]=\\\"question.input!.maxlength\\\">\\r\\n                            </ion-input>\\r\\n                        </ion-item>\\r\\n\\r\\n                        <!-- Essay. -->\\r\\n                        <ng-container *ngSwitchCase=\\\"'essay'\\\">\\r\\n                            <ion-item *ngIf=\\\"question.textarea\\\">\\r\\n                                <ion-label class=\\\"sr-only\\\">{{ 'core.content' | translate }}</ion-label>\\r\\n                                <core-rich-text-editor placeholder=\\\"{{ 'addon.mod_lesson.youranswer' | translate }}\\\"\\r\\n                                    [control]=\\\"question.control\\\" [component]=\\\"component\\\" [componentId]=\\\"lesson?.coursemodule\\\"\\r\\n                                    [autoSave]=\\\"true\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"lesson?.coursemodule\\\"\\r\\n                                    elementId=\\\"answer_editor\\\">\\r\\n                                </core-rich-text-editor>\\r\\n                            </ion-item>\\r\\n                            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"!question.textarea && question.useranswer\\\">\\r\\n                                <ion-label>\\r\\n                                    <p class=\\\"item-heading\\\">{{ 'addon.mod_lesson.youranswer' | translate }}</p>\\r\\n                                    <p>\\r\\n                                        <core-format-text [component]=\\\"component\\\" [componentId]=\\\"lesson?.coursemodule\\\"\\r\\n                                            [text]=\\\"question.useranswer\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"lesson?.coursemodule\\\"\\r\\n                                            [courseId]=\\\"courseId\\\">\\r\\n                                        </core-format-text>\\r\\n                                    </p>\\r\\n                                </ion-label>\\r\\n                            </ion-item>\\r\\n                        </ng-container>\\r\\n\\r\\n                        <!-- Multichoice. -->\\r\\n                        <ng-container *ngSwitchCase=\\\"'multichoice'\\\">\\r\\n                            <!-- Single choice. -->\\r\\n                            <ion-radio-group *ngIf=\\\"!question.multi\\\" [formControlName]=\\\"question.controlName\\\">\\r\\n                                <ion-item class=\\\"ion-text-wrap\\\" *ngFor=\\\"let option of question.options\\\">\\r\\n                                    <ion-label>\\r\\n                                        <core-format-text [component]=\\\"component\\\" [componentId]=\\\"lesson.coursemodule\\\" [text]=\\\"option.text\\\"\\r\\n                                            contextLevel=\\\"module\\\" [contextInstanceId]=\\\"lesson?.coursemodule\\\" [courseId]=\\\"courseId\\\">\\r\\n                                        </core-format-text>\\r\\n                                    </ion-label>\\r\\n                                    <ion-radio slot=\\\"end\\\" [id]=\\\"option.id\\\" [value]=\\\"option.value\\\" [disabled]=\\\"option.disabled\\\">\\r\\n                                    </ion-radio>\\r\\n                                </ion-item>\\r\\n                            </ion-radio-group>\\r\\n\\r\\n                            <!-- Multiple choice. -->\\r\\n                            <ng-container *ngIf=\\\"question.multi\\\">\\r\\n                                <ion-item class=\\\"ion-text-wrap\\\" *ngFor=\\\"let option of question.options\\\">\\r\\n                                    <ion-label>\\r\\n                                        <core-format-text [component]=\\\"component\\\" [componentId]=\\\"lesson?.coursemodule\\\" [text]=\\\"option.text\\\"\\r\\n                                            contextLevel=\\\"module\\\" [contextInstanceId]=\\\"lesson?.coursemodule\\\" [courseId]=\\\"courseId\\\">\\r\\n                                        </core-format-text>\\r\\n                                    </ion-label>\\r\\n                                    <ion-checkbox [id]=\\\"option.id\\\" [formControlName]=\\\"option.name\\\" slot=\\\"end\\\"></ion-checkbox>\\r\\n                                </ion-item>\\r\\n                            </ng-container>\\r\\n                        </ng-container>\\r\\n\\r\\n                        <!-- Matching. -->\\r\\n                        <ng-container *ngSwitchCase=\\\"'matching'\\\">\\r\\n                            <ion-item class=\\\"ion-text-wrap\\\" *ngFor=\\\"let row of question.rows\\\">\\r\\n                                <ion-label>\\r\\n                                    <p>\\r\\n                                        <core-format-text [component]=\\\"component\\\" [componentId]=\\\"lesson?.coursemodule\\\" [text]=\\\"row.text\\\"\\r\\n                                            contextLevel=\\\"module\\\" [contextInstanceId]=\\\"lesson?.coursemodule\\\" [courseId]=\\\"courseId\\\">\\r\\n                                        </core-format-text>\\r\\n                                    </p>\\r\\n                                </ion-label>\\r\\n                                <ion-select [id]=\\\"row.id\\\" [formControlName]=\\\"row.name\\\" [cancelText]=\\\"'core.cancel' | translate\\\"\\r\\n                                    interface=\\\"action-sheet\\\">\\r\\n                                    <ion-select-option *ngFor=\\\"let option of row.options\\\" [value]=\\\"option.value\\\">\\r\\n                                        {{option.label}}\\r\\n                                    </ion-select-option>\\r\\n                                </ion-select>\\r\\n                            </ion-item>\\r\\n                        </ng-container>\\r\\n                    </ng-container>\\r\\n\\r\\n                    <ion-button expand=\\\"block\\\" type=\\\"submit\\\" class=\\\"ion-text-wrap ion-margin button-no-uppercase\\\">\\r\\n                        {{ question.submitLabel }}\\r\\n                    </ion-button>\\r\\n                    <!-- Remove this once Ionic fixes this bug: https://github.com/ionic-team/ionic-framework/issues/19368 -->\\r\\n                    <input type=\\\"submit\\\" class=\\\"core-submit-hidden-enter\\\" />\\r\\n                </form>\\r\\n            </ion-card>\\r\\n\\r\\n            <!-- Page buttons and progress. -->\\r\\n            <ion-list *ngIf=\\\"!eolData && !processData\\\">\\r\\n                <ion-grid *ngIf=\\\"pageButtons?.length\\\" class=\\\"ion-text-wrap addon-mod_lesson-pagebuttons\\\">\\r\\n                    <ion-row class=\\\"ion-align-items-center\\\">\\r\\n                        <ion-col *ngFor=\\\"let button of pageButtons\\\" size=\\\"12\\\" size-md=\\\"6\\\" size-lg=\\\"3\\\" col-xl>\\r\\n                            <ion-button expand=\\\"block\\\" fill=\\\"outline\\\" [id]=\\\"button.id\\\" (click)=\\\"buttonClicked(button.data)\\\"\\r\\n                                class=\\\"ion-text-wrap button-no-uppercase\\\">\\r\\n                                {{ button.content }}\\r\\n                            </ion-button>\\r\\n                        </ion-col>\\r\\n                    </ion-row>\\r\\n                </ion-grid>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"lesson?.progressbar && !canManage && pageData\\\">\\r\\n                    <ion-label>\\r\\n                        <span id=\\\"addon-mod_lesson-{{cmId}}-progress\\\">\\r\\n                            {{ 'addon.mod_lesson.progresscompleted' | translate:{$a: pageData.progress} }}\\r\\n                        </span>\\r\\n                        <core-progress-bar [progress]=\\\"pageData.progress\\\" ariaDescribedBy=\\\"addon-mod_lesson-{{cmId}}-progress\\\">\\r\\n                        </core-progress-bar>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n                <ion-card class=\\\"core-info-card\\\" *ngIf=\\\"lesson?.progressbar && canManage\\\">\\r\\n                    <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                        <ion-icon name=\\\"fas-circle-info\\\" slot=\\\"start\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                        <ion-label>{{ 'addon.mod_lesson.progressbarteacherwarning2' | translate }}</ion-label>\\r\\n                    </ion-item>\\r\\n                </ion-card>\\r\\n            </ion-list>\\r\\n\\r\\n            <!-- End of lesson reached. -->\\r\\n            <ion-card class=\\\"core-warning-card\\\" *ngIf=\\\"eolData && !processData && eolData.offline?.value\\\">\\r\\n                <ion-item>\\r\\n                    <ion-icon name=\\\"fas-triangle-exclamation\\\" slot=\\\"start\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                    <ion-label>{{ 'addon.mod_lesson.finishretakeoffline' | translate }}</ion-label>\\r\\n                </ion-item>\\r\\n            </ion-card>\\r\\n\\r\\n            <ion-card *ngIf=\\\"eolData && !processData\\\">\\r\\n\\r\\n                <ion-card-header class=\\\"ion-text-wrap\\\" *ngIf=\\\"eolData.gradelesson\\\">\\r\\n                    <ion-card-title>{{ 'addon.mod_lesson.congratulations' | translate }}</ion-card-title>\\r\\n                </ion-card-header>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"eolData.notenoughtimespent\\\">\\r\\n                    <ion-label>{{ eolData.notenoughtimespent.message }}</ion-label>\\r\\n                </ion-item>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"eolData.numberofpagesviewed\\\">\\r\\n                    <ion-label>{{ eolData.numberofpagesviewed.message }}</ion-label>\\r\\n                </ion-item>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"eolData.youshouldview\\\">\\r\\n                    <ion-label>{{ eolData.youshouldview.message }}</ion-label>\\r\\n                </ion-item>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"eolData.numberofcorrectanswers\\\">\\r\\n                    <ion-label>{{ eolData.numberofcorrectanswers.message }}</ion-label>\\r\\n                </ion-item>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"eolData.displayscorewithessays\\\">\\r\\n                    <ion-label [innerHTML]=\\\"eolData.displayscorewithessays.message\\\"></ion-label>\\r\\n                </ion-item>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"!eolData.displayscorewithessays && eolData.displayscorewithoutessays\\\">\\r\\n                    <ion-label>{{ eolData.displayscorewithoutessays.message }}</ion-label>\\r\\n                </ion-item>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"eolData.yourcurrentgradeisoutof\\\">\\r\\n                    <ion-label>{{ eolData.yourcurrentgradeisoutof.message }}</ion-label>\\r\\n                </ion-item>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"eolData.eolstudentoutoftimenoanswers\\\">\\r\\n                    <ion-label>{{ eolData.eolstudentoutoftimenoanswers.message }}</ion-label>\\r\\n                </ion-item>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"eolData.welldone\\\">\\r\\n                    <ion-label>{{ eolData.welldone.message }}</ion-label>\\r\\n                </ion-item>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"lesson.progressbar && eolData.progresscompleted\\\">\\r\\n                    <ion-label>\\r\\n                        <span id=\\\"addon-mod_lesson-{{cmId}}-progress-end\\\">\\r\\n                            {{ 'addon.mod_lesson.progresscompleted' | translate:{$a: eolData.progresscompleted.value} }}\\r\\n                        </span>\\r\\n                        <core-progress-bar [progress]=\\\"eolData.progresscompleted.value\\\"\\r\\n                            ariaDescribedBy=\\\"addon-mod_lesson-{{cmId}}-progress-end\\\">\\r\\n                        </core-progress-bar>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"eolData.displayofgrade\\\">\\r\\n                    <ion-label>{{ eolData.displayofgrade.message }}</ion-label>\\r\\n                </ion-item>\\r\\n                <ion-button *ngIf=\\\"eolData.reviewlesson\\\" expand=\\\"block\\\" class=\\\"ion-text-wrap ion-margin button-no-uppercase\\\"\\r\\n                    (click)=\\\"reviewLesson(reviewPageId!)\\\">\\r\\n                    {{ 'addon.mod_lesson.reviewlesson' | translate }}\\r\\n                </ion-button>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"eolData.modattemptsnoteacher\\\">\\r\\n                    <ion-label>{{ eolData.modattemptsnoteacher.message }}</ion-label>\\r\\n                </ion-item>\\r\\n                <!-- If activity link was successfully formatted, render the button. -->\\r\\n                <ion-button *ngIf=\\\"activityLink && activityLink.formatted\\\" expand=\\\"block\\\" fill=\\\"outline\\\" [href]=\\\"activityLink.href\\\"\\r\\n                    core-link [capture]=\\\"true\\\" class=\\\"ion-text-wrap ion-margin button-no-uppercase\\\">\\r\\n                    <core-format-text [text]=\\\"activityLink.label\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"lesson?.coursemodule\\\"\\r\\n                        [courseId]=\\\"courseId\\\">\\r\\n                    </core-format-text>\\r\\n                </ion-button>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"activityLink && !activityLink.formatted\\\">\\r\\n                    <!-- Activity link wasn't formatted, render the original link. -->\\r\\n                    <ion-label>\\r\\n                        <core-format-text [text]=\\\"activityLink.label\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"lesson?.coursemodule\\\"\\r\\n                            [courseId]=\\\"courseId\\\">\\r\\n                        </core-format-text>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n            </ion-card>\\r\\n\\r\\n            <!-- Feedback returned when processing an action. -->\\r\\n            <ion-list *ngIf=\\\"processData\\\">\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"processData.ongoingscore && !processData.reviewmode\\\">\\r\\n                    <ion-label>{{ processData.ongoingscore }}</ion-label>\\r\\n                </ion-item>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"!processData.reviewmode || review\\\">\\r\\n                    <ion-label>\\r\\n                        <div *ngIf=\\\"!processData.reviewmode\\\">\\r\\n                            <core-format-text [component]=\\\"component\\\" [componentId]=\\\"lesson?.coursemodule\\\" [text]=\\\"processData.feedback\\\"\\r\\n                                contextLevel=\\\"module\\\" [contextInstanceId]=\\\"lesson?.coursemodule\\\" [courseId]=\\\"courseId\\\">\\r\\n                            </core-format-text>\\r\\n                        </div>\\r\\n                        <div *ngIf=\\\"review\\\">\\r\\n                            <p>{{ 'addon.mod_lesson.gotoendoflesson' | translate }}</p>\\r\\n                            <p>{{ 'addon.mod_lesson.or' | translate }}</p>\\r\\n                            <p>{{ 'addon.mod_lesson.continuetonextpage' | translate }}</p>\\r\\n                        </div>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n\\r\\n                <ion-button expand=\\\"block\\\" class=\\\"ion-text-wrap ion-margin\\\" *ngIf=\\\"review\\\" (click)=\\\"changePage(LESSON_EOL)\\\">\\r\\n                    {{ 'addon.mod_lesson.finish' | translate }}\\r\\n                </ion-button>\\r\\n                <ion-button expand=\\\"block\\\" class=\\\"ion-text-wrap ion-margin\\\" fill=\\\"outline\\\" *ngFor=\\\"let button of processDataButtons\\\"\\r\\n                    (click)=\\\"changePage(button.pageId, true)\\\">\\r\\n                    {{ button.label | translate }}\\r\\n                </ion-button>\\r\\n            </ion-list>\\r\\n        </div>\\r\\n    </core-loading>\\r\\n</ion-content>\\r\\n\";","export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <ion-title>\\r\\n            <h1>{{ 'addon.mod_lesson.detailedstats' | translate }}</h1>\\r\\n        </ion-title>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content class=\\\"limited-width\\\">\\r\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!loaded\\\" (ionRefresh)=\\\"doRefresh($event.target)\\\">\\r\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n    </ion-refresher>\\r\\n\\r\\n    <core-loading [hideUntil]=\\\"loaded\\\">\\r\\n        <div *ngIf=\\\"student\\\">\\r\\n            <!-- Student data. -->\\r\\n            <ion-item class=\\\"ion-text-wrap\\\" core-user-link [userId]=\\\"student.id\\\" [courseId]=\\\"courseId\\\" [attr.aria-label]=\\\"student.fullname\\\">\\r\\n                <core-user-avatar [user]=\\\"student\\\" slot=\\\"start\\\" [userId]=\\\"student.id\\\" [courseId]=\\\"courseId\\\" [linkProfile]=\\\"false\\\">\\r\\n                </core-user-avatar>\\r\\n                <ion-label>\\r\\n                    <h2>{{student.fullname}}</h2>\\r\\n                    <core-progress-bar [progress]=\\\"student.bestgrade\\\" a11yText=\\\"addon.mod_lesson.grade\\\"></core-progress-bar>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n\\r\\n            <!-- Retake selector if there is more than one retake. -->\\r\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"student.attempts && student.attempts.length > 1\\\">\\r\\n                <ion-label>{{ 'addon.mod_lesson.attemptheader' | translate }}</ion-label>\\r\\n                <ion-select [(ngModel)]=\\\"selectedRetake\\\" (ionChange)=\\\"changeRetake(selectedRetake!)\\\"\\r\\n                    [cancelText]=\\\"'core.cancel' | translate\\\" interface=\\\"action-sheet\\\"\\r\\n                    [interfaceOptions]=\\\"{header: 'addon.mod_lesson.attemptheader' | translate}\\\">\\r\\n                    <ion-select-option *ngFor=\\\"let retake of student.attempts\\\" [value]=\\\"retake.try\\\">\\r\\n                        {{retake.label}}\\r\\n                    </ion-select-option>\\r\\n                </ion-select>\\r\\n            </ion-item>\\r\\n\\r\\n            <!-- Retake stats. -->\\r\\n            <ion-list *ngIf=\\\"retake && retake.userstats && retake.userstats.gradeinfo\\\" class=\\\"addon-mod_lesson-userstats\\\">\\r\\n                <ion-item>\\r\\n                    <ion-label class=\\\"ion-text-wrap\\\">\\r\\n                        <ion-grid class=\\\"ion-no-padding\\\">\\r\\n                            <ion-row>\\r\\n                                <ion-col>\\r\\n                                    <p class=\\\"item-heading\\\">{{ 'addon.mod_lesson.grade' | translate }}</p>\\r\\n                                    <p>{{ 'core.percentagenumber' | translate:{$a: retake.userstats.grade} }}</p>\\r\\n                                </ion-col>\\r\\n\\r\\n                                <ion-col>\\r\\n                                    <p class=\\\"item-heading\\\">{{ 'addon.mod_lesson.rawgrade' | translate }}</p>\\r\\n                                    <p>{{ retake.userstats.gradeinfo.earned }} / {{ retake.userstats.gradeinfo.total }}</p>\\r\\n                                </ion-col>\\r\\n                            </ion-row>\\r\\n                        </ion-grid>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                    <ion-label>\\r\\n                        <p class=\\\"item-heading\\\">{{ 'addon.mod_lesson.timetaken' | translate }}</p>\\r\\n                        <p>{{ timeTakenReadable }}</p>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                    <ion-label>\\r\\n                        <p class=\\\"item-heading\\\">{{ 'addon.mod_lesson.completed' | translate }}</p>\\r\\n                        <p>{{ retake.userstats.completed * 1000 | coreFormatDate }}</p>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n            </ion-list>\\r\\n\\r\\n            <!-- Not completed, no stats. -->\\r\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"retake && (!retake.userstats || !retake.userstats.gradeinfo)\\\">\\r\\n                <ion-label>{{ 'addon.mod_lesson.notcompleted' | translate }}</ion-label>\\r\\n            </ion-item>\\r\\n\\r\\n            <!-- Pages. -->\\r\\n            <ng-container *ngIf=\\\"retake\\\">\\r\\n                <!-- The \\\"text-dimmed\\\" class does nothing, but the same goes for the \\\"dimmed\\\" class in Moodle. -->\\r\\n                <ion-card *ngFor=\\\"let page of retake.answerpages\\\" class=\\\"addon-mod_lesson-answerpage\\\"\\r\\n                    [ngClass]=\\\"{'text-dimmed': page.grayout}\\\">\\r\\n                    <ion-card-header class=\\\"ion-text-wrap\\\">\\r\\n                        <ion-card-title>{{page.qtype}}: {{page.title}}</ion-card-title>\\r\\n                    </ion-card-header>\\r\\n                    <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                        <ion-label>\\r\\n                            <p class=\\\"item-heading\\\">{{ 'addon.mod_lesson.question' | translate }}</p>\\r\\n                            <p>\\r\\n                                <core-format-text [component]=\\\"component\\\" [componentId]=\\\"lesson?.coursemodule\\\" collapsible-item\\r\\n                                    [text]=\\\"page.contents\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"lesson?.coursemodule\\\"\\r\\n                                    [courseId]=\\\"courseId\\\">\\r\\n                                </core-format-text>\\r\\n                            </p>\\r\\n                        </ion-label>\\r\\n                    </ion-item>\\r\\n                    <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                        <ion-label>\\r\\n                            <p class=\\\"item-heading\\\">{{ 'addon.mod_lesson.answer' | translate }}</p>\\r\\n                        </ion-label>\\r\\n                    </ion-item>\\r\\n                    <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"!page.answerdata || !page.answerdata.answers || !page.answerdata.answers.length\\\">\\r\\n                        <ion-label>\\r\\n                            <p>{{ 'addon.mod_lesson.didnotanswerquestion' | translate }}</p>\\r\\n                        </ion-label>\\r\\n                    </ion-item>\\r\\n                    <div *ngIf=\\\"page.answerdata && page.answerdata.answers && page.answerdata.answers.length\\\"\\r\\n                        class=\\\"addon-mod_lesson-answer\\\">\\r\\n                        <ng-container *ngFor=\\\"let answer of page.answerdata.answers\\\">\\r\\n                            <ion-item *ngIf=\\\"page.isContent\\\">\\r\\n                                <ion-label class=\\\"ion-text-wrap\\\">\\r\\n                                    <ion-grid class=\\\"ion-no-padding\\\">\\r\\n                                        <!-- Content page, display a button and the content. -->\\r\\n                                        <ion-row>\\r\\n                                            <ion-col>\\r\\n                                                <ion-button expand=\\\"block\\\" class=\\\"ion-text-wrap\\\" fill=\\\"outline\\\" [disabled]=\\\"true\\\">\\r\\n                                                    {{ answer[0].buttonText }}\\r\\n                                                </ion-button>\\r\\n                                            </ion-col>\\r\\n                                            <ion-col>\\r\\n                                                <p [innerHTML]=\\\"answer[0].content\\\"></p>\\r\\n                                            </ion-col>\\r\\n                                        </ion-row>\\r\\n                                    </ion-grid>\\r\\n                                </ion-label>\\r\\n                            </ion-item>\\r\\n\\r\\n                            <ng-container *ngIf=\\\"page.isQuestion\\\">\\r\\n                                <!-- Question page, show the right input for the answer. -->\\r\\n\\r\\n                                <!-- Truefalse or matching. -->\\r\\n                                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"answer[0].isCheckbox\\\"\\r\\n                                    [ngClass]=\\\"{'addon-mod_lesson-highlight': answer[0].highlight}\\\">\\r\\n                                    <ion-label>\\r\\n                                        <p>\\r\\n                                            <core-format-text [component]=\\\"component\\\" [componentId]=\\\"lesson?.coursemodule\\\"\\r\\n                                                [text]=\\\"answer[0].content\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"lesson?.coursemodule\\\"\\r\\n                                                [courseId]=\\\"courseId\\\">\\r\\n                                            </core-format-text>\\r\\n                                        </p>\\r\\n                                        <ion-badge *ngIf=\\\"answer[1]\\\" color=\\\"dark\\\">\\r\\n                                            <core-format-text [component]=\\\"component\\\" [componentId]=\\\"lesson?.coursemodule\\\"\\r\\n                                                [text]=\\\"answer[1]\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"lesson?.coursemodule\\\"\\r\\n                                                [courseId]=\\\"courseId\\\">\\r\\n                                            </core-format-text>\\r\\n                                        </ion-badge>\\r\\n                                    </ion-label>\\r\\n                                    <ion-checkbox [attr.name]=\\\"answer[0].name\\\" [ngModel]=\\\"answer[0].checked\\\" [disabled]=\\\"true\\\" slot=\\\"end\\\">\\r\\n                                    </ion-checkbox>\\r\\n                                </ion-item>\\r\\n\\r\\n                                <!-- Short answer or numeric. -->\\r\\n                                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"answer[0].isText\\\">\\r\\n                                    <ion-label>\\r\\n                                        <p>{{ answer[0].value }}</p>\\r\\n                                        <ion-badge *ngIf=\\\"answer[1]\\\" color=\\\"dark\\\">\\r\\n                                            <core-format-text [component]=\\\"component\\\" [componentId]=\\\"lesson?.coursemodule\\\"\\r\\n                                                [text]=\\\"answer[1]\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"lesson?.coursemodule\\\"\\r\\n                                                [courseId]=\\\"courseId\\\">\\r\\n                                            </core-format-text>\\r\\n                                        </ion-badge>\\r\\n                                    </ion-label>\\r\\n                                </ion-item>\\r\\n\\r\\n                                <!-- Matching. -->\\r\\n                                <ion-item *ngIf=\\\"answer[0].isSelect\\\">\\r\\n                                    <ion-label class=\\\"ion-text-wrap\\\">\\r\\n                                        <ion-grid class=\\\"ion-no-padding\\\">\\r\\n                                            <ion-row>\\r\\n                                                <ion-col>\\r\\n                                                    <p>\\r\\n                                                        <core-format-text [component]=\\\"component\\\" [componentId]=\\\"lesson?.coursemodule\\\"\\r\\n                                                            [text]=\\\" answer[0].content\\\" contextLevel=\\\"module\\\"\\r\\n                                                            [contextInstanceId]=\\\"lesson?.coursemodule\\\" [courseId]=\\\"courseId\\\">\\r\\n                                                        </core-format-text>\\r\\n                                                    </p>\\r\\n                                                </ion-col>\\r\\n                                                <ion-col>\\r\\n                                                    <p>{{answer[0].value}}</p>\\r\\n                                                    <ion-badge *ngIf=\\\"answer[1]\\\" color=\\\"dark\\\">\\r\\n                                                        <core-format-text [component]=\\\"component\\\" [componentId]=\\\"lesson?.coursemodule\\\"\\r\\n                                                            [text]=\\\"answer[1]\\\" contextLevel=\\\"module\\\"\\r\\n                                                            [contextInstanceId]=\\\"lesson?.coursemodule\\\" [courseId]=\\\"courseId\\\">\\r\\n                                                        </core-format-text>\\r\\n                                                    </ion-badge>\\r\\n                                                </ion-col>\\r\\n                                            </ion-row>\\r\\n                                        </ion-grid>\\r\\n                                    </ion-label>\\r\\n                                </ion-item>\\r\\n\\r\\n                                <!-- Essay or couldn't determine. -->\\r\\n                                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"!answer[0].isCheckbox && !answer[0].isText && !answer[0].isSelect\\\">\\r\\n                                    <ion-label>\\r\\n                                        <p>\\r\\n                                            <core-format-text [component]=\\\"component\\\" [componentId]=\\\"lesson?.coursemodule\\\"\\r\\n                                                [text]=\\\"answer[0]\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"lesson?.coursemodule\\\"\\r\\n                                                [courseId]=\\\"courseId\\\">\\r\\n                                            </core-format-text>\\r\\n                                        </p>\\r\\n                                        <ion-badge *ngIf=\\\"answer[1]\\\" color=\\\"dark\\\">\\r\\n                                            <core-format-text [component]=\\\"component\\\" [componentId]=\\\"lesson?.coursemodule\\\"\\r\\n                                                [text]=\\\"answer[1]\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"lesson?.coursemodule\\\"\\r\\n                                                [courseId]=\\\"courseId\\\">\\r\\n                                            </core-format-text>\\r\\n                                        </ion-badge>\\r\\n                                    </ion-label>\\r\\n                                </ion-item>\\r\\n                            </ng-container>\\r\\n\\r\\n                            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"!page.isContent && !page.isQuestion\\\">\\r\\n                                <!-- Another page (end of branch, ...). -->\\r\\n                                <ion-label>\\r\\n                                    <p>\\r\\n                                        <core-format-text [component]=\\\"component\\\" [componentId]=\\\"lesson?.coursemodule\\\" [text]=\\\"answer[0]\\\"\\r\\n                                            contextLevel=\\\"module\\\" [contextInstanceId]=\\\"lesson?.coursemodule\\\" [courseId]=\\\"courseId\\\">\\r\\n                                        </core-format-text>\\r\\n                                    </p>\\r\\n                                    <ion-badge *ngIf=\\\"answer[1]\\\" color=\\\"dark\\\">\\r\\n                                        <core-format-text [component]=\\\"component\\\" [componentId]=\\\"lesson?.coursemodule\\\" [text]=\\\"answer[1]\\\"\\r\\n                                            contextLevel=\\\"module\\\" [contextInstanceId]=\\\"lesson?.coursemodule\\\" [courseId]=\\\"courseId\\\">\\r\\n                                        </core-format-text>\\r\\n                                    </ion-badge>\\r\\n                                </ion-label>\\r\\n                            </ion-item>\\r\\n                        </ng-container>\\r\\n\\r\\n                        <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"page.answerdata.response\\\">\\r\\n                            <ion-label>\\r\\n                                <p class=\\\"item-heading\\\">{{ 'addon.mod_lesson.response' | translate }}</p>\\r\\n                                <p>\\r\\n                                    <core-format-text [component]=\\\"component\\\" [componentId]=\\\"lesson?.coursemodule\\\"\\r\\n                                        [text]=\\\"page.answerdata.response\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"lesson?.coursemodule\\\"\\r\\n                                        [courseId]=\\\"courseId\\\">\\r\\n                                    </core-format-text>\\r\\n                                </p>\\r\\n                            </ion-label>\\r\\n                        </ion-item>\\r\\n                        <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"page.answerdata.score\\\">\\r\\n                            <ion-label>\\r\\n                                <p>{{page.answerdata.score}}</p>\\r\\n                            </ion-label>\\r\\n                        </ion-item>\\r\\n                    </div>\\r\\n                </ion-card>\\r\\n            </ng-container>\\r\\n        </div>\\r\\n    </core-loading>\\r\\n</ion-content>\\r\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { CoreSharedModule } from '@/core/shared.module';\nimport { AddonModLessonComponentsModule } from './components/components.module';\n\nimport { AddonModLessonIndexPage } from './pages/index';\nimport { CoreEditorComponentsModule } from '@features/editor/components/components.module';\nimport { AddonModLessonPlayerPage } from '@addons/mod/lesson/pages/player/player';\nimport { CanLeaveGuard } from '@guards/can-leave';\nimport { AddonModLessonUserRetakePage } from '@addons/mod/lesson/pages/user-retake/user-retake';\n\nconst routes: Routes = [\n    {\n        path: ':courseId/:cmId',\n        component: AddonModLessonIndexPage,\n    },\n    {\n        path: ':courseId/:cmId/player',\n        component: AddonModLessonPlayerPage,\n        canDeactivate: [CanLeaveGuard],\n    },\n    {\n        path: ':courseId/:cmId/user-retake/:userId',\n        component: AddonModLessonUserRetakePage,\n    },\n];\n\n@NgModule({\n    imports: [\n        RouterModule.forChild(routes),\n        CoreSharedModule,\n        CoreEditorComponentsModule,\n        AddonModLessonComponentsModule,\n    ],\n    declarations: [\n        AddonModLessonIndexPage,\n        AddonModLessonPlayerPage,\n        AddonModLessonUserRetakePage,\n    ],\n})\nexport class AddonModLessonLazyModule {}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { CoreCourseModuleMainActivityPage } from '@features/course/classes/main-activity-page';\nimport { CoreNavigator } from '@services/navigator';\nimport { AddonModLessonIndexComponent } from '../../components/index/index';\n\n/**\n * Page that displays the lesson entry page.\n */\n@Component({\n    selector: 'page-addon-mod-lesson-index',\n    templateUrl: 'index.html',\n})\nexport class AddonModLessonIndexPage extends CoreCourseModuleMainActivityPage<AddonModLessonIndexComponent> implements OnInit {\n\n    @ViewChild(AddonModLessonIndexComponent) activityComponent?: AddonModLessonIndexComponent;\n\n    group?: number; // The group to display.\n    action?: string; // The \"action\" to display first.\n\n    /**\n     * @inheritdoc\n     */\n    ngOnInit(): void {\n        super.ngOnInit();\n        this.group = CoreNavigator.getRouteNumberParam('group');\n        this.action = CoreNavigator.getRouteParam('action');\n    }\n\n}\n","export default \":host {\\n  --background-odd: var(--light);\\n}\\n\\n:host-context(html.dark) {\\n  --background-odd: var(--medium);\\n}\\n\\n:host ::ng-deep .addon-mod_lesson-slideshow {\\n  max-width: 100%;\\n  max-height: 100%;\\n  margin: 0 auto;\\n}\\n\\n:host ::ng-deep .studentanswer {\\n  -webkit-padding-start: 8px;\\n          padding-inline-start: 8px;\\n}\\n\\n:host ::ng-deep table {\\n  width: 100%;\\n  margin-top: 1.5rem;\\n}\\n\\n:host ::ng-deep table tr:nth-child(odd) {\\n  background-color: var(--background-odd);\\n}\\n\\n:host ::ng-deep table tr:last-child td {\\n  border-bottom: 0;\\n}\\n\\n:host ::ng-deep table td {\\n  padding: 5px;\\n  line-height: 1.5;\\n  border-bottom: 1px solid var(--stroke);\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hZGRvbnMvbW9kL2xlc3Nvbi9wYWdlcy9wbGF5ZXIvcGxheWVyLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRyw4QkFBQTtBQUNIOztBQUVBO0VBQ0csK0JBQUE7QUFDSDs7QUFHSTtFQUNJLGVBQUE7RUFDQSxnQkFBQTtFQUNBLGNBQUE7QUFBUjs7QUFHSTtFQUNJLDBCQUFBO1VBQUEseUJBQUE7QUFEUjs7QUFJSTtFQUNJLFdBQUE7RUFDQSxrQkFBQTtBQUZSOztBQUlRO0VBQ0ksdUNBQUE7QUFGWjs7QUFLUTtFQUNJLGdCQUFBO0FBSFo7O0FBTVE7RUFDSSxZQUFBO0VBQ0EsZ0JBQUE7RUFDQSxzQ0FBQTtBQUpaIiwiZmlsZSI6InNyYy9hZGRvbnMvbW9kL2xlc3Nvbi9wYWdlcy9wbGF5ZXIvcGxheWVyLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyI6aG9zdCB7XHJcbiAgIC0tYmFja2dyb3VuZC1vZGQ6IHZhcigtLWxpZ2h0KTtcclxufVxyXG5cclxuOmhvc3QtY29udGV4dChodG1sLmRhcmspIHtcclxuICAgLS1iYWNrZ3JvdW5kLW9kZDogdmFyKC0tbWVkaXVtKTtcclxufVxyXG5cclxuOmhvc3QgOjpuZy1kZWVwIHtcclxuICAgIC5hZGRvbi1tb2RfbGVzc29uLXNsaWRlc2hvdyB7XHJcbiAgICAgICAgbWF4LXdpZHRoOiAxMDAlO1xyXG4gICAgICAgIG1heC1oZWlnaHQ6IDEwMCU7XHJcbiAgICAgICAgbWFyZ2luOiAwIGF1dG87XHJcbiAgICB9XHJcblxyXG4gICAgLnN0dWRlbnRhbnN3ZXIge1xyXG4gICAgICAgIHBhZGRpbmctaW5saW5lLXN0YXJ0OiA4cHg7XHJcbiAgICB9XHJcblxyXG4gICAgdGFibGUge1xyXG4gICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgIG1hcmdpbi10b3A6IDEuNXJlbTtcclxuXHJcbiAgICAgICAgdHI6bnRoLWNoaWxkKG9kZCkge1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1iYWNrZ3JvdW5kLW9kZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0cjpsYXN0LWNoaWxkIHRkIHtcclxuICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRkIHtcclxuICAgICAgICAgICAgcGFkZGluZzogNXB4O1xyXG4gICAgICAgICAgICBsaW5lLWhlaWdodDogMS41O1xyXG4gICAgICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgdmFyKC0tc3Ryb2tlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19 */\";","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnInit, OnDestroy, ViewChild, ChangeDetectorRef, ElementRef } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { IonContent } from '@ionic/angular';\n\nimport { CoreError } from '@classes/errors/error';\nimport { CanLeave } from '@guards/can-leave';\nimport { CoreNetwork } from '@services/network';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreSites, CoreSitesCommonWSOptions, CoreSitesReadingStrategy } from '@services/sites';\nimport { CoreSync } from '@services/sync';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreUrlUtils } from '@services/utils/url';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreWSExternalFile } from '@services/ws';\nimport { ModalController, Translate } from '@singletons';\nimport { CoreEvents } from '@singletons/events';\nimport { AddonModLessonMenuModalPage } from '../../components/menu-modal/menu-modal';\nimport {\n    AddonModLesson,\n    AddonModLessonEOLPageDataEntry,\n    AddonModLessonFinishRetakeResponse,\n    AddonModLessonGetAccessInformationWSResponse,\n    AddonModLessonGetPageDataWSResponse,\n    AddonModLessonGetPagesPageWSData,\n    AddonModLessonLaunchAttemptWSResponse,\n    AddonModLessonLessonWSData,\n    AddonModLessonMessageWSData,\n    AddonModLessonPageWSData,\n    AddonModLessonPossibleJumps,\n    AddonModLessonProcessPageOptions,\n    AddonModLessonProcessPageResponse,\n    AddonModLessonProvider,\n} from '../../services/lesson';\nimport {\n    AddonModLessonActivityLink,\n    AddonModLessonHelper,\n    AddonModLessonPageButton,\n    AddonModLessonQuestion,\n} from '../../services/lesson-helper';\nimport { AddonModLessonOffline } from '../../services/lesson-offline';\nimport { AddonModLessonSync } from '../../services/lesson-sync';\nimport { CoreFormFields, CoreForms } from '@singletons/form';\nimport { CoreAnalytics, CoreAnalyticsEventType } from '@services/analytics';\n\n/**\n * Page that allows attempting and reviewing a lesson.\n */\n@Component({\n    selector: 'page-addon-mod-lesson-player',\n    templateUrl: 'player.html',\n    styleUrls: ['player.scss'],\n})\nexport class AddonModLessonPlayerPage implements OnInit, OnDestroy, CanLeave {\n\n    @ViewChild(IonContent) content?: IonContent;\n    @ViewChild('questionFormEl') formElement?: ElementRef;\n\n    component = AddonModLessonProvider.COMPONENT;\n    readonly LESSON_EOL = AddonModLessonProvider.LESSON_EOL;\n    questionForm?: FormGroup; // The FormGroup for question pages.\n    title?: string; // The page title.\n    lesson?: AddonModLessonLessonWSData; // The lesson object.\n    currentPage?: number; // Current page being viewed.\n    review?: boolean; // Whether the user is reviewing.\n    messages: AddonModLessonMessageWSData[] = []; // Messages to display to the user.\n    canManage?: boolean; // Whether the user can manage the lesson.\n    retake?: number; // Current retake number.\n    showRetake?: boolean; // Whether the retake number needs to be displayed.\n    lessonWidth?: string; // Width of the lesson (if slideshow mode).\n    lessonHeight?: string; // Height of the lesson (if slideshow mode).\n    endTime?: number; // End time of the lesson if it's timed.\n    pageData?: AddonModLessonGetPageDataWSResponse; // Current page data.\n    pageContent?: string; // Current page contents.\n    pageButtons?: AddonModLessonPageButton[]; // List of buttons of the current page.\n    question?: AddonModLessonQuestion; // Question of the current page (if it's a question page).\n    eolData?: Record<string, AddonModLessonEOLPageDataEntry>; // Data for EOL page (if current page is EOL).\n    processData?: AddonModLessonProcessPageResponse; // Data to display after processing a page.\n    processDataButtons: ProcessDataButton[] = []; // Buttons to display after processing a page.\n    loaded?: boolean; // Whether data has been loaded.\n    displayMenu?: boolean; // Whether the lesson menu should be displayed.\n    originalData?: CoreFormFields; // Original question data. It is used to check if data has changed.\n    reviewPageId?: number; // Page to open if the user wants to review the attempt.\n    courseId!: number; // The course ID the lesson belongs to.\n    lessonPages?: AddonModLessonPageWSData[]; // Lesson pages (for the lesson menu).\n    loadingMenu?: boolean; // Whether the lesson menu is being loaded.\n    mediaFile?: CoreWSExternalFile; // Media file of the lesson.\n    activityLink?: AddonModLessonActivityLink; // Next activity link data.\n    cmId!: number; // Course module ID.\n\n    protected password?: string; // Lesson password (if any).\n    protected forceLeave = false; // If true, don't perform any check when leaving the view.\n    protected offline?: boolean; // Whether we are in offline mode.\n    protected accessInfo?: AddonModLessonGetAccessInformationWSResponse; // Lesson access info.\n    protected jumps?: AddonModLessonPossibleJumps; // All possible jumps.\n    protected firstPageLoaded?: boolean; // Whether the first page has been loaded.\n    protected retakeToReview?: number; // Retake to review.\n    protected menuShown = false; // Whether menu is shown.\n\n    constructor(\n        protected changeDetector: ChangeDetectorRef,\n        protected formBuilder: FormBuilder,\n    ) {\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async ngOnInit(): Promise<void> {\n        try {\n            this.cmId = CoreNavigator.getRequiredRouteNumberParam('cmId');\n            this.courseId = CoreNavigator.getRequiredRouteNumberParam('courseId');\n            this.password = CoreNavigator.getRouteParam('password');\n            this.review = !!CoreNavigator.getRouteBooleanParam('review');\n            this.currentPage = CoreNavigator.getRouteNumberParam('pageId');\n            this.retakeToReview = CoreNavigator.getRouteNumberParam('retake');\n        } catch (error) {\n            CoreDomUtils.showErrorModal(error);\n\n            CoreNavigator.back();\n\n            return;\n        }\n\n        try {\n            // Fetch the Lesson data.\n            const success = await this.fetchLessonData();\n            if (success) {\n                // Review data loaded or new retake started, remove any retake being finished in sync.\n                AddonModLessonSync.deleteRetakeFinishedInSync(this.lesson!.id);\n            }\n        } finally {\n            this.loaded = true;\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnDestroy(): void {\n        if (this.lesson) {\n            // Unblock the lesson so it can be synced.\n            CoreSync.unblockOperation(this.component, this.lesson.id);\n        }\n    }\n\n    /**\n     * Check if we can leave the page or not.\n     *\n     * @returns Resolved if we can leave it, rejected if not.\n     */\n    async canLeave(): Promise<boolean> {\n        if (this.forceLeave || !this.questionForm) {\n            return true;\n        }\n\n        if (this.question && !this.eolData && !this.processData && this.originalData) {\n            // Question shown. Check if there is any change.\n            if (!CoreUtils.basicLeftCompare(this.questionForm.getRawValue(), this.originalData, 3)) {\n                await CoreDomUtils.showConfirm(Translate.instant('core.confirmcanceledit'));\n            }\n        }\n\n        CoreForms.triggerFormCancelledEvent(this.formElement, CoreSites.getCurrentSiteId());\n\n        return true;\n    }\n\n    /**\n     * Runs when the page is about to leave and no longer be the active page.\n     */\n    ionViewWillLeave(): void {\n        if (this.menuShown) {\n            ModalController.dismiss();\n        }\n    }\n\n    /**\n     * A button was clicked.\n     *\n     * @param data Button data.\n     */\n    buttonClicked(data: Record<string, string>): void {\n        this.processPage(data);\n    }\n\n    /**\n     * Call a function and go offline if allowed and the call fails.\n     *\n     * @param func Function to call.\n     * @param options Options passed to the function.\n     * @returns Promise resolved in success, rejected otherwise.\n     */\n    protected async callFunction<T>(func: () => Promise<T>, options: CommonOptions): Promise<T> {\n        try {\n            return await func();\n        } catch (error) {\n            if (this.offline || this.review || !AddonModLesson.isLessonOffline(this.lesson!)) {\n                // Already offline or not allowed.\n                throw error;\n            }\n\n            if (CoreUtils.isWebServiceError(error)) {\n                // WebService returned an error, cannot perform the action.\n                throw error;\n            }\n\n            // Go offline and retry.\n            this.offline = true;\n\n            // Get the possible jumps now.\n            this.jumps = await AddonModLesson.getPagesPossibleJumps(this.lesson!.id, {\n                cmId: this.cmId,\n                readingStrategy: CoreSitesReadingStrategy.PREFER_CACHE,\n            });\n\n            // Call the function again with offline mode and the new jumps.\n            options.readingStrategy = CoreSitesReadingStrategy.PREFER_CACHE;\n            options.jumps = this.jumps;\n            options.offline = true;\n\n            return func();\n        }\n    }\n\n    /**\n     * Change the page from menu or when continuing from a feedback page.\n     *\n     * @param pageId Page to load.\n     * @param ignoreCurrent If true, allow loading current page.\n     * @returns Promise resolved when done.\n     */\n    async changePage(pageId: number, ignoreCurrent?: boolean): Promise<void> {\n        if (!ignoreCurrent && !this.eolData && this.currentPage == pageId) {\n            // Page already loaded, stop.\n            return;\n        }\n\n        this.loaded = true;\n        this.messages = [];\n\n        try {\n            await this.loadPage(pageId);\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'Error loading page');\n        } finally {\n            this.loaded = true;\n        }\n    }\n\n    /**\n     * Get the lesson data and load the page.\n     *\n     * @returns Promise resolved with true if success, resolved with false otherwise.\n     */\n    protected async fetchLessonData(): Promise<boolean> {\n        try {\n            this.lesson = await AddonModLesson.getLesson(this.courseId, this.cmId);\n\n            this.title = this.lesson.name; // Temporary title.\n\n            // Block the lesson so it cannot be synced.\n            CoreSync.blockOperation(this.component, this.lesson.id);\n\n            // Wait for any ongoing sync to finish. We won't sync a lesson while it's being played.\n            await AddonModLessonSync.waitForSync(this.lesson.id);\n\n            // If lesson has offline data already, use offline mode.\n            this.offline = await AddonModLessonOffline.hasOfflineData(this.lesson.id);\n\n            if (!this.offline && !CoreNetwork.isOnline() && AddonModLesson.isLessonOffline(this.lesson) && !this.review) {\n                // Lesson doesn't have offline data, but it allows offline and the device is offline. Use offline mode.\n                this.offline = true;\n            }\n\n            const lessonId = this.lesson.id;\n            const options = {\n                cmId: this.cmId,\n                readingStrategy: this.offline ? CoreSitesReadingStrategy.PREFER_CACHE : CoreSitesReadingStrategy.ONLY_NETWORK,\n            };\n            this.accessInfo = await this.callFunction<AddonModLessonGetAccessInformationWSResponse>(\n                () => AddonModLesson.getAccessInformation(lessonId, options),\n                options,\n            );\n\n            const promises: Promise<void>[] = [];\n            this.canManage = this.accessInfo.canmanage;\n            this.retake = this.accessInfo.attemptscount;\n            this.showRetake = !this.currentPage && this.retake > 0; // Only show it in first page if it isn't the first retake.\n\n            if (this.accessInfo.preventaccessreasons.length) {\n                // If it's a password protected lesson and we have the password, allow playing it.\n                const preventReason = AddonModLesson.getPreventAccessReason(this.accessInfo, !!this.password, this.review);\n                if (preventReason) {\n                    // Lesson cannot be played, show message and go back.\n                    throw new CoreError(preventReason.message);\n                }\n            }\n\n            if (this.review && this.retakeToReview != this.accessInfo.attemptscount - 1) {\n                // Reviewing a retake that isn't the last one. Error.\n                throw new CoreError(Translate.instant('addon.mod_lesson.errorreviewretakenotlast'));\n            }\n\n            if (this.password) {\n                // Lesson uses password, get the whole lesson object.\n                const options = {\n                    password: this.password,\n                    cmId: this.cmId,\n                    readingStrategy: this.offline ? CoreSitesReadingStrategy.PREFER_CACHE : CoreSitesReadingStrategy.ONLY_NETWORK,\n                };\n                promises.push(this.callFunction<AddonModLessonLessonWSData>(\n                    () => AddonModLesson.getLessonWithPassword(lessonId, options),\n                    options,\n                ).then((lesson) => {\n                    this.lesson = lesson;\n\n                    return;\n                }));\n            }\n\n            if (this.offline) {\n                // Offline mode, get the list of possible jumps to allow navigation.\n                promises.push(AddonModLesson.getPagesPossibleJumps(this.lesson.id, {\n                    cmId: this.cmId,\n                    readingStrategy: CoreSitesReadingStrategy.PREFER_CACHE,\n                }).then((jumpList) => {\n                    this.jumps = jumpList;\n\n                    return;\n                }));\n            }\n\n            await Promise.all(promises);\n\n            this.mediaFile = this.lesson.mediafiles?.[0];\n            this.lessonWidth = this.lesson.slideshow ? CoreDomUtils.formatPixelsSize(this.lesson.mediawidth!) : '';\n            this.lessonHeight = this.lesson.slideshow ? CoreDomUtils.formatPixelsSize(this.lesson.mediaheight!) : '';\n\n            await this.launchRetake(this.currentPage);\n\n            return true;\n        } catch (error) {\n\n            if (this.review && this.retakeToReview && CoreUtils.isWebServiceError(error)) {\n                // The user cannot review the retake. Unmark the retake as being finished in sync.\n                await AddonModLessonSync.deleteRetakeFinishedInSync(this.lesson!.id);\n            }\n\n            CoreDomUtils.showErrorModalDefault(error, 'core.course.errorgetmodule', true);\n            this.forceLeave = true;\n            CoreNavigator.back();\n\n            return false;\n        }\n    }\n\n    /**\n     * Finish the retake.\n     *\n     * @param outOfTime Whether the retake is finished because the user ran out of time.\n     * @returns Promise resolved when done.\n     */\n    protected async finishRetake(outOfTime?: boolean): Promise<void> {\n        if (!this.lesson) {\n            return;\n        }\n\n        const lesson = this.lesson;\n        this.messages = [];\n\n        if (this.offline && CoreNetwork.isOnline()) {\n            // Offline mode but the app is online. Try to sync the data.\n            const result = await CoreUtils.ignoreErrors(\n                AddonModLessonSync.syncLesson(lesson.id, true, true),\n            );\n\n            if (result?.warnings?.length) {\n                // Some data was deleted. Check if the retake has changed.\n                const info = await AddonModLesson.getAccessInformation(lesson.id, {\n                    cmId: this.cmId,\n                });\n\n                if (info.attemptscount != this.accessInfo!.attemptscount) {\n                    // The retake has changed. Leave the view and show the error.\n                    this.forceLeave = true;\n                    CoreNavigator.back();\n\n                    throw new CoreError(result.warnings[0]);\n                }\n\n                // Retake hasn't changed, show the warning and finish the retake in offline.\n                CoreDomUtils.showAlert(undefined, result.warnings[0]);\n            }\n\n            this.offline = false;\n        }\n\n        // Now finish the retake.\n        const options = {\n            password: this.password,\n            outOfTime,\n            review: this.review,\n            offline: this.offline,\n            accessInfo: this.accessInfo,\n        };\n        const data = await this.callFunction<AddonModLessonFinishRetakeResponse>(\n            () => AddonModLesson.finishRetake(lesson, this.courseId, options),\n            options,\n        );\n\n        this.title = lesson.name;\n        this.eolData = data.data;\n        this.messages = this.messages.concat(data.messages);\n        this.processData = undefined;\n\n        CoreEvents.trigger(CoreEvents.ACTIVITY_DATA_SENT, { module: 'lesson' });\n\n        // Format activity link if present.\n        if (this.eolData.activitylink) {\n            this.activityLink = AddonModLessonHelper.formatActivityLink(<string> this.eolData.activitylink.value);\n        } else {\n            this.activityLink = undefined;\n        }\n\n        // Format review lesson if present.\n        if (this.eolData.reviewlesson) {\n            const params = CoreUrlUtils.extractUrlParams(<string> this.eolData.reviewlesson.value);\n\n            if (!params || !params.pageid) {\n                // No pageid in the URL, the user cannot review (probably didn't answer any question).\n                delete this.eolData.reviewlesson;\n            } else {\n                this.reviewPageId = Number(params.pageid);\n            }\n        }\n\n        this.logPageLoaded(AddonModLessonProvider.LESSON_EOL, Translate.instant('addon.mod_lesson.congratulations'));\n    }\n\n    /**\n     * Jump to a certain page after performing an action.\n     *\n     * @param pageId The page to load.\n     * @returns Promise resolved when done.\n     */\n    protected async jumpToPage(pageId: number): Promise<void> {\n        if (pageId === 0) {\n            // Not a valid page, return to entry view.\n            // This happens, for example, when the user clicks to go to previous page and there is no previous page.\n            this.forceLeave = true;\n            CoreNavigator.back();\n\n            return;\n        } else if (pageId == AddonModLessonProvider.LESSON_EOL) {\n            // End of lesson reached.\n            return this.finishRetake();\n        }\n\n        // Load new page.\n        this.messages = [];\n\n        return this.loadPage(pageId);\n    }\n\n    /**\n     * Start or continue a retake.\n     *\n     * @param pageId The page to load.\n     * @returns Promise resolved when done.\n     */\n    protected async launchRetake(pageId?: number): Promise<void> {\n        let data: AddonModLessonLaunchAttemptWSResponse | undefined;\n\n        if (this.review) {\n            // Review mode, no need to launch the retake.\n        } else if (!this.offline) {\n            // Not in offline mode, launch the retake.\n            data = await AddonModLesson.launchRetake(this.lesson!.id, this.password, pageId);\n        } else {\n            // Check if there is a finished offline retake.\n            const finished = await AddonModLessonOffline.hasFinishedRetake(this.lesson!.id);\n            if (finished) {\n                // Always show EOL page.\n                pageId = AddonModLessonProvider.LESSON_EOL;\n            }\n        }\n\n        this.currentPage = pageId || this.accessInfo!.firstpageid;\n        this.messages = data?.messages || [];\n\n        if (this.lesson!.timelimit && !this.accessInfo!.canmanage) {\n            // Get the last lesson timer.\n            const timers = await AddonModLesson.getTimers(this.lesson!.id, {\n                cmId: this.cmId,\n                readingStrategy: CoreSitesReadingStrategy.ONLY_NETWORK,\n            });\n\n            this.endTime = timers[timers.length - 1].starttime + this.lesson!.timelimit;\n        }\n\n        return this.loadPage(this.currentPage);\n    }\n\n    /**\n     * Load the lesson menu.\n     *\n     * @returns Promise resolved when done.\n     */\n    protected async loadMenu(): Promise<void> {\n        if (this.loadingMenu || !this.lesson) {\n            // Already loading.\n            return;\n        }\n\n        try {\n            this.loadingMenu = true;\n            const lessonId = this.lesson.id;\n            const options = {\n                password: this.password,\n                cmId: this.cmId,\n                readingStrategy: this.offline ? CoreSitesReadingStrategy.PREFER_CACHE : CoreSitesReadingStrategy.ONLY_NETWORK,\n            };\n\n            const pages = await this.callFunction<AddonModLessonGetPagesPageWSData[]>(\n                () => AddonModLesson.getPages(lessonId, options),\n                options,\n            );\n\n            this.lessonPages = pages.map((entry) => entry.page);\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'Error loading menu.');\n        } finally {\n            this.loadingMenu = false;\n        }\n    }\n\n    /**\n     * Load a certain page.\n     *\n     * @param pageId The page to load.\n     * @returns Promise resolved when done.\n     */\n    protected async loadPage(pageId: number): Promise<void> {\n        if (pageId == AddonModLessonProvider.LESSON_EOL) {\n            // End of lesson reached.\n            return this.finishRetake();\n        } else if (!this.lesson) {\n            return;\n        }\n\n        const lesson = this.lesson;\n        const options = {\n            password: this.password,\n            review: this.review,\n            includeContents: true,\n            cmId: this.cmId,\n            readingStrategy: this.offline ? CoreSitesReadingStrategy.PREFER_CACHE : CoreSitesReadingStrategy.ONLY_NETWORK,\n            accessInfo: this.accessInfo,\n            jumps: this.jumps,\n            includeOfflineData: true,\n        };\n\n        const data = await this.callFunction<AddonModLessonGetPageDataWSResponse>(\n            () => AddonModLesson.getPageData(lesson, pageId, options),\n            options,\n        );\n\n        if (data.newpageid == AddonModLessonProvider.LESSON_EOL) {\n            // End of lesson reached.\n            return this.finishRetake();\n        }\n\n        this.pageData = data;\n        this.title = data.page!.title;\n        this.pageContent = AddonModLessonHelper.getPageContentsFromPageData(data);\n        this.loaded = true;\n        this.currentPage = pageId;\n        this.messages = this.messages.concat(data.messages);\n\n        // Page loaded, hide EOL and feedback data if shown.\n        this.eolData = this.processData = undefined;\n\n        if (AddonModLesson.isQuestionPage(data.page!.type)) {\n            // Create an empty FormGroup without controls, they will be added in getQuestionFromPageData.\n            this.questionForm = this.formBuilder.group({});\n            this.pageButtons = [];\n            this.question = AddonModLessonHelper.getQuestionFromPageData(this.questionForm, data);\n            this.originalData = this.questionForm.getRawValue(); // Use getRawValue to include disabled values.\n        } else {\n            this.pageButtons = AddonModLessonHelper.getPageButtonsFromHtml(data.pagecontent || '');\n            this.question = undefined;\n            this.originalData = undefined;\n        }\n\n        // Don't display the navigation menu in review mode, using them displays errors.\n        if (data.displaymenu && !this.displayMenu && !this.review) {\n            // Load the menu.\n            this.loadMenu();\n        }\n        this.displayMenu = !this.review && !!data.displaymenu;\n\n        if (!this.firstPageLoaded) {\n            this.firstPageLoaded = true;\n        } else {\n            this.showRetake = false;\n        }\n\n        this.logPageLoaded(pageId, data.page?.title ?? '');\n    }\n\n    /**\n     * Log page loaded.\n     *\n     * @param pageId Page ID.\n     */\n    protected logPageLoaded(pageId: number, title: string): void {\n        if (!this.lesson) {\n            return;\n        }\n\n        CoreAnalytics.logEvent({\n            type: CoreAnalyticsEventType.VIEW_ITEM,\n            ws: 'mod_lesson_get_page_data',\n            name: this.lesson.name + ': ' + title,\n            data: { id: this.lesson.id, pageid: pageId, category: 'lesson' },\n            url: `/mod/lesson/view.php?id=${this.lesson.id}&pageid=${pageId}`,\n        });\n    }\n\n    /**\n     * Log continue page.\n     */\n    protected logContinuePageLoaded(): void {\n        if (!this.lesson) {\n            return;\n        }\n\n        CoreAnalytics.logEvent({\n            type: CoreAnalyticsEventType.VIEW_ITEM,\n            ws: 'mod_lesson_process_page',\n            name: this.lesson.name + ': ' + Translate.instant('addon.mod_lesson.continue'),\n            data: { id: this.lesson.id, category: 'lesson' },\n            url: '/mod/lesson/continue.php',\n        });\n    }\n\n    /**\n     * Process a page, sending some data.\n     *\n     * @param data The data to send.\n     * @param formSubmitted Whether a form was submitted.\n     * @returns Promise resolved when done.\n     */\n    protected async processPage(data: CoreFormFields, formSubmitted?: boolean): Promise<void> {\n        if (!this.lesson || !this.pageData) {\n            return;\n        }\n\n        this.loaded = false;\n\n        const lesson = this.lesson;\n        const pageData = this.pageData;\n        const options: AddonModLessonProcessPageOptions = {\n            password: this.password,\n            review: this.review,\n            offline: this.offline,\n            accessInfo: this.accessInfo,\n            jumps: this.jumps,\n        };\n\n        try {\n            const result = await this.callFunction<AddonModLessonProcessPageResponse>(\n                () => AddonModLesson.processPage(\n                    lesson,\n                    this.courseId,\n                    pageData,\n                    data,\n                    options,\n                ),\n                options,\n            );\n\n            if (formSubmitted) {\n                CoreForms.triggerFormSubmittedEvent(\n                    this.formElement,\n                    result.sent,\n                    CoreSites.getCurrentSiteId(),\n                );\n            }\n\n            if (!this.offline && !this.review && AddonModLesson.isLessonOffline(lesson)) {\n                // Lesson allows offline and the user changed some data in server. Update cached data.\n                const retake = this.accessInfo!.attemptscount;\n                const options = {\n                    cmId: this.cmId,\n                    readingStrategy: CoreSitesReadingStrategy.ONLY_NETWORK,\n                };\n\n                // Update in background the list of content pages viewed or question attempts.\n                if (AddonModLesson.isQuestionPage(this.pageData?.page?.type || -1)) {\n                    AddonModLesson.getQuestionsAttemptsOnline(lesson.id, retake, options);\n                } else {\n                    AddonModLesson.getContentPagesViewedOnline(lesson.id, retake, options);\n                }\n            }\n\n            if (result.nodefaultresponse || result.inmediatejump) {\n                // Don't display feedback or force a redirect to a new page. Load the new page.\n                return await this.jumpToPage(result.newpageid);\n            }\n\n            // Not inmediate jump, show the feedback.\n            result.feedback = AddonModLessonHelper.removeQuestionFromFeedback(result.feedback);\n            this.messages = result.messages;\n            this.processData = result;\n            this.processDataButtons = [];\n\n            if (lesson.review && !result.correctanswer && !result.noanswer && !result.isessayquestion &&\n                    !result.maxattemptsreached && !result.reviewmode) {\n                // User can try again, show button to do so.\n                this.processDataButtons.push({\n                    label: 'addon.mod_lesson.reviewquestionback',\n                    pageId: this.currentPage!,\n                });\n            }\n\n            // Button to continue.\n            if (lesson.review && !result.correctanswer && !result.noanswer && !result.isessayquestion &&\n                    !result.maxattemptsreached) {\n                /* If both the \"Yes, I'd like to try again\" and \"No, I just want to go on to the next question\" point to the\n                    same page then don't show the \"No, I just want to go on to the next question\" button. It's confusing. */\n                if (pageData.page?.id != result.newpageid) {\n                    // Button to continue the lesson (the page to go is configured by the teacher).\n                    this.processDataButtons.push({\n                        label: 'addon.mod_lesson.reviewquestioncontinue',\n                        pageId: result.newpageid,\n                    });\n                }\n            } else {\n                this.processDataButtons.push({\n                    label: 'addon.mod_lesson.continue',\n                    pageId: result.newpageid,\n                });\n            }\n\n            this.logContinuePageLoaded();\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'Error processing page');\n        } finally {\n            this.loaded = true;\n        }\n    }\n\n    /**\n     * Review the lesson.\n     *\n     * @param pageId Page to load.\n     */\n    async reviewLesson(pageId: number): Promise<void> {\n        this.loaded = false;\n        this.review = true;\n        this.offline = false; // Don't allow offline mode in review.\n\n        try {\n            await this.loadPage(pageId);\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'Error loading page');\n        } finally {\n            this.loaded = true;\n        }\n    }\n\n    /**\n     * Submit a question.\n     *\n     * @param e Event.\n     */\n    submitQuestion(e: Event): void {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this.loaded = false;\n\n        // Use getRawValue to include disabled values.\n        const data = AddonModLessonHelper.prepareQuestionData(this.question!, this.questionForm!.getRawValue());\n\n        this.processPage(data, true).finally(() => {\n            this.loaded = true;\n        });\n    }\n\n    /**\n     * Time up.\n     */\n    async timeUp(): Promise<void> {\n        // Time up called, hide the timer.\n        this.endTime = undefined;\n        this.loaded = false;\n\n        try {\n            await this.finishRetake(true);\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'Error finishing attempt');\n        } finally {\n            this.loaded = true;\n        }\n    }\n\n    /**\n     * Show the navigation modal.\n     *\n     * @returns Promise resolved when done.\n     */\n    async showMenu(): Promise<void> {\n        this.menuShown = true;\n\n        await CoreDomUtils.openSideModal({\n            component: AddonModLessonMenuModalPage,\n            componentProps: {\n                pageInstance: this,\n            },\n        });\n\n        this.menuShown = false;\n    }\n\n}\n\n/**\n * Common options for functions called using callFunction.\n */\ntype CommonOptions = CoreSitesCommonWSOptions & {\n    jumps?: AddonModLessonPossibleJumps;\n    offline?: boolean;\n};\n\n/**\n * Button displayed after processing a page.\n */\ntype ProcessDataButton = {\n    label: string;\n    pageId: number;\n};\n","export default \":host .button-disabled {\\n  opacity: 0.4;\\n}\\n:host .addon-mod_lesson-highlight {\\n  --background: var(--primary-tint);\\n}\\n:host .addon-mod_lesson-highlight ion-label, :host .addon-mod_lesson-highlight ion-label p {\\n  color: var(--primary-shade);\\n}\\n:host .item-interactive-disabled ion-label {\\n  opacity: 0.5;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hZGRvbnMvbW9kL2xlc3Nvbi9wYWdlcy91c2VyLXJldGFrZS91c2VyLXJldGFrZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNJO0VBQ0ksWUFBQTtBQUFSO0FBR0k7RUFDSSxpQ0FBQTtBQURSO0FBR1E7RUFDSSwyQkFBQTtBQURaO0FBS0k7RUFDSSxZQUFBO0FBSFIiLCJmaWxlIjoic3JjL2FkZG9ucy9tb2QvbGVzc29uL3BhZ2VzL3VzZXItcmV0YWtlL3VzZXItcmV0YWtlLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyI6aG9zdCB7XHJcbiAgICAuYnV0dG9uLWRpc2FibGVkIHtcclxuICAgICAgICBvcGFjaXR5OiAwLjQ7XHJcbiAgICB9XHJcblxyXG4gICAgLmFkZG9uLW1vZF9sZXNzb24taGlnaGxpZ2h0IHtcclxuICAgICAgICAtLWJhY2tncm91bmQ6IHZhcigtLXByaW1hcnktdGludCk7XHJcblxyXG4gICAgICAgIGlvbi1sYWJlbCwgaW9uLWxhYmVsIHAge1xyXG4gICAgICAgICAgICBjb2xvcjogdmFyKC0tcHJpbWFyeS1zaGFkZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC5pdGVtLWludGVyYWN0aXZlLWRpc2FibGVkIGlvbi1sYWJlbCB7XHJcbiAgICAgICAgb3BhY2l0eTogMC41O1xyXG4gICAgfVxyXG59XHJcbiJdfQ== */\";","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnInit } from '@angular/core';\nimport { IonRefresher } from '@ionic/angular';\n\nimport { CoreError } from '@classes/errors/error';\nimport { CoreUser } from '@features/user/services/user';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreUtils } from '@services/utils/utils';\nimport { Translate } from '@singletons';\nimport {\n    AddonModLesson,\n    AddonModLessonAttemptsOverviewsAttemptWSData,\n    AddonModLessonAttemptsOverviewsStudentWSData,\n    AddonModLessonGetUserAttemptWSResponse,\n    AddonModLessonLessonWSData,\n    AddonModLessonProvider,\n    AddonModLessonUserAttemptAnswerData,\n    AddonModLessonUserAttemptAnswerPageWSData,\n} from '../../services/lesson';\nimport { AddonModLessonAnswerData, AddonModLessonHelper } from '../../services/lesson-helper';\nimport { CoreTime } from '@singletons/time';\nimport { CoreAnalytics, CoreAnalyticsEventType } from '@services/analytics';\n\n/**\n * Page that displays a retake made by a certain user.\n */\n@Component({\n    selector: 'page-addon-mod-lesson-user-retake',\n    templateUrl: 'user-retake.html',\n    styleUrls: ['user-retake.scss'],\n})\nexport class AddonModLessonUserRetakePage implements OnInit {\n\n    component = AddonModLessonProvider.COMPONENT;\n    lesson?: AddonModLessonLessonWSData; // The lesson the retake belongs to.\n    courseId!: number; // Course ID the lesson belongs to.\n    selectedRetake?: number; // The retake to see.\n    student?: StudentData; // Data about the student and his retakes.\n    retake?: RetakeToDisplay; // Data about the retake.\n    loaded?: boolean; // Whether the data has been loaded.\n    timeTakenReadable?: string; // Time taken in a readable format.\n\n    protected cmId!: number; // The lesson ID the retake belongs to.\n    protected userId?: number; // User ID to see the retakes.\n    protected retakeNumber?: number; // Number of the initial retake to see.\n    protected previousSelectedRetake?: number; // To be able to detect the previous selected retake when it has changed.\n    protected logView: () => void;\n\n    constructor() {\n        this.logView = CoreTime.once(() => this.performLogView());\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnInit(): void {\n        try {\n            this.cmId = CoreNavigator.getRequiredRouteNumberParam('cmId');\n            this.courseId = CoreNavigator.getRequiredRouteNumberParam('courseId');\n            this.userId = CoreNavigator.getRouteNumberParam('userId') || CoreSites.getCurrentSiteUserId();\n            this.retakeNumber = CoreNavigator.getRouteNumberParam('retake');\n        } catch (error) {\n            CoreDomUtils.showErrorModal(error);\n\n            CoreNavigator.back();\n\n            return;\n        }\n\n        // Fetch the data.\n        this.fetchData().finally(() => {\n            this.loaded = true;\n        });\n    }\n\n    /**\n     * Change the retake displayed.\n     *\n     * @param retakeNumber The new retake number.\n     */\n    async changeRetake(retakeNumber: number): Promise<void> {\n        this.loaded = false;\n\n        try {\n            await this.setRetake(retakeNumber);\n\n            this.performLogView();\n        } catch (error) {\n            this.selectedRetake = this.previousSelectedRetake ?? this.selectedRetake;\n            CoreDomUtils.showErrorModal(CoreUtils.addDataNotDownloadedError(error, 'Error getting attempt.'));\n        } finally {\n            this.loaded = true;\n        }\n    }\n\n    /**\n     * Pull to refresh.\n     *\n     * @param refresher Refresher.\n     */\n    doRefresh(refresher: IonRefresher): void {\n        this.refreshData().finally(() => {\n            refresher?.complete();\n        });\n    }\n\n    /**\n     * Get lesson and retake data.\n     *\n     * @returns Promise resolved when done.\n     */\n    protected async fetchData(): Promise<void> {\n        try {\n            this.lesson = await AddonModLesson.getLesson(this.courseId, this.cmId);\n\n            // Get the retakes overview for all participants.\n            const data = await AddonModLesson.getRetakesOverview(this.lesson.id, {\n                cmId: this.cmId,\n            });\n\n            // Search the student.\n            const student: StudentData | undefined = data?.students?.find(student => student.id == this.userId);\n            if (!student) {\n                // Student not found.\n                throw new CoreError(Translate.instant('addon.mod_lesson.cannotfinduser'));\n            }\n\n            if (!student.attempts.length) {\n                // No retakes.\n                throw new CoreError(Translate.instant('addon.mod_lesson.cannotfindattempt'));\n            }\n\n            student.bestgrade = CoreTextUtils.roundToDecimals(student.bestgrade, 2);\n            student.attempts.forEach((retake) => {\n                if (!this.selectedRetake && this.retakeNumber == retake.try) {\n                    // The retake specified as parameter exists. Use it.\n                    this.selectedRetake = this.retakeNumber;\n                }\n\n                retake.label = AddonModLessonHelper.getRetakeLabel(retake);\n            });\n\n            if (!this.selectedRetake) {\n                // Retake number not specified or not valid, use the last retake.\n                this.selectedRetake = student.attempts[student.attempts.length - 1].try;\n            }\n\n            // Get the profile image of the user.\n            const user = await CoreUtils.ignoreErrors(CoreUser.getProfile(student.id, this.courseId, true));\n\n            this.student = student;\n            this.student.profileimageurl = user?.profileimageurl;\n\n            await this.setRetake(this.selectedRetake);\n\n            this.logView();\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'Error getting data.', true);\n        }\n    }\n\n    /**\n     * Refreshes data.\n     *\n     * @returns Promise resolved when done.\n     */\n    protected async refreshData(): Promise<void> {\n        const promises: Promise<void>[] = [];\n\n        promises.push(AddonModLesson.invalidateLessonData(this.courseId));\n        if (this.lesson) {\n            promises.push(AddonModLesson.invalidateRetakesOverview(this.lesson.id));\n            promises.push(AddonModLesson.invalidateUserRetakesForUser(this.lesson.id, this.userId));\n        }\n\n        await CoreUtils.ignoreErrors(Promise.all(promises));\n\n        await this.fetchData();\n    }\n\n    /**\n     * Set the retake to view and load its data.\n     *\n     * @param retakeNumber Retake number to set.\n     * @returns Promise resolved when done.\n     */\n    protected async setRetake(retakeNumber: number): Promise<void> {\n        this.selectedRetake = retakeNumber;\n\n        const retakeData = await AddonModLesson.getUserRetake(this.lesson!.id, retakeNumber, {\n            cmId: this.cmId,\n            userId: this.userId,\n        });\n\n        this.retake = this.formatRetake(retakeData);\n        this.previousSelectedRetake = this.selectedRetake;\n    }\n\n    /**\n     * Format retake data, adding some calculated data.\n     *\n     * @param retakeData Retake data.\n     * @returns Formatted data.\n     */\n    protected formatRetake(retakeData: AddonModLessonGetUserAttemptWSResponse): RetakeToDisplay {\n        const formattedData = <RetakeToDisplay> retakeData;\n\n        if (formattedData.userstats.gradeinfo) {\n            // Completed.\n            formattedData.userstats.grade = CoreTextUtils.roundToDecimals(formattedData.userstats.grade, 2);\n            this.timeTakenReadable = CoreTime.formatTime(formattedData.userstats.timetotake);\n        }\n\n        // Format pages data.\n        formattedData.answerpages.forEach((page) => {\n            if (AddonModLesson.answerPageIsContent(page)) {\n                page.isContent = true;\n\n                if (page.answerdata?.answers) {\n                    page.answerdata.answers.forEach((answer) => {\n                        // Content pages only have 1 valid field in the answer array.\n                        answer[0] = AddonModLessonHelper.getContentPageAnswerDataFromHtml(answer[0]);\n                    });\n                }\n            } else if (AddonModLesson.answerPageIsQuestion(page)) {\n                page.isQuestion = true;\n\n                if (page.answerdata?.answers) {\n                    page.answerdata.answers.forEach((answer) => {\n                        // Only the first field of the answer array requires to be parsed.\n                        answer[0] = AddonModLessonHelper.getQuestionPageAnswerDataFromHtml(answer[0]);\n                    });\n                }\n            }\n        });\n\n        return formattedData;\n    }\n\n    /**\n     * Log view.\n     */\n    protected performLogView(): void {\n        if (!this.lesson) {\n            return;\n        }\n\n        CoreAnalytics.logEvent({\n            type: CoreAnalyticsEventType.VIEW_ITEM,\n            ws: 'mod_lesson_get_user_attempt',\n            name: this.lesson.name + ': ' + Translate.instant('addon.mod_lesson.detailedstats'),\n            data: { id: this.lesson.id, userid: this.userId, try: this.selectedRetake, category: 'lesson' },\n            url: `/mod/lesson/report.php?id=${this.cmId}&action=reportdetail&userid=${this.userId}&try=${this.selectedRetake}`,\n        });\n    }\n\n}\n\n/**\n * Student data with some calculated data.\n */\ntype StudentData = Omit<AddonModLessonAttemptsOverviewsStudentWSData, 'attempts'> & {\n    profileimageurl?: string;\n    attempts: AttemptWithLabel[];\n};\n\n/**\n * Student attempt with a calculated label.\n */\ntype AttemptWithLabel = AddonModLessonAttemptsOverviewsAttemptWSData & {\n    label?: string;\n};\n/**\n * Retake with calculated data.\n */\ntype RetakeToDisplay = Omit<AddonModLessonGetUserAttemptWSResponse, 'answerpages'> & {\n    answerpages: AnswerPage[];\n};\n\n/**\n * Answer page with calculated data.\n */\ntype AnswerPage = Omit<AddonModLessonUserAttemptAnswerPageWSData, 'answerdata'> & {\n    isContent?: boolean;\n    isQuestion?: boolean;\n    answerdata?: AnswerData;\n};\n\n/**\n * Answer data with calculated data.\n */\ntype AnswerData = Omit<AddonModLessonUserAttemptAnswerData, 'answers'> & {\n    answers?: (string[] | AddonModLessonAnswerData)[]; // User answers.\n};\n"],"sourceRoot":"webpack:///"}