{"version":3,"sources":["./src/core/features/settings/pages/site/site.html","./src/core/features/settings/classes/settings-handlers-source.ts","./src/core/features/settings/pages/site/site.ts","./src/core/features/settings/settings-site-lazy.module.ts"],"names":[],"mappings":"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","file":"settings-site-lazy-module.js","sourcesContent":["export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <ion-title>\\r\\n            <h1>{{ 'core.settings.preferences' | translate}}</h1>\\r\\n        </ion-title>\\r\\n        <ion-buttons slot=\\\"end\\\">\\r\\n        </ion-buttons>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content>\\r\\n    <core-split-view>\\r\\n        <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!handlers.loaded\\\" (ionRefresh)=\\\"refreshData($event.target)\\\">\\r\\n            <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n        </ion-refresher>\\r\\n        <core-loading [hideUntil]=\\\"handlers.loaded\\\">\\r\\n            <ion-list>\\r\\n                <ion-item *ngFor=\\\"let handler of handlerItems\\\" class=\\\"core-settings-handler\\\" [ngClass]=\\\"handler.class\\\"\\r\\n                    [attr.aria-label]=\\\"handler.title | translate\\\" (click)=\\\"!handler.toggle && handlers.select(handler)\\\"\\r\\n                    [button]=\\\"!handler.toggle\\\" [detail]=\\\"!handler.toggle\\\" [attr.aria-current]=\\\"handlers.getItemAriaCurrent(handler)\\\">\\r\\n                    <ion-icon [name]=\\\"handler.icon\\\" slot=\\\"start\\\" *ngIf=\\\"handler.icon\\\" aria-hidden=\\\"true\\\">\\r\\n                    </ion-icon>\\r\\n                    <ion-label>\\r\\n                        <p class=\\\"item-heading\\\">{{ handler.title | translate}}</p>\\r\\n                    </ion-label>\\r\\n                    <ion-toggle *ngIf=\\\"handler.toggle\\\" [(ngModel)]=\\\"handler.toggleChecked\\\"\\r\\n                        (ionChange)=\\\"handler.toggle($event.detail.checked)\\\">\\r\\n                    </ion-toggle>\\r\\n                </ion-item>\\r\\n            </ion-list>\\r\\n\\r\\n            <ion-card>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                    <ion-label>\\r\\n                        <p class=\\\"item-heading\\\">{{ 'core.settings.synchronizenow' | translate }}</p>\\r\\n                        <p>\\r\\n                            {{ 'core.settings.synchronizenowhelp' | translate }}\\r\\n                        </p>\\r\\n                    </ion-label>\\r\\n                    <core-button-with-spinner [loading]=\\\"isSynchronizing()\\\" slot=\\\"end\\\">\\r\\n                        <ion-button fill=\\\"clear\\\" (click)=\\\"synchronize()\\\" [attr.aria-label]=\\\"'core.settings.synchronizenow' | translate\\\"\\r\\n                            [disabled]=\\\"!isOnline || (dataSaver && limitedConnection)\\\">\\r\\n                            <ion-icon name=\\\"fas-rotate\\\" slot=\\\"icon-only\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                        </ion-button>\\r\\n                    </core-button-with-spinner>\\r\\n                </ion-item>\\r\\n                <ion-item class=\\\"core-warning-item ion-text-wrap\\\" *ngIf=\\\"!isOnline || (dataSaver && limitedConnection)\\\">\\r\\n                    <ion-icon name=\\\"fas-triangle-exclamation\\\" slot=\\\"start\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                    <ion-label>\\r\\n                        <ng-container *ngIf=\\\"isOnline && dataSaver && limitedConnection\\\">\\r\\n                            {{ 'core.settings.connectwifitosync' | translate }}</ng-container>\\r\\n                        <ng-container *ngIf=\\\"!isOnline\\\">{{ 'core.settings.connecttosync' | translate }}</ng-container>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n            </ion-card>\\r\\n        </core-loading>\\r\\n    </core-split-view>\\r\\n</ion-content>\\r\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Params } from '@angular/router';\nimport { CoreRoutedItemsManagerSource } from '@classes/items-management/routed-items-manager-source';\nimport {\n    CoreSettingsDelegate,\n    CoreSettingsHandlerToDisplay,\n    CoreSettingsPageHandlerToDisplay,\n} from '../services/settings-delegate';\n\n/**\n * Provides a collection of site settings.\n */\nexport class CoreSettingsHandlersSource extends CoreRoutedItemsManagerSource<CoreSettingsPageHandlerToDisplay> {\n\n    handlers: CoreSettingsHandlerToDisplay[] = [];\n\n    /**\n     * @inheritdoc\n     */\n    protected async loadPageItems(): Promise<{ items: CoreSettingsPageHandlerToDisplay[] }> {\n        this.handlers = CoreSettingsDelegate.getHandlers();\n\n        return {\n            items: this.handlers.filter((handler): handler is CoreSettingsPageHandlerToDisplay => 'page' in handler),\n        };\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getItemPath(handler: CoreSettingsPageHandlerToDisplay): string {\n        return handler.page;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getItemQueryParams(handler: CoreSettingsPageHandlerToDisplay): Params {\n        return handler.params || {};\n    }\n\n}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { AfterViewInit, Component, OnDestroy, ViewChild } from '@angular/core';\nimport { IonRefresher } from '@ionic/angular';\n\nimport { CoreSettingsHandlerToDisplay, CoreSettingsPageHandlerToDisplay } from '../../services/settings-delegate';\nimport { CoreEventObserver, CoreEvents } from '@singletons/events';\nimport { CoreSites } from '@services/sites';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreSplitViewComponent } from '@components/split-view/split-view';\nimport { CoreListItemsManager } from '@classes/items-management/list-items-manager';\nimport { CoreRoutedItemsManagerSourcesTracker } from '@classes/items-management/routed-items-manager-sources-tracker';\nimport { CoreSettingsHelper } from '@features/settings/services/settings-helper';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreNetwork } from '@services/network';\nimport { Subscription } from 'rxjs';\nimport { NgZone } from '@singletons';\nimport { CoreConstants } from '@/core/constants';\nimport { CoreConfig } from '@services/config';\nimport { CoreSettingsHandlersSource } from '@features/settings/classes/settings-handlers-source';\n\n/**\n * Page that displays the list of site settings pages.\n */\n@Component({\n    selector: 'page-core-site-preferences',\n    templateUrl: 'site.html',\n})\nexport class CoreSitePreferencesPage implements AfterViewInit, OnDestroy {\n\n    @ViewChild(CoreSplitViewComponent) splitView!: CoreSplitViewComponent;\n\n    handlers: CoreListItemsManager<CoreSettingsPageHandlerToDisplay, CoreSettingsHandlersSource>;\n\n    dataSaver = false;\n    limitedConnection = false;\n    isOnline = true;\n\n    protected siteId: string;\n    protected sitesObserver: CoreEventObserver;\n    protected networkObserver: Subscription;\n    protected isDestroyed = false;\n\n    get handlerItems(): CoreSettingsHandlerToDisplay[] {\n        return this.handlers.getSource().handlers;\n    }\n\n    constructor() {\n        this.siteId = CoreSites.getCurrentSiteId();\n\n        const source = CoreRoutedItemsManagerSourcesTracker.getOrCreateSource(CoreSettingsHandlersSource, []);\n\n        this.handlers = new CoreListItemsManager(source, CoreSitePreferencesPage);\n\n        this.sitesObserver = CoreEvents.on(CoreEvents.SITE_UPDATED, () => {\n            this.refreshData();\n        }, this.siteId);\n\n        this.isOnline = CoreNetwork.isOnline();\n        this.limitedConnection = this.isOnline && CoreNetwork.isNetworkAccessLimited();\n\n        this.networkObserver = CoreNetwork.onChange().subscribe(() => {\n            // Execute the callback in the Angular zone, so change detection doesn't stop working.\n            NgZone.run(() => {\n                this.isOnline = CoreNetwork.isOnline();\n                this.limitedConnection = this.isOnline && CoreNetwork.isNetworkAccessLimited();\n            });\n        });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async ngAfterViewInit(): Promise<void> {\n        this.dataSaver = await CoreConfig.get(CoreConstants.SETTINGS_SYNC_ONLY_ON_WIFI, true);\n\n        const pageToOpen = CoreNavigator.getRouteParam('page');\n\n        try {\n            await this.fetchData();\n        } finally {\n            const handler = pageToOpen ? this.handlers.items.find(handler => handler.page == pageToOpen) : undefined;\n\n            if (handler) {\n                this.handlers.watchSplitViewOutlet(this.splitView);\n\n                await this.handlers.select(handler);\n            } else {\n                await this.handlers.start(this.splitView);\n            }\n        }\n    }\n\n    /**\n     * Fetch Data.\n     */\n    protected async fetchData(): Promise<void> {\n        await this.handlers.load();\n    }\n\n    /**\n     * Syncrhonizes the site.\n     */\n    async synchronize(): Promise<void> {\n        try {\n            // Using syncOnlyOnWifi false to force manual sync.\n            await CoreSettingsHelper.synchronizeSite(false, this.siteId);\n        } catch (error) {\n            if (this.isDestroyed) {\n                return;\n            }\n            CoreDomUtils.showErrorModalDefault(error, 'core.settings.sitesyncfailed', true);\n        }\n\n    }\n\n    /**\n     * Returns true if site is beeing synchronized.\n     *\n     * @returns True if site is beeing synchronized, false otherwise.\n     */\n    isSynchronizing(): boolean {\n        return !!CoreSettingsHelper.getSiteSyncPromise(this.siteId);\n    }\n\n    /**\n     * Refresh the data.\n     *\n     * @param refresher Refresher.\n     */\n    refreshData(refresher?: IonRefresher): void {\n        this.handlers.getSource().setDirty(true);\n        this.fetchData().finally(() => {\n            refresher?.complete();\n        });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnDestroy(): void {\n        this.isDestroyed = true;\n        this.sitesObserver.off();\n        this.networkObserver.unsubscribe();\n        this.handlers.destroy();\n    }\n\n}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injector, NgModule } from '@angular/core';\nimport { RouterModule, ROUTES, Routes } from '@angular/router';\n\nimport { CoreSharedModule } from '@/core/shared.module';\nimport { conditionalRoutes } from '@/app/app-routing.module';\nimport { CoreScreen } from '@services/screen';\nimport { CoreSitePreferencesPage } from '@features/settings/pages/site/site';\nimport { resolveSiteRoutes } from '@features/settings/settings-site-routing.module';\n\n/**\n * Build module routes.\n *\n * @param injector Injector.\n * @returns Routes.\n */\nfunction buildRoutes(injector: Injector): Routes {\n    const routes = resolveSiteRoutes(injector);\n    const mobileRoutes: Routes = [\n        {\n            path: '',\n            component: CoreSitePreferencesPage,\n        },\n        ...routes.siblings,\n    ];\n    const tabletRoutes: Routes = [\n        {\n            path: '',\n            component: CoreSitePreferencesPage,\n            children: routes.siblings,\n        },\n    ];\n\n    return [\n        ...conditionalRoutes(mobileRoutes, () => CoreScreen.isMobile),\n        ...conditionalRoutes(tabletRoutes, () => CoreScreen.isTablet),\n    ];\n}\n\n@NgModule({\n    providers: [\n        { provide: ROUTES, multi: true, useFactory: buildRoutes, deps: [Injector] },\n    ],\n    declarations: [\n        CoreSitePreferencesPage,\n    ],\n    imports: [\n        CoreSharedModule,\n    ],\n    exports: [RouterModule],\n})\nexport class CoreettingsSiteLazyModule {}\n"],"sourceRoot":"webpack:///"}