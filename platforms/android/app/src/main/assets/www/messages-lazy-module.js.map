{"version":3,"sources":["./src/addons/messages/pages/contacts-35/contacts.html","./src/addons/messages/pages/contacts/contacts.html","./src/addons/messages/pages/discussion/discussion.html","./src/addons/messages/pages/discussions-35/discussions.html","./src/addons/messages/pages/group-conversations/group-conversations.html","./src/addons/messages/pages/search/search.html","./src/addons/messages/guards/index.ts","./src/addons/messages/messages-common.scss","./src/addons/messages/messages-lazy.module.ts","./src/addons/messages/pages/contacts-35/contacts.ts","./src/addons/messages/pages/contacts/contacts.ts","./src/addons/messages/pages/discussion/discussion.scss","./src/addons/messages/pages/discussion/discussion.ts","./src/addons/messages/pages/discussions-35/discussions.ts","./src/addons/messages/pages/group-conversations/group-conversations.ts","./src/addons/messages/pages/search/search.ts"],"names":[],"mappings":"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","file":"messages-lazy-module.js","sourcesContent":["export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <ion-title>\\r\\n            <h1>{{ 'addon.messages.contacts' | translate }}</h1>\\r\\n        </ion-title>\\r\\n        <ion-buttons slot=\\\"end\\\">\\r\\n            <!-- Add an empty context menu so split view pages can add items, otherwise the menu disappears in some cases. -->\\r\\n            <core-context-menu></core-context-menu>\\r\\n        </ion-buttons>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content>\\r\\n    <core-split-view>\\r\\n        <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!loaded\\\" (ionRefresh)=\\\"refreshData($event.target)\\\">\\r\\n            <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n        </ion-refresher>\\r\\n\\r\\n        <core-search-box (onSubmit)=\\\"search($event)\\\" (onClear)=\\\"clearSearch()\\\" [placeholder]=\\\"'addon.messages.contactname' | translate\\\"\\r\\n            autocorrect=\\\"off\\\" spellcheck=\\\"false\\\" lengthCheck=\\\"2\\\" [disabled]=\\\"!loaded\\\" searchArea=\\\"AddonMessagesContacts\\\"></core-search-box>\\r\\n\\r\\n        <core-loading [hideUntil]=\\\"loaded\\\" [message]=\\\"loadingMessage\\\">\\r\\n            <core-empty-box *ngIf=\\\"!hasContacts && searchString == ''\\\" icon=\\\"fas-address-book\\\"\\r\\n                [message]=\\\"'addon.messages.contactlistempty' | translate\\\"></core-empty-box>\\r\\n\\r\\n            <core-empty-box *ngIf=\\\"!hasContacts && searchString != ''\\\" icon=\\\"fas-address-book\\\"\\r\\n                [message]=\\\"'addon.messages.nousersfound' | translate\\\"></core-empty-box>\\r\\n\\r\\n            <ion-list *ngFor=\\\"let contactType of contactTypes\\\" class=\\\"ion-no-margin\\\">\\r\\n                <ng-container *ngIf=\\\"contacts[contactType] && (contacts[contactType].length > 0 || contactType === searchType)\\\">\\r\\n                    <ion-item-divider>\\r\\n                        <ion-label>\\r\\n                            <p class=\\\"item-heading\\\">{{ 'addon.messages.type_' + contactType | translate }}</p>\\r\\n                        </ion-label>\\r\\n                        <ion-note slot=\\\"end\\\" class=\\\"ion-padding-end\\\">\\r\\n                            <ion-badge>{{ contacts[contactType].length }}</ion-badge>\\r\\n                        </ion-note>\\r\\n                    </ion-item-divider>\\r\\n                    <ng-container *ngFor=\\\"let contact of contacts[contactType]\\\">\\r\\n                        <!-- Don't show deleted users -->\\r\\n                        <ion-item class=\\\"ion-text-wrap addon-messages-conversation-item\\\"\\r\\n                            *ngIf=\\\"contact.profileimageurl || contact.profileimageurlsmall\\\" [attr.aria-label]=\\\"contact.fullname\\\"\\r\\n                            (click)=\\\"gotoDiscussion(contact.id)\\\" detail=\\\"true\\\" button\\r\\n                            [attr.aria-current]=\\\"contact.id == discussionUserId ? 'page' : 'false'\\\">\\r\\n                            <core-user-avatar [user]=\\\"contact\\\" slot=\\\"start\\\" [checkOnline]=\\\"contact.showonlinestatus\\\"></core-user-avatar>\\r\\n                            <ion-label>\\r\\n                                <p class=\\\"item-heading\\\">{{ contact.fullname }}</p>\\r\\n                            </ion-label>\\r\\n                        </ion-item>\\r\\n                    </ng-container>\\r\\n                </ng-container>\\r\\n            </ion-list>\\r\\n        </core-loading>\\r\\n    </core-split-view>\\r\\n</ion-content>\\r\\n\";","export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <ion-title>\\r\\n            <h1>{{ 'addon.messages.contacts' | translate }}</h1>\\r\\n        </ion-title>\\r\\n        <ion-buttons slot=\\\"end\\\">\\r\\n            <ion-button fill=\\\"clear\\\" (click)=\\\"gotoSearch()\\\" [attr.aria-label]=\\\"'addon.messages.searchcombined' | translate\\\">\\r\\n                <ion-icon name=\\\"fas-magnifying-glass\\\" slot=\\\"icon-only\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n            </ion-button>\\r\\n            <!-- Add an empty context menu so split view pages can add items, otherwise the menu disappears in some cases. -->\\r\\n            <core-context-menu></core-context-menu>\\r\\n        </ion-buttons>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content>\\r\\n    <core-split-view>\\r\\n        <core-tabs [hideUntil]=\\\"true\\\">\\r\\n\\r\\n            <!-- Contacts tab. -->\\r\\n            <core-tab [title]=\\\"'addon.messages.contacts' | translate\\\" (ionSelect)=\\\"selectTab('confirmed')\\\">\\r\\n                <ng-template>\\r\\n                    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!confirmedLoaded\\\" (ionRefresh)=\\\"refreshData($event.target)\\\">\\r\\n                        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n                    </ion-refresher>\\r\\n                    <core-loading [hideUntil]=\\\"confirmedLoaded\\\">\\r\\n                        <ion-list class=\\\"ion-no-margin\\\" *ngIf=\\\"confirmedContacts.length\\\">\\r\\n                            <ion-item class=\\\"ion-text-wrap addon-messages-conversation-item\\\" (click)=\\\"selectUser(contact.id)\\\" button\\r\\n                                *ngFor=\\\"let contact of confirmedContacts\\\" [attr.aria-label]=\\\"contact.fullname\\\" detail=\\\"true\\\"\\r\\n                                [attr.aria-current]=\\\"contact.id == selectedUserId ? 'page' : 'false'\\\">\\r\\n                                <core-user-avatar slot=\\\"start\\\" [user]=\\\"contact\\\" [checkOnline]=\\\"contact.showonlinestatus\\\"\\r\\n                                    [linkProfile]=\\\"false\\\">\\r\\n                                </core-user-avatar>\\r\\n                                <ion-label>\\r\\n                                    <p class=\\\"item-heading\\\">\\r\\n                                        <core-format-text [text]=\\\"contact.fullname\\\" contextLevel=\\\"system\\\" [contextInstanceId]=\\\"0\\\">\\r\\n                                        </core-format-text>\\r\\n                                        <ion-icon *ngIf=\\\"contact.isblocked\\\" name=\\\"fas-user-slash\\\" slot=\\\"end\\\"\\r\\n                                            [attr.aria-label]=\\\"'addon.messages.contactblocked' | translate\\\">\\r\\n                                        </ion-icon>\\r\\n                                    </p>\\r\\n                                </ion-label>\\r\\n                            </ion-item>\\r\\n                        </ion-list>\\r\\n\\r\\n                        <core-empty-box *ngIf=\\\"!confirmedContacts.length\\\" icon=\\\"far-address-book\\\"\\r\\n                            [message]=\\\"'addon.messages.nocontactsgetstarted' | translate\\\">\\r\\n                        </core-empty-box>\\r\\n\\r\\n                        <core-infinite-loading [enabled]=\\\"confirmedCanLoadMore\\\" (action)=\\\"loadMore($event)\\\" [error]=\\\"confirmedLoadMoreError\\\"\\r\\n                            position=\\\"bottom\\\">\\r\\n                        </core-infinite-loading>\\r\\n                    </core-loading>\\r\\n                </ng-template>\\r\\n            </core-tab>\\r\\n\\r\\n            <!-- Requests tab. -->\\r\\n            <core-tab [title]=\\\"'addon.messages.requests' | translate\\\" (ionSelect)=\\\"selectTab('requests')\\\" [badge]=\\\"requestsBadge\\\"\\r\\n                badgeA11yText=\\\"addon.messages.pendingcontactrequests\\\">\\r\\n                <ng-template>\\r\\n                    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!requestsLoaded\\\" (ionRefresh)=\\\"refreshData($event.target)\\\">\\r\\n                        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n                    </ion-refresher>\\r\\n                    <core-loading [hideUntil]=\\\"requestsLoaded\\\">\\r\\n                        <ion-list class=\\\"ion-no-margin\\\" *ngIf=\\\"requests.length\\\">\\r\\n                            <ion-item class=\\\"ion-text-wrap addon-messages-conversation-item\\\" *ngFor=\\\"let request of requests\\\"\\r\\n                                [attr.aria-label]=\\\"request.fullname\\\" (click)=\\\"selectUser(request.id)\\\" button\\r\\n                                [attr.aria-current]=\\\"request.id == selectedUserId ? 'page' : 'false'\\\" detail=\\\"true\\\">\\r\\n                                <core-user-avatar slot=\\\"start\\\" [user]=\\\"request\\\" [linkProfile]=\\\"false\\\"></core-user-avatar>\\r\\n                                <ion-label>\\r\\n                                    <core-format-text [text]=\\\"request.fullname\\\" contextLevel=\\\"system\\\" [contextInstanceId]=\\\"0\\\">\\r\\n                                    </core-format-text>\\r\\n                                    <p *ngIf=\\\"!request.iscontact\\\">\\r\\n                                        {{ 'addon.messages.wouldliketocontactyou' | translate }}\\r\\n                                    </p>\\r\\n                                </ion-label>\\r\\n                            </ion-item>\\r\\n                        </ion-list>\\r\\n                        <core-empty-box *ngIf=\\\"!requests.length\\\" icon=\\\"far-address-book\\\"\\r\\n                            [message]=\\\"'addon.messages.nocontactrequests' | translate\\\">\\r\\n                        </core-empty-box>\\r\\n                        <core-infinite-loading [enabled]=\\\"requestsCanLoadMore\\\" (action)=\\\"loadMore($event)\\\" [error]=\\\"requestsLoadMoreError\\\"\\r\\n                            position=\\\"bottom\\\">\\r\\n                        </core-infinite-loading>\\r\\n                    </core-loading>\\r\\n                </ng-template>\\r\\n            </core-tab>\\r\\n        </core-tabs>\\r\\n    </core-split-view>\\r\\n</ion-content>\\r\\n\";","export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <ion-title>\\r\\n            <h1>\\r\\n                <img *ngIf=\\\"loaded && !otherMember && conversationImage\\\" class=\\\"core-bar-button-image\\\" [src]=\\\"conversationImage\\\" alt=\\\"\\\"\\r\\n                    onError=\\\"this.src='assets/img/group-avatar.svg'\\\" core-external-content role=\\\"presentation\\\" [siteId]=\\\"siteId || null\\\">\\r\\n                <core-user-avatar *ngIf=\\\"loaded && otherMember\\\" class=\\\"core-bar-button-image\\\" [user]=\\\"otherMember\\\" [linkProfile]=\\\"false\\\"\\r\\n                    [checkOnline]=\\\"otherMember.showonlinestatus\\\">\\r\\n                </core-user-avatar>\\r\\n                <core-format-text [text]=\\\"title\\\" contextLevel=\\\"system\\\" [contextInstanceId]=\\\"0\\\"></core-format-text>\\r\\n                <ion-icon *ngIf=\\\"conversation && conversation.isfavourite\\\" name=\\\"fas-star\\\"\\r\\n                    [attr.aria-label]=\\\"'core.favourites' | translate\\\">\\r\\n                </ion-icon>\\r\\n                <ion-icon *ngIf=\\\"conversation && conversation.ismuted\\\" name=\\\"fas-bell-slash\\\"\\r\\n                    [attr.aria-label]=\\\"'addon.messages.mutedconversation' | translate\\\">\\r\\n                </ion-icon>\\r\\n            </h1>\\r\\n        </ion-title>\\r\\n        <ion-buttons slot=\\\"end\\\"></ion-buttons>\\r\\n    </ion-toolbar>\\r\\n    <core-navbar-buttons slot=\\\"end\\\">\\r\\n        <core-context-menu [attr.aria-label]=\\\"'addon.messages.conversationactions' | translate\\\">\\r\\n            <core-context-menu-item [hidden]=\\\"isSelf || !showInfo || isGroup\\\" [priority]=\\\"1000\\\"\\r\\n                [content]=\\\"'addon.messages.info' | translate\\\" (action)=\\\"viewInfo()\\\" iconAction=\\\"fas-circle-info\\\"></core-context-menu-item>\\r\\n            <core-context-menu-item [hidden]=\\\"isSelf || !showInfo || !isGroup\\\" [priority]=\\\"1000\\\"\\r\\n                [content]=\\\"'addon.messages.groupinfo' | translate\\\" (action)=\\\"viewInfo()\\\" iconAction=\\\"fas-circle-info\\\">\\r\\n            </core-context-menu-item>\\r\\n            <core-context-menu-item [hidden]=\\\"!groupMessagingEnabled || !conversation\\\" [priority]=\\\"800\\\" (action)=\\\"changeFavourite($event)\\\"\\r\\n                [closeOnClick]=\\\"false\\\" [content]=\\\"(conversation && conversation.isfavourite ? 'addon.messages.removefromfavourites' :\\r\\n                'addon.messages.addtofavourites') | translate\\\" [iconAction]=\\\"favouriteIcon\\\" [iconSlash]=\\\"favouriteIconSlash\\\">\\r\\n            </core-context-menu-item>\\r\\n            <core-context-menu-item [hidden]=\\\"isSelf || !otherMember || otherMember.isblocked\\\" [priority]=\\\"700\\\"\\r\\n                [content]=\\\"'addon.messages.blockuser' | translate\\\" (action)=\\\"blockUser()\\\" [iconAction]=\\\"blockIcon\\\">\\r\\n            </core-context-menu-item>\\r\\n            <core-context-menu-item [hidden]=\\\"isSelf || !otherMember || !otherMember.isblocked\\\" [priority]=\\\"700\\\"\\r\\n                [content]=\\\"'addon.messages.unblockuser' | translate\\\" (action)=\\\"unblockUser()\\\" [iconAction]=\\\"blockIcon\\\">\\r\\n            </core-context-menu-item>\\r\\n            <core-context-menu-item [hidden]=\\\"isSelf || !muteEnabled || !conversation\\\" [priority]=\\\"600\\\" (action)=\\\"changeMute($event)\\\"\\r\\n                [closeOnClick]=\\\"false\\\" [content]=\\\"(conversation && conversation.ismuted ? 'addon.messages.unmuteconversation' :\\r\\n                'addon.messages.muteconversation') | translate\\\" [iconAction]=\\\"muteIcon\\\"></core-context-menu-item>\\r\\n            <core-context-menu-item [hidden]=\\\"!canDelete || !messages || !messages.length\\\" [priority]=\\\"400\\\"\\r\\n                [content]=\\\"'addon.messages.showdeletemessages' | translate\\\" iconAction=\\\"toggle\\\" [(toggle)]=\\\"showDelete\\\">\\r\\n            </core-context-menu-item>\\r\\n            <core-context-menu-item [hidden]=\\\"!groupMessagingEnabled || !conversationId || isGroup || !messages || !messages.length\\\"\\r\\n                [priority]=\\\"200\\\" [content]=\\\"'addon.messages.deleteconversation' | translate\\\" (action)=\\\"deleteConversation($event)\\\"\\r\\n                [closeOnClick]=\\\"false\\\" [iconAction]=\\\"deleteIcon\\\"></core-context-menu-item>\\r\\n            <core-context-menu-item\\r\\n                [hidden]=\\\"isSelf || !otherMember || otherMember.iscontact || requestContactSent || requestContactReceived\\\" [priority]=\\\"100\\\"\\r\\n                [content]=\\\"'addon.messages.addtoyourcontacts' | translate\\\" (action)=\\\"createContactRequest()\\\" [iconAction]=\\\"addRemoveIcon\\\">\\r\\n            </core-context-menu-item>\\r\\n            <core-context-menu-item [hidden]=\\\"isSelf || !otherMember || !otherMember.iscontact\\\" [priority]=\\\"100\\\"\\r\\n                [content]=\\\"'addon.messages.removefromyourcontacts' | translate\\\" (action)=\\\"removeContact()\\\" [iconAction]=\\\"addRemoveIcon\\\"\\r\\n                [iconSlash]=\\\"true\\\"></core-context-menu-item>\\r\\n        </core-context-menu>\\r\\n    </core-navbar-buttons>\\r\\n</ion-header>\\r\\n<ion-content (ionScroll)=\\\"scrollFunction()\\\">\\r\\n    <core-loading [hideUntil]=\\\"loaded\\\">\\r\\n        <!-- Load previous messages. -->\\r\\n        <core-infinite-loading [enabled]=\\\"canLoadMore\\\" (action)=\\\"loadPrevious($event)\\\" position=\\\"top\\\" [error]=\\\"loadMoreError\\\">\\r\\n        </core-infinite-loading>\\r\\n\\r\\n        <ng-container *ngIf=\\\"isSelf && !canLoadMore\\\">\\r\\n            <p class=\\\"ion-text-center\\\">{{ 'addon.messages.selfconversation' | translate }}</p>\\r\\n            <p class=\\\"ion-text-center\\\"><em>{{ 'addon.messages.selfconversationdefaultmessage' | translate }}</em></p>\\r\\n        </ng-container>\\r\\n\\r\\n        <h2 class=\\\"sr-only\\\">{{ title }}</h2>\\r\\n\\r\\n        <ion-list class=\\\"addon-messages-discussion-container\\\" [class.addon-messages-discussion-group]=\\\"isGroup\\\" [attr.aria-live]=\\\"'polite'\\\">\\r\\n            <ng-container *ngFor=\\\"let message of messages; index as index; last as last\\\">\\r\\n                <h3 class=\\\"ion-text-center addon-messages-date\\\" *ngIf=\\\"message.showDate\\\">\\r\\n                    {{ message.timecreated | coreFormatDate: \\\"strftimedayshort\\\" }}\\r\\n                </h3>\\r\\n\\r\\n                <ion-chip class=\\\"addon-messages-unreadfrom\\\" *ngIf=\\\"unreadMessageFrom > 0 && message.id == unreadMessageFrom\\\" color=\\\"light\\\">\\r\\n                    <ion-label>{{ 'addon.messages.newmessages' | translate }}</ion-label>\\r\\n                    <ion-icon name=\\\"fas-arrow-down\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                </ion-chip>\\r\\n\\r\\n                <core-message [message]=\\\"message\\\" [user]=\\\"members[message.useridfrom]\\\" (afterRender)=\\\"last && scrollToBottom()\\\"\\r\\n                    [text]=\\\"message.text\\\" (onDeleteMessage)=\\\"deleteMessage(message, index)\\\" [showDelete]=\\\"showDelete\\\"\\r\\n                    [time]=\\\"message.timecreated\\\">\\r\\n                </core-message>\\r\\n            </ng-container>\\r\\n        </ion-list>\\r\\n\\r\\n        <core-empty-box *ngIf=\\\"!messages || messages.length <= 0\\\" icon=\\\"far-comments\\\"\\r\\n            [message]=\\\"'addon.messages.nomessagesfound' | translate\\\">\\r\\n        </core-empty-box>\\r\\n    </core-loading>\\r\\n    <!-- Scroll bottom. -->\\r\\n    <ion-fab slot=\\\"fixed\\\" core-fab vertical=\\\"bottom\\\" horizontal=\\\"end\\\" *ngIf=\\\"loaded && newMessages > 0\\\">\\r\\n        <ion-fab-button size=\\\"small\\\" (click)=\\\"scrollToFirstUnreadMessage()\\\" color=\\\"light\\\"\\r\\n            [attr.aria-label]=\\\"'addon.messages.newmessages' | translate\\\">\\r\\n            <ion-icon name=\\\"fas-arrow-down\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n            <span class=\\\"sr-only\\\">{{ 'addon.messages.newmessages' | translate }}</span>\\r\\n        </ion-fab-button>\\r\\n        <ion-badge class=\\\"core-discussion-messages-badge\\\">{{ newMessages }}</ion-badge>\\r\\n    </ion-fab>\\r\\n</ion-content>\\r\\n<ion-footer class=\\\"footer-adjustable\\\" *ngIf=\\\"loaded && (!conversationId || conversation)\\\">\\r\\n    <ion-toolbar [color]=\\\"footerType == 'message' ? null : 'light'\\\">\\r\\n        <p *ngIf=\\\"footerType == 'unable'\\\" class=\\\"ion-text-center ion-margin-horizontal\\\">\\r\\n            {{ 'addon.messages.unabletomessage' | translate }}\\r\\n        </p>\\r\\n        <div *ngIf=\\\"footerType == 'blocked'\\\" class=\\\"ion-padding-horizontal\\\">\\r\\n            <p class=\\\"ion-text-center\\\">{{ 'addon.messages.youhaveblockeduser' | translate }}</p>\\r\\n            <ion-button expand=\\\"block\\\" class=\\\"ion-text-wrap ion-margin-bottom\\\" (click)=\\\"unblockUser()\\\">\\r\\n                {{ 'addon.messages.unblockuser' | translate }}\\r\\n            </ion-button>\\r\\n        </div>\\r\\n        <div *ngIf=\\\"footerType == 'requiresContact' && otherMember\\\" class=\\\"ion-padding-horizontal\\\">\\r\\n            <p class=\\\"ion-text-center\\\">\\r\\n                <strong>{{ 'addon.messages.isnotinyourcontacts' | translate: {$a: otherMember.fullname} }}</strong>\\r\\n            </p>\\r\\n            <p class=\\\"ion-text-center\\\">{{ 'addon.messages.requirecontacttomessage' | translate: {$a: otherMember.fullname} }}</p>\\r\\n            <ion-button expand=\\\"block\\\" class=\\\"ion-text-wrap ion-margin-bottom\\\" (click)=\\\"createContactRequest()\\\">\\r\\n                {{ 'addon.messages.sendcontactrequest' | translate }}\\r\\n            </ion-button>\\r\\n        </div>\\r\\n        <div *ngIf=\\\"footerType == 'requestReceived' && otherMember\\\" class=\\\"ion-padding-horizontal\\\">\\r\\n            <p class=\\\"ion-text-center\\\">{{ 'addon.messages.userwouldliketocontactyou' | translate: {$a: otherMember.fullname} }}</p>\\r\\n            <ion-button expand=\\\"block\\\" class=\\\"ion-text-wrap ion-margin-bottom\\\" (click)=\\\"confirmContactRequest()\\\">\\r\\n                {{ 'addon.messages.acceptandaddcontact' | translate }}\\r\\n            </ion-button>\\r\\n            <ion-button expand=\\\"block\\\" class=\\\"ion-text-wrap ion-margin-bottom\\\" fill=\\\"outline\\\" (click)=\\\"declineContactRequest()\\\">\\r\\n                {{ 'addon.messages.decline' | translate }}\\r\\n            </ion-button>\\r\\n        </div>\\r\\n        <div *ngIf=\\\"footerType == 'requestSent' || (footerType == 'message' && requestContactSent)\\\" class=\\\"ion-padding-horizontal\\\">\\r\\n            <p class=\\\"ion-text-center\\\"><strong>{{ 'addon.messages.contactrequestsent' | translate }}</strong></p>\\r\\n            <p class=\\\"ion-text-center\\\" *ngIf=\\\"otherMember\\\">\\r\\n                {{ 'addon.messages.yourcontactrequestpending' | translate: {$a: otherMember.fullname} }}\\r\\n            </p>\\r\\n        </div>\\r\\n        <core-send-message-form *ngIf=\\\"footerType == 'message'\\\" (onSubmit)=\\\"sendMessage($event)\\\" [showKeyboard]=\\\"showKeyboard\\\"\\r\\n            [placeholder]=\\\"'addon.messages.newmessage' | translate\\\"></core-send-message-form>\\r\\n    </ion-toolbar>\\r\\n</ion-footer>\\r\\n\";","export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <ion-title>\\r\\n            <h1>{{ 'addon.messages.messages' | translate }}</h1>\\r\\n        </ion-title>\\r\\n        <ion-buttons slot=\\\"end\\\">\\r\\n            <!-- Add an empty context menu so split view pages can add items, otherwise the menu disappears in some cases. -->\\r\\n            <core-context-menu></core-context-menu>\\r\\n            <core-user-menu-button></core-user-menu-button>\\r\\n        </ion-buttons>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content>\\r\\n    <core-split-view>\\r\\n        <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!loaded\\\" (ionRefresh)=\\\"refreshData($event.target)\\\">\\r\\n            <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n        </ion-refresher>\\r\\n\\r\\n        <core-search-box (onSubmit)=\\\"searchMessage($event)\\\" (onClear)=\\\"clearSearch()\\\" [placeholder]=\\\" 'addon.messages.message' | translate\\\"\\r\\n            autocorrect=\\\"off\\\" spellcheck=\\\"false\\\" lengthCheck=\\\"2\\\" [disabled]=\\\"!loaded\\\" searchArea=\\\"AddonMessagesDiscussions\\\"\\r\\n            [autoFocus]=\\\"false\\\"></core-search-box>\\r\\n\\r\\n        <core-loading [hideUntil]=\\\"loaded\\\" [message]=\\\"loadingMessage\\\">\\r\\n\\r\\n            <ion-list class=\\\"ion-no-margin\\\">\\r\\n\\r\\n                <ion-item class=\\\"ion-text-wrap addon-message-discussion\\\" (click)=\\\"gotoContacts()\\\"\\r\\n                    [attr.aria-label]=\\\"'addon.messages.contacts' | translate\\\" detail=\\\"true\\\" button>\\r\\n                    <ion-icon name=\\\"fas-address-book\\\" slot=\\\"start\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                    <ion-label>\\r\\n                        <p class=\\\"item-heading\\\">{{ 'addon.messages.contacts' | translate }}</p>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n\\r\\n                <ng-container *ngIf=\\\"search.showResults\\\">\\r\\n                    <ion-item-divider>\\r\\n                        <ion-label>\\r\\n                            <h2>{{ 'core.searchresults' | translate }}</h2>\\r\\n                        </ion-label>\\r\\n                        <ion-note slot=\\\"end\\\" class=\\\"ion-padding-end\\\">\\r\\n                            <ion-badge>{{ search.results.length }}</ion-badge>\\r\\n                        </ion-note>\\r\\n                    </ion-item-divider>\\r\\n                    <ion-item class=\\\"ion-text-wrap addon-message-discussion\\\" *ngFor=\\\"let result of search.results\\\" button\\r\\n                        [attr.aria-label]=\\\"result.fullname\\\" (click)=\\\"gotoDiscussion(result.userid, result.messageid)\\\"\\r\\n                        [attr.aria-current]=\\\"result.userid == discussionUserId ? 'page' : 'false'\\\" detail=\\\"false\\\">\\r\\n                        <core-user-avatar [user]=\\\"result\\\" slot=\\\"start\\\" [checkOnline]=\\\"result.showonlinestatus\\\"></core-user-avatar>\\r\\n                        <ion-label>\\r\\n                            <p class=\\\"item-heading\\\">{{ result.fullname }}</p>\\r\\n                            <p>\\r\\n                                <core-format-text clean=\\\"true\\\" singleLine=\\\"true\\\" [text]=\\\"result.lastmessage\\\" contextLevel=\\\"system\\\"\\r\\n                                    [contextInstanceId]=\\\"0\\\"></core-format-text>\\r\\n                            </p>\\r\\n                        </ion-label>\\r\\n                    </ion-item>\\r\\n                </ng-container>\\r\\n                <ng-container *ngIf=\\\"!search.showResults\\\">\\r\\n                    <ion-item class=\\\"ion-text-wrap addon-message-discussion\\\" *ngFor=\\\"let discussion of discussions\\\" button\\r\\n                        [attr.aria-label]=\\\"discussion.fullname\\\" (click)=\\\"gotoDiscussion(discussion.message!.user)\\\"\\r\\n                        [attr.aria-current]=\\\"discussion.message!.user == discussionUserId ? 'page' : 'false'\\\" detail=\\\"false\\\">\\r\\n                        <core-user-avatar [user]=\\\"discussion\\\" slot=\\\"start\\\" checkOnline=\\\"false\\\"></core-user-avatar>\\r\\n                        <ion-label>\\r\\n                            <div class=\\\"flex-row ion-justify-content-between\\\">\\r\\n                                <p class=\\\"item-heading\\\">{{ discussion.fullname }}</p>\\r\\n                                <ion-note *ngIf=\\\"discussion.message!.timecreated > 0 || discussion.unread\\\">\\r\\n                                    <span *ngIf=\\\"discussion.message!.timecreated > 0\\\" class=\\\"addon-message-last-message-date\\\">\\r\\n                                        {{discussion.message!.timecreated / 1000 | coreDateDayOrTime}}\\r\\n                                    </span>\\r\\n                                    <ion-icon *ngIf=\\\"discussion.unread\\\" name=\\\"fas-circle\\\" color=\\\"primary\\\" aria-hidden=\\\"true\\\">\\r\\n                                    </ion-icon>\\r\\n                                    <span *ngIf=\\\"discussion.unread\\\" class=\\\"sr-only\\\">\\r\\n                                        {{ 'addon.messages.unreadmessages' | translate }}\\r\\n                                    </span>\\r\\n                                </ion-note>\\r\\n                            </div>\\r\\n                            <p>\\r\\n                                <core-format-text clean=\\\"true\\\" singleLine=\\\"true\\\" [text]=\\\"discussion.message!.message\\\" contextLevel=\\\"system\\\"\\r\\n                                    [contextInstanceId]=\\\"0\\\">\\r\\n                                </core-format-text>\\r\\n                            </p>\\r\\n                        </ion-label>\\r\\n                    </ion-item>\\r\\n                </ng-container>\\r\\n            </ion-list>\\r\\n\\r\\n            <core-empty-box *ngIf=\\\"(!discussions || discussions.length <= 0) && !search.showResults\\\" icon=\\\"far-comments\\\"\\r\\n                [message]=\\\"'addon.messages.nomessagesfound' | translate\\\"></core-empty-box>\\r\\n\\r\\n            <core-empty-box *ngIf=\\\"(!search.results || search.results.length <= 0) && search.showResults\\\" icon=\\\"fas-magnifying-glass\\\"\\r\\n                [message]=\\\"'core.noresults' | translate\\\"></core-empty-box>\\r\\n        </core-loading>\\r\\n    </core-split-view>\\r\\n</ion-content>\\r\\n\";","export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <ion-title>\\r\\n            <h1>{{ 'addon.messages.messages' | translate }}</h1>\\r\\n        </ion-title>\\r\\n        <ion-buttons slot=\\\"end\\\">\\r\\n            <ion-button fill=\\\"clear\\\" (click)=\\\"gotoSearch()\\\" [attr.aria-label]=\\\"'addon.messages.searchcombined' | translate\\\">\\r\\n                <ion-icon name=\\\"fas-magnifying-glass\\\" slot=\\\"icon-only\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n            </ion-button>\\r\\n            <ion-button (click)=\\\"gotoSettings()\\\" [attr.aria-label]=\\\"'addon.messages.messagepreferences' | translate\\\">\\r\\n                <ion-icon name=\\\"fas-gear\\\" slot=\\\"icon-only\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n            </ion-button>\\r\\n            <!-- Add an empty context menu so split view pages can add items, otherwise the menu disappears in some cases. -->\\r\\n            <core-context-menu></core-context-menu>\\r\\n            <core-user-menu-button></core-user-menu-button>\\r\\n        </ion-buttons>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content>\\r\\n    <core-split-view>\\r\\n        <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!loaded || !currentListEl\\\" (ionRefresh)=\\\"refreshData($event.target)\\\">\\r\\n            <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n        </ion-refresher>\\r\\n\\r\\n        <core-loading [hideUntil]=\\\"loaded\\\" [message]=\\\"loadingMessage\\\">\\r\\n            <ion-list>\\r\\n                <ion-item class=\\\"ion-text-wrap addon-message-discussion\\\" (click)=\\\"gotoContacts()\\\" detail=\\\"true\\\" button>\\r\\n                    <ion-icon name=\\\"fas-address-book\\\" slot=\\\"start\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                    <ion-label>\\r\\n                        <h2>{{ 'addon.messages.contacts' | translate }}</h2>\\r\\n                    </ion-label>\\r\\n                    <ion-badge *ngIf=\\\"contactRequestsCount > 0\\\" slot=\\\"end\\\" aria-hidden=\\\"true\\\">{{contactRequestsCount}}</ion-badge>\\r\\n                    <span *ngIf=\\\"contactRequestsCount > 0\\\" class=\\\"sr-only\\\">\\r\\n                        {{ 'addon.messages.pendingcontactrequests' | translate:{$a: contactRequestsCount} }}\\r\\n                    </span>\\r\\n                </ion-item>\\r\\n                <!-- Favourite conversations. -->\\r\\n                <ion-item button class=\\\"ion-text-wrap divider\\\" (click)=\\\"toggle(favourites)\\\" sticky=\\\"true\\\"\\r\\n                    [attr.aria-label]=\\\"(favourites.expanded ? 'core.collapse' : 'core.expand') | translate\\\"\\r\\n                    [attr.aria-expanded]=\\\"favourites.expanded\\\" aria-controls=\\\"addon-messages-groupconversations-favourite\\\" role=\\\"heading\\\"\\r\\n                    detail=\\\"false\\\">\\r\\n                    <ion-icon name=\\\"fas-chevron-right\\\" flip-rtl slot=\\\"start\\\" aria-hidden=\\\"true\\\" class=\\\"expandable-status-icon\\\"\\r\\n                        [class.expandable-status-icon-expanded]=\\\"favourites.expanded\\\">\\r\\n                    </ion-icon>\\r\\n                    <ion-label>\\r\\n                        <h2>{{ 'core.favourites' | translate }} ({{ favourites.count }})</h2>\\r\\n                    </ion-label>\\r\\n                    <ion-badge slot=\\\"end\\\" *ngIf=\\\"favourites.unread\\\" aria-hidden=\\\"true\\\">{{ favourites.unread }}</ion-badge>\\r\\n                    <span *ngIf=\\\"favourites.unread\\\" class=\\\"sr-only\\\">\\r\\n                        {{ 'addon.messages.unreadconversations' | translate:{$a: favourites.unread} }}\\r\\n                    </span>\\r\\n                </ion-item>\\r\\n                <div [hidden]=\\\"!favourites.conversations || !favourites.expanded || favourites.loading\\\" #favlist\\r\\n                    id=\\\"addon-messages-groupconversations-favourite\\\">\\r\\n                    <ng-container *ngTemplateOutlet=\\\"conversationsTemplate; context: {conversations: favourites.conversations}\\\">\\r\\n                    </ng-container>\\r\\n                    <!-- The infinite loading cannot be inside the ng-template, it fails because it doesn't find ion-content. -->\\r\\n                    <core-infinite-loading [enabled]=\\\"favourites.canLoadMore\\\" (action)=\\\"loadMoreConversations(favourites, $event)\\\"\\r\\n                        [error]=\\\"favourites.loadMoreError\\\"></core-infinite-loading>\\r\\n                    <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"favourites.conversations && favourites.conversations.length == 0\\\">\\r\\n                        <ion-label>\\r\\n                            <p>{{ 'addon.messages.nofavourites' | translate }}</p>\\r\\n                        </ion-label>\\r\\n                    </ion-item>\\r\\n                </div>\\r\\n                <ion-item class=\\\"ion-text-center\\\" *ngIf=\\\"favourites.loading\\\">\\r\\n                    <ion-label>\\r\\n                        <ion-spinner [attr.aria-label]=\\\"'core.loading' | translate\\\"></ion-spinner>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n\\r\\n                <!-- Group conversations. -->\\r\\n                <ion-item button class=\\\"divider ion-text-wrap\\\" (click)=\\\"toggle(group)\\\" sticky=\\\"true\\\"\\r\\n                    [attr.aria-label]=\\\"(group.expanded ? 'core.collapse' : 'core.expand') | translate\\\" [attr.aria-expanded]=\\\"group.expanded\\\"\\r\\n                    aria-controls=\\\"addon-messages-groupconversations-group\\\" role=\\\"heading\\\" detail=\\\"false\\\">\\r\\n                    <ion-icon name=\\\"fas-chevron-right\\\" flip-rtl slot=\\\"start\\\" aria-hidden=\\\"true\\\" class=\\\"expandable-status-icon\\\"\\r\\n                        [class.expandable-status-icon-expanded]=\\\"group.expanded\\\">\\r\\n                    </ion-icon>\\r\\n                    <ion-label>\\r\\n                        <h2>{{ 'addon.messages.groupconversations' | translate }} ({{ group.count }})</h2>\\r\\n                    </ion-label>\\r\\n                    <ion-badge slot=\\\"end\\\" *ngIf=\\\"group.unread\\\" aria-hidden=\\\"true\\\">{{ group.unread }}</ion-badge>\\r\\n                    <span *ngIf=\\\"group.unread\\\" class=\\\"sr-only\\\">\\r\\n                        {{ 'addon.messages.unreadconversations' | translate:{$a: group.unread} }}\\r\\n                    </span>\\r\\n                </ion-item>\\r\\n                <div [hidden]=\\\"!group.conversations || !group.expanded || group.loading\\\" #grouplist\\r\\n                    id=\\\"addon-messages-groupconversations-group\\\">\\r\\n                    <ng-container *ngTemplateOutlet=\\\"conversationsTemplate; context: {conversations: group.conversations}\\\">\\r\\n                    </ng-container>\\r\\n                    <!-- The infinite loading cannot be inside the ng-template, it fails because it doesn't find ion-content. -->\\r\\n                    <core-infinite-loading [enabled]=\\\"group.canLoadMore\\\" (action)=\\\"loadMoreConversations(group, $event)\\\"\\r\\n                        [error]=\\\"group.loadMoreError\\\"></core-infinite-loading>\\r\\n                    <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"group.conversations && group.conversations.length == 0\\\">\\r\\n                        <ion-label>\\r\\n                            <p>{{ 'addon.messages.nogroupconversations' | translate }}</p>\\r\\n                        </ion-label>\\r\\n                    </ion-item>\\r\\n                </div>\\r\\n                <ion-item class=\\\"ion-text-center\\\" *ngIf=\\\"group.loading\\\">\\r\\n                    <ion-label>\\r\\n                        <ion-spinner [attr.aria-label]=\\\"'core.loading' | translate\\\"></ion-spinner>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n\\r\\n                <ion-item button class=\\\"divider ion-text-wrap\\\" (click)=\\\"toggle(individual)\\\" sticky=\\\"true\\\"\\r\\n                    [attr.aria-label]=\\\"(individual.expanded ? 'core.collapse' : 'core.expand') | translate\\\"\\r\\n                    [attr.aria-expanded]=\\\"individual.expanded\\\" aria-controls=\\\"addon-messages-groupconversations-individual\\\" role=\\\"heading\\\"\\r\\n                    detail=\\\"false\\\">\\r\\n                    <ion-icon name=\\\"fas-chevron-right\\\" flip-rtl slot=\\\"start\\\" aria-hidden=\\\"true\\\" class=\\\"expandable-status-icon\\\"\\r\\n                        [class.expandable-status-icon-expanded]=\\\"individual.expanded\\\">\\r\\n                    </ion-icon>\\r\\n                    <ion-label>\\r\\n                        <h2>{{ 'addon.messages.individualconversations' | translate }} ({{ individual.count }})</h2>\\r\\n                    </ion-label>\\r\\n                    <ion-badge slot=\\\"end\\\" *ngIf=\\\"individual.unread\\\" aria-hidden=\\\"true\\\">{{ individual.unread }}</ion-badge>\\r\\n                    <span *ngIf=\\\"individual.unread\\\" class=\\\"sr-only\\\">\\r\\n                        {{ 'addon.messages.unreadconversations' | translate:{$a: individual.unread} }}\\r\\n                    </span>\\r\\n                </ion-item>\\r\\n                <div [hidden]=\\\"!individual.conversations || !individual.expanded || individual.loading\\\" #indlist\\r\\n                    id=\\\"addon-messages-groupconversations-individual\\\">\\r\\n                    <ng-container *ngTemplateOutlet=\\\"conversationsTemplate; context: {conversations: individual.conversations}\\\">\\r\\n                    </ng-container>\\r\\n                    <!-- The infinite loading cannot be inside the ng-template, it fails because it doesn't find ion-content. -->\\r\\n                    <core-infinite-loading [enabled]=\\\"individual.canLoadMore\\\" (action)=\\\"loadMoreConversations(individual, $event)\\\"\\r\\n                        [error]=\\\"individual.loadMoreError\\\"></core-infinite-loading>\\r\\n                    <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"individual.conversations && individual.conversations.length == 0\\\">\\r\\n                        <ion-label>\\r\\n                            <p>{{ 'addon.messages.noindividualconversations' | translate }}</p>\\r\\n                        </ion-label>\\r\\n                    </ion-item>\\r\\n                </div>\\r\\n                <ion-item class=\\\"ion-text-center\\\" *ngIf=\\\"individual.loading\\\">\\r\\n                    <ion-label>\\r\\n                        <ion-spinner [attr.aria-label]=\\\"'core.loading' | translate\\\"></ion-spinner>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n\\r\\n            </ion-list>\\r\\n        </core-loading>\\r\\n    </core-split-view>\\r\\n</ion-content>\\r\\n\\r\\n<!-- Template to render a list of conversations. -->\\r\\n<ng-template #conversationsTemplate let-conversations=\\\"conversations\\\">\\r\\n    <ion-item class=\\\"ion-text-wrap addon-message-discussion\\\" *ngFor=\\\"let conversation of conversations\\\" button detail=\\\"false\\\"\\r\\n        (click)=\\\"gotoConversation(conversation.id, conversation.userid)\\\"\\r\\n        [attr.aria-current]=\\\"((conversation.id &&\\r\\n            conversation.id == selectedConversationId) || (conversation.userid && conversation.userid == selectedUserId)) ? 'page': 'false'\\\"\\r\\n        id=\\\"addon-message-conversation-{{ conversation.id ? conversation.id : 'user-' + conversation.userid }}\\\"\\r\\n        [attr.aria-label]=\\\"conversation.name\\\">\\r\\n        <!-- Group conversation image. -->\\r\\n        <ion-avatar slot=\\\"start\\\" *ngIf=\\\"conversation.type == typeGroup\\\">\\r\\n            <img [src]=\\\"conversation.imageurl\\\" [alt]=\\\"conversation.name\\\" core-external-content\\r\\n                onError=\\\"this.src='assets/img/group-avatar.svg'\\\">\\r\\n        </ion-avatar>\\r\\n\\r\\n        <!-- Avatar for individual conversations. -->\\r\\n        <core-user-avatar *ngIf=\\\"conversation.type != typeGroup\\\" core-user-avatar [user]=\\\"conversation.otherUser\\\" [linkProfile]=\\\"false\\\"\\r\\n            [checkOnline]=\\\"conversation.showonlinestatus\\\" slot=\\\"start\\\"></core-user-avatar>\\r\\n\\r\\n        <ion-label>\\r\\n            <div class=\\\"flex-row ion-justify-content-between\\\">\\r\\n                <p class=\\\"item-heading\\\">\\r\\n                    <core-format-text [text]=\\\"conversation.name\\\" contextLevel=\\\"system\\\" [contextInstanceId]=\\\"0\\\"></core-format-text>\\r\\n                    <ion-icon name=\\\"fas-user-slash\\\" *ngIf=\\\"conversation.isblocked\\\" [title]=\\\"'addon.messages.contactblocked' | translate\\\">\\r\\n                    </ion-icon>\\r\\n                    <ion-icon *ngIf=\\\"conversation.ismuted\\\" name=\\\"fas-volume-xmark\\\" [title]=\\\"'addon.messages.mutedconversation' | translate\\\">\\r\\n                    </ion-icon>\\r\\n                </p>\\r\\n                <ion-note *ngIf=\\\"conversation.lastmessagedate > 0 || conversation.unreadcount\\\">\\r\\n                    <span *ngIf=\\\"conversation.lastmessagedate > 0\\\" class=\\\"addon-message-last-message-date\\\">\\r\\n                        {{conversation.lastmessagedate | coreDateDayOrTime}}\\r\\n                    </span>\\r\\n                    <ion-badge *ngIf=\\\"conversation.unreadcount > 0\\\" aria-label=\\\"true\\\">{{ conversation.unreadcount }}</ion-badge>\\r\\n                    <span *ngIf=\\\"conversation.unreadcount > 0\\\" class=\\\"sr-only\\\">\\r\\n                        {{ 'addon.messages.unreadmessages' | translate:{$a: conversation.unreadcount} }}\\r\\n                    </span>\\r\\n                </ion-note>\\r\\n            </div>\\r\\n            <p *ngIf=\\\"conversation.subname\\\">\\r\\n                <core-format-text [text]=\\\"conversation.subname\\\" contextLevel=\\\"system\\\" [contextInstanceId]=\\\"0\\\"></core-format-text>\\r\\n            </p>\\r\\n            <p class=\\\"addon-message-last-message\\\">\\r\\n                <span *ngIf=\\\"conversation.sentfromcurrentuser\\\" class=\\\"addon-message-last-message-user\\\">\\r\\n                    {{ 'addon.messages.you' | translate }}\\r\\n                </span>\\r\\n                <span *ngIf=\\\"!conversation.sentfromcurrentuser && conversation.type == typeGroup && conversation.members[0]\\\"\\r\\n                    class=\\\"addon-message-last-message-user\\\">{{ conversation.members[0].fullname + ':' }}</span>\\r\\n                <core-format-text clean=\\\"true\\\" singleLine=\\\"true\\\" [text]=\\\"conversation.lastmessage\\\" class=\\\"addon-message-last-message-text\\\"\\r\\n                    contextLevel=\\\"system\\\" [contextInstanceId]=\\\"0\\\"></core-format-text>\\r\\n            </p>\\r\\n        </ion-label>\\r\\n    </ion-item>\\r\\n</ng-template>\\r\\n\";","export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <ion-title>\\r\\n            <h1>{{ 'addon.messages.searchcombined' | translate }}</h1>\\r\\n        </ion-title>\\r\\n        <ion-buttons slot=\\\"end\\\">\\r\\n            <!-- Add an empty context menu so split view pages can add items, otherwise the menu disappears in some cases. -->\\r\\n            <core-context-menu></core-context-menu>\\r\\n        </ion-buttons>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content>\\r\\n    <core-split-view>\\r\\n        <core-search-box (onSubmit)=\\\"search($event)\\\" (onClear)=\\\"clearSearch()\\\" [disabled]=\\\"disableSearch\\\" autocorrect=\\\"off\\\"\\r\\n            [spellcheck]=\\\"false\\\" [autoFocus]=\\\"true\\\" [lengthCheck]=\\\"1\\\" searchArea=\\\"AddonMessagesSearch\\\"></core-search-box>\\r\\n\\r\\n        <core-loading [hideUntil]=\\\"!displaySearching\\\" [message]=\\\"'core.searching' | translate\\\">\\r\\n            <ion-list *ngIf=\\\"displayResults\\\">\\r\\n                <ng-container *ngTemplateOutlet=\\\"resultsTemplate; context: {item: contacts}\\\"></ng-container>\\r\\n                <ng-container *ngTemplateOutlet=\\\"resultsTemplate; context: {item: nonContacts}\\\"></ng-container>\\r\\n                <ng-container *ngTemplateOutlet=\\\"resultsTemplate; context: {item: messages}\\\"></ng-container>\\r\\n                <!-- The infinite loading cannot be inside the ng-template, it fails because it doesn't find ion-content. -->\\r\\n                <core-infinite-loading [enabled]=\\\"messages.canLoadMore\\\" (action)=\\\"search(query, 'messages', $event)\\\"\\r\\n                    [error]=\\\"messages.loadMoreError\\\"></core-infinite-loading>\\r\\n            </ion-list>\\r\\n\\r\\n            <core-empty-box *ngIf=\\\"displayResults && !contacts.results.length && !nonContacts.results.length && !messages.results.length\\\"\\r\\n                icon=\\\"fas-magnifying-glass\\\" [message]=\\\"'core.noresults' | translate\\\">\\r\\n            </core-empty-box>\\r\\n        </core-loading>\\r\\n    </core-split-view>\\r\\n</ion-content>\\r\\n\\r\\n<!-- Template to render a list of results -->\\r\\n<ng-template #resultsTemplate let-item=\\\"item\\\">\\r\\n    <ng-container *ngIf=\\\"item.results.length > 0\\\">\\r\\n        <ion-item-divider class=\\\"ion-text-wrap\\\">\\r\\n            <ion-label>\\r\\n                <h2>{{ item.titleString | translate }}</h2>\\r\\n            </ion-label>\\r\\n        </ion-item-divider>\\r\\n\\r\\n        <!-- List of results -->\\r\\n        <ion-item class=\\\"addon-message-discussion ion-text-wrap\\\" *ngFor=\\\"let result of item.results\\\" [attr.aria-label]=\\\"result.fullname\\\"\\r\\n            (click)=\\\"openConversation(result)\\\" [attr.aria-current]=\\\"result == selectedResult ? 'page' : 'false'\\\" detail=\\\"true\\\" button>\\r\\n            <core-user-avatar slot=\\\"start\\\" [user]=\\\"result\\\" [checkOnline]=\\\"true\\\" [linkProfile]=\\\"false\\\"></core-user-avatar>\\r\\n            <ion-label>\\r\\n                <p class=\\\"item-heading\\\">\\r\\n                    <core-format-text [text]=\\\"result.fullname\\\" [highlight]=\\\"result.highlightName\\\" [filter]=\\\"false\\\">\\r\\n                    </core-format-text>\\r\\n                    <ion-icon name=\\\"fas-ban\\\" *ngIf=\\\"result.isblocked\\\" [attr.aria-label]=\\\"'addon.messages.contactblocked' | translate\\\">\\r\\n                    </ion-icon>\\r\\n                </p>\\r\\n                <ion-note *ngIf=\\\"result.lastmessagedate > 0\\\">\\r\\n                    {{result.lastmessagedate | coreDateDayOrTime}}\\r\\n                </ion-note>\\r\\n                <p class=\\\"addon-message-last-message\\\">\\r\\n                    <span *ngIf=\\\"result.sentfromcurrentuser\\\" class=\\\"addon-message-last-message-user\\\">\\r\\n                        {{ 'addon.messages.you' | translate }}\\r\\n                    </span>\\r\\n                    <core-format-text clean=\\\"true\\\" singleLine=\\\"true\\\" [text]=\\\"result.lastmessage\\\" [highlight]=\\\"result.highlightMessage\\\"\\r\\n                        contextLevel=\\\"system\\\" [contextInstanceId]=\\\"0\\\" class=\\\"addon-message-last-message-text\\\"></core-format-text>\\r\\n                </p>\\r\\n            </ion-label>\\r\\n        </ion-item>\\r\\n\\r\\n        <!-- Load more button for contacts and non-contacts -->\\r\\n        <ng-container *ngIf=\\\"item.type != 'messages'\\\">\\r\\n            <div class=\\\"ion-padding-horizontal\\\" *ngIf=\\\"item.canLoadMore && !item.loadingMore\\\">\\r\\n                <ion-button expand=\\\"block\\\" fill=\\\"outline\\\" (click)=\\\"search(query, item.type)\\\">\\r\\n                    {{ 'core.loadmore' | translate }}\\r\\n                </ion-button>\\r\\n            </div>\\r\\n            <div *ngIf=\\\"item.loadingMore\\\" class=\\\"ion-padding ion-text-center\\\">\\r\\n                <ion-spinner [attr.aria-label]=\\\"'core.loading' | translate\\\"></ion-spinner>\\r\\n            </div>\\r\\n        </ng-container>\\r\\n    </ng-container>\\r\\n</ng-template>\\r\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, UrlTree } from '@angular/router';\nimport { Router } from '@singletons';\nimport { AddonMessagesMainMenuHandlerService } from '../services/handlers/mainmenu';\nimport { AddonMessages } from '../services/messages';\n\n/**\n * Guard to redirect to the right page based on the current Moodle site version.\n */\n@Injectable({ providedIn: 'root' })\nexport class AddonMessagesIndexGuard implements CanActivate {\n\n    /**\n     * @inheritdoc\n     */\n    canActivate(route: ActivatedRouteSnapshot): UrlTree {\n        return this.guard(route);\n    }\n\n    /**\n     * Check if there is a pending redirect and trigger it.\n     *\n     * @returns The redirection route.\n     */\n    private guard(route: ActivatedRouteSnapshot): UrlTree {\n        const enabled = AddonMessages.isGroupMessagingEnabled();\n        const path = `/main/${AddonMessagesMainMenuHandlerService.PAGE_NAME}/` + ( enabled ? 'group-conversations' : 'index');\n\n        const newRoute = Router.parseUrl(path);\n\n        newRoute.queryParams = route.queryParams;\n\n        return newRoute;\n    }\n\n}\n","export default \"/**\\n * App Global variables SCSS\\n * ----------------------------------------------------------------------------\\n * Place here the different files you should import to use global variables.\\n */\\n/**\\n * Imported ionic string functions for SCSS\\n * ----------------------------------------------------------------------------\\n * Extracted from\\n * https://github.com/ionic-team/ionic-framework/blob/master/core/src/themes/ionic.functions.string.scss\\n */\\n/**\\n * Imported ionic color functions for SCSS\\n * ----------------------------------------------------------------------------\\n * Extracted from\\n * https://github.com/ionic-team/ionic-framework/blob/master/core/src/themes/ionic.functions.color.scss\\n */\\n/**\\n * Imported ionic mixins for SCSS\\n * ----------------------------------------------------------------------------\\n * Extracted from\\n * https://github.com/ionic-team/ionic-framework/blob/master/core/src/themes/ionic.mixins.scss\\n */\\n/**\\n * Imported ionic mixins for SCSS from different components\\n * ----------------------------------------------------------------------------\\n * Extracted from\\n * https://github.com/ionic-team/ionic-framework/blob/master/core/src/components/grid/grid.mixins.scss\\n * https://github.com/ionic-team/ionic-framework/blob/master/core/src/components/item/item.mixins.scss\\n */\\n/**\\n * App custom mixins for SCSS\\n * ----------------------------------------------------------------------------\\n * Place here our custom mixins.\\n */\\n/**\\n * Same as item-push-svg-url but admits flip-rtl\\n */\\n/*\\n * App Custom App variables SCSS\\n * ----------------------------------------------------------------------------\\n * Place here all custom app variables.\\n */\\n/*\\n * App Global variables SCSS\\n * ----------------------------------------------------------------------------\\n * Place here all global variables.\\n */\\n/**\\n * Layout Breakpoints\\n *\\n * https://ionicframework.com/docs/layout/grid#default-breakpoints\\n */\\n:host .addon-messages-conversation-item ion-label,\\n:host .addon-message-discussion ion-label {\\n  margin-right: 0;\\n  margin-left: 0;\\n}\\n:host .addon-messages-conversation-item .item-heading core-format-text,\\n:host .addon-message-discussion .item-heading core-format-text {\\n  font-weight: bold;\\n}\\n:host .addon-messages-conversation-item .item-heading ion-icon,\\n:host .addon-message-discussion .item-heading ion-icon {\\n  margin-left: 2px;\\n}\\n@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0) {\\n  :host .addon-messages-conversation-item .item-heading ion-icon,\\n:host .addon-message-discussion .item-heading ion-icon {\\n    margin-left: unset;\\n    -webkit-margin-start: 2px;\\n    margin-inline-start: 2px;\\n  }\\n}\\n:host .addon-messages-conversation-item ion-note,\\n:host .addon-message-discussion ion-note {\\n  display: flex;\\n  flex-direction: column;\\n  align-self: flex-start;\\n  margin-left: 2px;\\n}\\n@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0) {\\n  :host .addon-messages-conversation-item ion-note,\\n:host .addon-message-discussion ion-note {\\n    margin-left: unset;\\n    -webkit-margin-start: 2px;\\n    margin-inline-start: 2px;\\n  }\\n}\\n:host .addon-messages-conversation-item ion-note ion-badge, :host .addon-messages-conversation-item ion-note ion-icon,\\n:host .addon-message-discussion ion-note ion-badge,\\n:host .addon-message-discussion ion-note ion-icon {\\n  margin-top: 3px;\\n  align-self: flex-end;\\n}\\n:host .addon-messages-conversation-item ion-note .addon-message-last-message-date,\\n:host .addon-message-discussion ion-note .addon-message-last-message-date {\\n  white-space: nowrap;\\n  font-size: 11px;\\n}\\n:host .addon-messages-conversation-item .addon-message-last-message,\\n:host .addon-message-discussion .addon-message-last-message {\\n  display: flex;\\n  justify-content: flex-start;\\n}\\n:host .addon-messages-conversation-item .addon-message-last-message-user,\\n:host .addon-message-discussion .addon-message-last-message-user {\\n  white-space: nowrap;\\n  color: var(--ion-text-color);\\n  margin-right: 2px;\\n}\\n@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0) {\\n  :host .addon-messages-conversation-item .addon-message-last-message-user,\\n:host .addon-message-discussion .addon-message-last-message-user {\\n    margin-right: unset;\\n    -webkit-margin-end: 2px;\\n    margin-inline-end: 2px;\\n  }\\n}\\n:host .addon-messages-conversation-item .addon-message-last-message-text,\\n:host .addon-message-discussion .addon-message-last-message-text {\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  white-space: nowrap;\\n  flex-shrink: 1;\\n}\\n:host .addon-message-discussion .item-heading {\\n  margin-top: 10px;\\n}\\n:host ion-item-divider ion-badge {\\n  margin-left: 16px;\\n  margin-right: 16px;\\n}\\n/*# sourceMappingURL=data:application/json;base64, */\";","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { conditionalRoutes } from '@/app/app-routing.module';\nimport { CoreSharedModule } from '@/core/shared.module';\nimport { AddonMessagesContacts35Page } from '@addons/messages/pages/contacts-35/contacts';\nimport { AddonMessagesContactsPage } from '@addons/messages/pages/contacts/contacts';\nimport { AddonMessagesDiscussionPage } from '@addons/messages/pages/discussion/discussion';\nimport { AddonMessagesDiscussions35Page } from '@addons/messages/pages/discussions-35/discussions';\nimport { AddonMessagesGroupConversationsPage } from '@addons/messages/pages/group-conversations/group-conversations';\nimport { AddonMessagesSearchPage } from '@addons/messages/pages/search/search';\nimport { AddonMessagesMainMenuHandlerService } from '@addons/messages/services/handlers/mainmenu';\nimport { Injector, NgModule } from '@angular/core';\nimport { Route, RouterModule, ROUTES, Routes } from '@angular/router';\nimport { CoreMainMenuComponentsModule } from '@features/mainmenu/components/components.module';\n\nimport { buildTabMainRoutes } from '@features/mainmenu/mainmenu-tab-routing.module';\nimport { CoreSearchComponentsModule } from '@features/search/components/components.module';\nimport { CoreScreen } from '@services/screen';\nimport { AddonMessagesIndexGuard } from './guards';\n\n/**\n * Build module routes.\n *\n * @param injector Injector.\n * @returns Routes.\n */\nfunction buildRoutes(injector: Injector): Routes {\n    const discussionRoutes: Route[] = [\n        {\n            path: 'discussion/user/:userId',\n            component: AddonMessagesDiscussionPage,\n        },\n        {\n            path: 'discussion/:conversationId',\n            component: AddonMessagesDiscussionPage,\n        },\n    ];\n\n    const mobileRoutes: Routes = [\n        {\n            path: 'contacts', // 3.6 or greater.\n            component: AddonMessagesContactsPage,\n        },\n        {\n            path: 'index',\n            data: { mainMenuTabRoot: AddonMessagesMainMenuHandlerService.PAGE_NAME },\n            component: AddonMessagesDiscussions35Page,\n        },\n        {\n            path: 'contacts-35', // 3.5.\n            component: AddonMessagesContacts35Page,\n        },\n        {\n            path: 'group-conversations', // 3.6 or greater.\n            data: { mainMenuTabRoot: AddonMessagesMainMenuHandlerService.PAGE_NAME },\n            component: AddonMessagesGroupConversationsPage,\n        },\n        {\n            path: 'search',\n            component: AddonMessagesSearchPage,\n        },\n    ]\n        .reduce((routes, mobileRoute) => [\n            ...routes,\n            mobileRoute,\n            ...discussionRoutes.map(discussionRoute => ({\n                ...discussionRoute,\n                path: `${mobileRoute.path}/${discussionRoute.path}`,\n            })),\n        ], []);\n\n    const tabletRoutes: Routes = [\n        {\n            path: 'contacts', // 3.6 or greater.\n            component: AddonMessagesContactsPage,\n            children: discussionRoutes,\n        },\n        {\n            path: 'index',\n            data: { mainMenuTabRoot: AddonMessagesMainMenuHandlerService.PAGE_NAME },\n            component: AddonMessagesDiscussions35Page,\n            children: discussionRoutes,\n        },\n        {\n            path: 'contacts-35', // 3.5.\n            component: AddonMessagesContacts35Page,\n            children: discussionRoutes,\n        },\n        {\n            path: 'group-conversations', // 3.6 or greater.\n            data: { mainMenuTabRoot: AddonMessagesMainMenuHandlerService.PAGE_NAME },\n            component: AddonMessagesGroupConversationsPage,\n            children: discussionRoutes,\n        },\n        {\n            path: 'search',\n            component: AddonMessagesSearchPage,\n            children: discussionRoutes,\n        },\n    ];\n\n    return [\n        ...conditionalRoutes(mobileRoutes, () => CoreScreen.isMobile),\n        ...conditionalRoutes(tabletRoutes, () => CoreScreen.isTablet),\n        ...discussionRoutes,\n        {\n            path: 'message-settings',\n            loadChildren: () => import('./messages-settings-lazy.module').then(m => m.AddonMessagesSettingsLazyModule),\n        },\n        ...buildTabMainRoutes(injector, {\n            canActivate: [AddonMessagesIndexGuard],\n        }),\n    ];\n}\n\n@NgModule({\n    imports: [\n        CoreSharedModule,\n        CoreSearchComponentsModule,\n        CoreMainMenuComponentsModule,\n    ],\n    declarations: [\n        AddonMessagesContacts35Page,\n        AddonMessagesContactsPage,\n        AddonMessagesDiscussionPage,\n        AddonMessagesDiscussions35Page,\n        AddonMessagesGroupConversationsPage,\n        AddonMessagesSearchPage,\n    ],\n    exports: [RouterModule],\n    providers: [\n        {\n            provide: ROUTES,\n            multi: true,\n            deps: [Injector],\n            useFactory: buildRoutes,\n        },\n    ],\n})\nexport class AddonMessagesLazyModule {}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { IonRefresher } from '@ionic/angular';\nimport { CoreSites } from '@services/sites';\nimport {\n    AddonMessagesProvider,\n    AddonMessagesGetContactsWSResponse,\n    AddonMessagesSearchContactsContact,\n    AddonMessagesGetContactsContact,\n    AddonMessages,\n} from '../../services/messages';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreApp } from '@services/app';\nimport { CoreEventObserver, CoreEvents } from '@singletons/events';\nimport { ActivatedRoute } from '@angular/router';\nimport { Translate } from '@singletons';\nimport { CoreScreen } from '@services/screen';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreSplitViewComponent } from '@components/split-view/split-view';\n\n/**\n * Page that displays the list of contacts.\n */\n@Component({\n    selector: 'addon-messages-contacts',\n    templateUrl: 'contacts.html',\n    styleUrls: ['../../messages-common.scss'],\n})\nexport class AddonMessagesContacts35Page implements OnInit, OnDestroy {\n\n    @ViewChild(CoreSplitViewComponent) splitView!: CoreSplitViewComponent;\n\n    protected searchingMessages: string;\n    protected loadingMessages: string;\n    protected siteId: string;\n    protected noSearchTypes = ['online', 'offline', 'blocked', 'strangers'];\n    protected memberInfoObserver: CoreEventObserver;\n\n    loaded = false;\n    discussionUserId?: number;\n    contactTypes = ['online', 'offline', 'blocked', 'strangers'];\n    searchType = 'search';\n    loadingMessage = '';\n    hasContacts = false;\n    contacts: AddonMessagesGetContactsFormatted = {\n        online: [],\n        offline: [],\n        strangers: [],\n        search: [],\n    };\n\n    searchString = '';\n\n    constructor(\n        protected route: ActivatedRoute,\n    ) {\n        this.siteId = CoreSites.getCurrentSiteId();\n        this.searchingMessages = Translate.instant('core.searching');\n        this.loadingMessages = Translate.instant('core.loading');\n        this.loadingMessage = this.loadingMessages;\n\n        // Refresh the list when a contact request is confirmed.\n        this.memberInfoObserver = CoreEvents.on(\n            AddonMessagesProvider.MEMBER_INFO_CHANGED_EVENT,\n            (data) => {\n                if (data.contactRequestConfirmed) {\n                    this.refreshData();\n                }\n            },\n            CoreSites.getCurrentSiteId(),\n        );\n    }\n\n    /**\n     * Component loaded.\n     */\n    async ngOnInit(): Promise<void> {\n        const discussionUserId = CoreNavigator.getRouteNumberParam('discussionUserId') ||\n            CoreNavigator.getRouteNumberParam('userId') || undefined;\n\n        if (this.loaded && this.discussionUserId == discussionUserId) {\n            return;\n        }\n\n        this.discussionUserId = discussionUserId;\n\n        if (this.discussionUserId) {\n            // There is a discussion to load, open the discussion in a new state.\n            this.gotoDiscussion(this.discussionUserId);\n        }\n\n        try {\n            await this.fetchData();\n            if (!this.discussionUserId && this.hasContacts && CoreScreen.isTablet) {\n                let contact: AddonMessagesGetContactsContact | undefined;\n                for (const x in this.contacts) {\n                    if (this.contacts[x].length > 0) {\n                        contact = this.contacts[x][0];\n                        break;\n                    }\n                }\n\n                if (contact) {\n                    // Take first and load it.\n                    this.gotoDiscussion(contact.id);\n                }\n            }\n        } finally {\n            this.loaded = true;\n        }\n    }\n\n    /**\n     * Refresh the data.\n     *\n     * @param refresher Refresher.\n     * @returns Promise resolved when done.\n     */\n    async refreshData(refresher?: IonRefresher): Promise<void> {\n        try {\n            if (this.searchString) {\n                // User has searched, update the search.\n                await this.performSearch(this.searchString);\n            } else {\n                // Update contacts.\n                await AddonMessages.invalidateAllContactsCache();\n                await this.fetchData();\n            }\n        } finally {\n            refresher?.complete();\n        }\n    }\n\n    /**\n     * Fetch contacts.\n     *\n     * @returns Promise resolved when done.\n     */\n    protected async fetchData(): Promise<void> {\n        this.loadingMessage = this.loadingMessages;\n\n        try {\n            const contacts = await AddonMessages.getAllContacts();\n            for (const x in contacts) {\n                if (contacts[x].length > 0) {\n                    this.contacts[x] = this.sortUsers(contacts[x]);\n                } else {\n                    this.contacts[x] = [];\n                }\n            }\n\n            this.clearSearch();\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'addon.messages.errorwhileretrievingcontacts', true);\n        }\n    }\n\n    /**\n     * Sort user list by fullname\n     *\n     * @param list List to sort.\n     * @returns Sorted list.\n     */\n    protected sortUsers(list: AddonMessagesSearchContactsContact[]): AddonMessagesSearchContactsContact[] {\n        return list.sort((a, b) => {\n            const compareA = a.fullname.toLowerCase();\n            const compareB = b.fullname.toLowerCase();\n\n            return compareA.localeCompare(compareB);\n        });\n    }\n\n    /**\n     * Clear search and show all contacts again.\n     */\n    clearSearch(): void {\n        this.searchString = ''; // Reset searched string.\n        this.contactTypes = this.noSearchTypes;\n\n        this.hasContacts = false;\n        for (const x in this.contacts) {\n            if (this.contacts[x].length > 0) {\n                this.hasContacts = true;\n\n                return;\n            }\n        }\n    }\n\n    /**\n     * Search users from the UI.\n     *\n     * @param query Text to search for.\n     * @returns Resolved when done.\n     */\n    search(query: string): Promise<void> {\n        CoreApp.closeKeyboard();\n\n        this.loaded = false;\n        this.loadingMessage = this.searchingMessages;\n\n        return this.performSearch(query).finally(() => {\n            this.loaded = true;\n        });\n    }\n\n    /**\n     * Perform the search of users.\n     *\n     * @param query Text to search for.\n     * @returns Resolved when done.\n     */\n    protected async performSearch(query: string): Promise<void> {\n        try {\n            const result = await AddonMessages.searchContacts(query);\n            this.hasContacts = result.length > 0;\n            this.searchString = query;\n            this.contactTypes = ['search'];\n\n            this.contacts.search = this.sortUsers(result);\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'addon.messages.errorwhileretrievingcontacts', true);\n        }\n    }\n\n    /**\n     * Navigate to a particular discussion.\n     *\n     * @param discussionUserId Discussion Id to load.\n     */\n    gotoDiscussion(discussionUserId: number): void {\n        this.discussionUserId = discussionUserId;\n\n        const path = CoreNavigator.getRelativePathToParent('/messages/contacts-35') + `discussion/user/${discussionUserId}`;\n\n        // @todo Check why this is failing on ngInit.\n        CoreNavigator.navigate(path, {\n            reset: CoreScreen.isTablet && !!this.splitView && !this.splitView.isNested,\n        });\n    }\n\n    /**\n     * Component destroyed.\n     */\n    ngOnDestroy(): void {\n        this.memberInfoObserver?.off();\n    }\n\n}\n\n/**\n * Contacts with some calculated data.\n */\nexport type AddonMessagesGetContactsFormatted = AddonMessagesGetContactsWSResponse & {\n    search?: AddonMessagesSearchContactsContact[]; // Calculated in the app. Result of searching users.\n};\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { CoreEventObserver, CoreEvents } from '@singletons/events';\nimport { CoreSites } from '@services/sites';\nimport {\n    AddonMessages,\n    AddonMessagesConversationMember,\n    AddonMessagesProvider,\n} from '../../services/messages';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreScreen } from '@services/screen';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { IonRefresher } from '@ionic/angular';\nimport { CoreSplitViewComponent } from '@components/split-view/split-view';\n\n/**\n * Page that displays contacts and contact requests.\n */\n@Component({\n    selector: 'page-addon-messages-contacts',\n    templateUrl: 'contacts.html',\n    styleUrls: [\n        '../../messages-common.scss',\n    ],\n})\nexport class AddonMessagesContactsPage implements OnInit, OnDestroy {\n\n    @ViewChild(CoreSplitViewComponent) splitView!: CoreSplitViewComponent;\n\n    selected: 'confirmed' | 'requests' = 'confirmed';\n    requestsBadge = '';\n    selectedUserId?: number; // User id of the conversation opened in the split view.\n\n    confirmedLoaded = false;\n    confirmedInitialising = false;\n    confirmedCanLoadMore = false;\n    confirmedLoadMoreError = false;\n    confirmedContacts: AddonMessagesConversationMember[] = [];\n\n    requestsLoaded = false;\n    requestsInitialising = false;\n    requestsCanLoadMore = false;\n    requestsLoadMoreError = false;\n    requests: AddonMessagesConversationMember[] = [];\n\n    protected siteId: string;\n    protected contactRequestsCountObserver: CoreEventObserver;\n    protected memberInfoObserver: CoreEventObserver;\n\n    constructor() {\n\n        this.siteId = CoreSites.getCurrentSiteId();\n\n        // Update the contact requests badge.\n        this.contactRequestsCountObserver = CoreEvents.on(\n            AddonMessagesProvider.CONTACT_REQUESTS_COUNT_EVENT,\n            (data) => {\n                this.requestsBadge = data.count > 0 ? String(data.count) : '';\n            },\n            this.siteId,\n        );\n\n        // Update block status of a user.\n        this.memberInfoObserver = CoreEvents.on(\n            AddonMessagesProvider.MEMBER_INFO_CHANGED_EVENT,\n            (data) => {\n                if (data.userBlocked || data.userUnblocked) {\n                    const user = this.confirmedContacts.find((user) => user.id == data.userId);\n                    if (user) {\n                        user.isblocked = !!data.userBlocked;\n                    }\n                } else if (data.contactRemoved) {\n                    const index = this.confirmedContacts.findIndex((contact) => contact.id == data.userId);\n                    if (index >= 0) {\n                        this.confirmedContacts.splice(index, 1);\n                    }\n                } else if (data.contactRequestConfirmed) {\n                    this.confirmedFetchData(true);\n                }\n\n                if (data.contactRequestConfirmed || data.contactRequestDeclined) {\n                    const index = this.requests.findIndex((request) => request.id == data.userId);\n                    if (index >= 0) {\n                        this.requests.splice(index, 1);\n                    }\n                }\n            },\n            CoreSites.getCurrentSiteId(),\n        );\n\n    }\n\n    /**\n     * Page being initialized.\n     */\n    async ngOnInit(): Promise<void> {\n        AddonMessages.getContactRequestsCount(this.siteId); // Badge already updated by the observer.\n\n        this.selected === 'confirmed'\n            ? await this.initConfirmed()\n            : await this.initRequests();\n    }\n\n    /**\n     * Initialise confirmed contacts.\n     */\n    async initConfirmed(): Promise<void> {\n        if (this.confirmedInitialising) {\n            return;\n        }\n\n        try {\n            this.confirmedInitialising = true;\n\n            await this.confirmedFetchData();\n\n            if (this.confirmedContacts.length && CoreScreen.isTablet) {\n                this.selectUser(this.confirmedContacts[0].id, true);\n            }\n        } finally {\n            this.confirmedInitialising = false;\n            this.confirmedLoaded = true;\n        }\n    }\n\n    /**\n     * Initialise contact requests.\n     */\n    async initRequests(): Promise<void> {\n        if (this.requestsInitialising) {\n            return;\n        }\n\n        try {\n            this.requestsInitialising = true;\n\n            await this.requestsFetchData();\n\n            if (this.requests.length && CoreScreen.isTablet) {\n                this.selectUser(this.requests[0].id, true);\n            }\n        } finally {\n            this.requestsInitialising = false;\n            this.requestsLoaded = true;\n        }\n    }\n\n    /**\n     * Fetch contacts.\n     *\n     * @param refresh True if we are refreshing contacts, false if we are loading more.\n     * @returns Promise resolved when done.\n     */\n    async confirmedFetchData(refresh: boolean = false): Promise<void> {\n        this.confirmedLoadMoreError = false;\n\n        const limitFrom = refresh ? 0 : this.confirmedContacts.length;\n\n        if (limitFrom === 0) {\n            // Always try to get latest data from server.\n            await AddonMessages.invalidateUserContacts();\n        }\n\n        try {\n            const result = await AddonMessages.getUserContacts(limitFrom);\n            this.confirmedContacts = refresh ? result.contacts : this.confirmedContacts.concat(result.contacts);\n            this.confirmedCanLoadMore = result.canLoadMore;\n        } catch (error) {\n            this.confirmedLoadMoreError = true;\n            CoreDomUtils.showErrorModalDefault(error, 'addon.messages.errorwhileretrievingcontacts', true);\n        }\n    }\n\n    /**\n     * Fetch contact requests.\n     *\n     * @param refresh True if we are refreshing contact requests, false if we are loading more.\n     * @returns Promise resolved when done.\n     */\n    async requestsFetchData(refresh: boolean = false): Promise<void> {\n        this.requestsLoadMoreError = false;\n\n        const limitFrom = refresh ? 0 : this.requests.length;\n\n        if (limitFrom === 0) {\n            // Always try to get latest data from server.\n            await AddonMessages.invalidateContactRequestsCache();\n        }\n\n        try {\n            const result = await AddonMessages.getContactRequests(limitFrom);\n            this.requests = refresh ? result.requests : this.requests.concat(result.requests);\n            this.requestsCanLoadMore = result.canLoadMore;\n        } catch (error) {\n            this.requestsLoadMoreError = true;\n            CoreDomUtils.showErrorModalDefault(error, 'addon.messages.errorwhileretrievingcontacts', true);\n        }\n    }\n\n    /**\n     * Refresh contacts or requests.\n     *\n     * @param refresher Refresher.\n     * @returns Promise resolved when done.\n     */\n    async refreshData(refresher?: IonRefresher): Promise<void> {\n        try {\n            if (this.selected == 'confirmed') {\n                // No need to invalidate contacts, we always try to get the latest.\n                await this.confirmedFetchData(true);\n            } else {\n                // Refresh the number of contacts requests to update badges.\n                AddonMessages.refreshContactRequestsCount();\n\n                // No need to invalidate contact requests, we always try to get the latest.\n                await this.requestsFetchData(true);\n            }\n        } finally {\n            refresher?.complete();\n        }\n    }\n\n    /**\n     * Load more contacts or requests.\n     *\n     * @param infiniteComplete Infinite scroll complete function. Only used from core-infinite-loading.\n     * @returns Resolved when done.\n     */\n    async loadMore(infiniteComplete?: () => void): Promise<void> {\n        try {\n            if (this.selected == 'confirmed') {\n                // No need to invalidate contacts, we always try to get the latest.\n                await this.confirmedFetchData();\n            } else {\n                await this.requestsFetchData();\n            }\n        } finally {\n            infiniteComplete && infiniteComplete();\n        }\n    }\n\n    /**\n     * Navigate to the search page.\n     */\n    gotoSearch(): void {\n        CoreNavigator.navigateToSitePath('search');\n    }\n\n    selectTab(selected: string): void {\n        if (selected !== 'confirmed' && selected !== 'requests') {\n            return;\n        }\n\n        this.selected = selected;\n\n        if (this.selected == 'confirmed' && !this.confirmedLoaded) {\n            this.initConfirmed();\n        }\n\n        if (this.selected == 'requests' && !this.requestsLoaded) {\n            this.initRequests();\n        }\n    }\n\n    /**\n     * Set the selected user and open the conversation in the split view if needed.\n     *\n     * @param userId Id of the selected user, undefined to use the last selected user in the tab.\n     * @param onInit Whether the contact was selected on initial load.\n     */\n    selectUser(userId: number, onInit = false): void {\n        if (userId == this.selectedUserId && CoreScreen.isTablet) {\n            // No user conversation to open or it is already opened.\n            return;\n        }\n\n        if (onInit && CoreScreen.isMobile) {\n            // Do not open a conversation by default when split view is not visible.\n            return;\n        }\n\n        this.selectedUserId = userId;\n\n        const path = CoreNavigator.getRelativePathToParent('/messages/contacts') + `discussion/user/${userId}`;\n        CoreNavigator.navigate(path, {\n            reset: CoreScreen.isTablet && !!this.splitView && !this.splitView.isNested,\n        });\n    }\n\n    /**\n     * Page destroyed.\n     */\n    ngOnDestroy(): void {\n        this.contactRequestsCountObserver?.off();\n    }\n\n}\n","export default \"/**\\n * App Global variables SCSS\\n * ----------------------------------------------------------------------------\\n * Place here the different files you should import to use global variables.\\n */\\n/**\\n * Imported ionic string functions for SCSS\\n * ----------------------------------------------------------------------------\\n * Extracted from\\n * https://github.com/ionic-team/ionic-framework/blob/master/core/src/themes/ionic.functions.string.scss\\n */\\n/**\\n * Imported ionic color functions for SCSS\\n * ----------------------------------------------------------------------------\\n * Extracted from\\n * https://github.com/ionic-team/ionic-framework/blob/master/core/src/themes/ionic.functions.color.scss\\n */\\n/**\\n * Imported ionic mixins for SCSS\\n * ----------------------------------------------------------------------------\\n * Extracted from\\n * https://github.com/ionic-team/ionic-framework/blob/master/core/src/themes/ionic.mixins.scss\\n */\\n/**\\n * Imported ionic mixins for SCSS from different components\\n * ----------------------------------------------------------------------------\\n * Extracted from\\n * https://github.com/ionic-team/ionic-framework/blob/master/core/src/components/grid/grid.mixins.scss\\n * https://github.com/ionic-team/ionic-framework/blob/master/core/src/components/item/item.mixins.scss\\n */\\n/**\\n * App custom mixins for SCSS\\n * ----------------------------------------------------------------------------\\n * Place here our custom mixins.\\n */\\n/**\\n * Same as item-push-svg-url but admits flip-rtl\\n */\\n/*\\n * App Custom App variables SCSS\\n * ----------------------------------------------------------------------------\\n * Place here all custom app variables.\\n */\\n/*\\n * App Global variables SCSS\\n * ----------------------------------------------------------------------------\\n * Place here all global variables.\\n */\\n/**\\n * Layout Breakpoints\\n *\\n * https://ionicframework.com/docs/layout/grid#default-breakpoints\\n */\\n:host-context(.ios) ion-footer .toolbar:last-child {\\n  padding-bottom: 4px;\\n  min-height: 0;\\n}\\nion-content {\\n  --content-background: var(--background-alternative);\\n  --background: var(--content-background);\\n}\\nion-content::part(scroll) {\\n  padding-bottom: 0 !important;\\n}\\n.addon-messages-discussion-container {\\n  display: flex;\\n  flex-direction: column;\\n  padding-bottom: 16px !important;\\n  background: var(--content-background);\\n}\\n.addon-messages-date {\\n  font-weight: normal;\\n  font-size: 0.9rem;\\n}\\n/**\\n * App Global variables SCSS\\n * ----------------------------------------------------------------------------\\n * Place here the different files you should import to use global variables.\\n */\\n/**\\n * Imported ionic string functions for SCSS\\n * ----------------------------------------------------------------------------\\n * Extracted from\\n * https://github.com/ionic-team/ionic-framework/blob/master/core/src/themes/ionic.functions.string.scss\\n */\\n/**\\n * Imported ionic color functions for SCSS\\n * ----------------------------------------------------------------------------\\n * Extracted from\\n * https://github.com/ionic-team/ionic-framework/blob/master/core/src/themes/ionic.functions.color.scss\\n */\\n/**\\n * Imported ionic mixins for SCSS\\n * ----------------------------------------------------------------------------\\n * Extracted from\\n * https://github.com/ionic-team/ionic-framework/blob/master/core/src/themes/ionic.mixins.scss\\n */\\n/**\\n * Imported ionic mixins for SCSS from different components\\n * ----------------------------------------------------------------------------\\n * Extracted from\\n * https://github.com/ionic-team/ionic-framework/blob/master/core/src/components/grid/grid.mixins.scss\\n * https://github.com/ionic-team/ionic-framework/blob/master/core/src/components/item/item.mixins.scss\\n */\\n/**\\n * App custom mixins for SCSS\\n * ----------------------------------------------------------------------------\\n * Place here our custom mixins.\\n */\\n/**\\n * Same as item-push-svg-url but admits flip-rtl\\n */\\n/*\\n * App Custom App variables SCSS\\n * ----------------------------------------------------------------------------\\n * Place here all custom app variables.\\n */\\n/*\\n * App Global variables SCSS\\n * ----------------------------------------------------------------------------\\n * Place here all global variables.\\n */\\n/**\\n * Layout Breakpoints\\n *\\n * https://ionicframework.com/docs/layout/grid#default-breakpoints\\n */\\n:host .addon-messages-unreadfrom {\\n  color: var(--primary);\\n  background-color: transparent;\\n  margin-top: 6px;\\n  margin-left: auto;\\n  margin-right: auto;\\n}\\n:host .addon-messages-unreadfrom ion-icon {\\n  color: var(--primary);\\n  background-color: transparent;\\n}\\n:host .has-fab .scroll-content {\\n  padding-bottom: 0;\\n}\\n:host ion-fab .core-discussion-messages-badge {\\n  position: absolute;\\n  color: var(--addon-messages-discussion-badge-text);\\n  background-color: var(--addon-messages-discussion-badge);\\n  display: block;\\n  right: 0;\\n  top: 0;\\n}\\n:host-context([dir=rtl]) ion-fab .core-discussion-messages-badge {\\n  left: unset;\\n  right: unset;\\n  left: 0;\\n}\\n:host ion-header ion-toolbar ion-title {\\n  padding: 0;\\n}\\n:host ion-header ion-toolbar ion-title h1 {\\n  display: flex;\\n  align-items: center;\\n  padding: 0;\\n}\\n:host ion-header ion-toolbar ion-title h1 .core-bar-button-image {\\n  margin-right: 6px;\\n}\\n@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0) {\\n  :host ion-header ion-toolbar ion-title h1 .core-bar-button-image {\\n    margin-right: unset;\\n    -webkit-margin-end: 6px;\\n    margin-inline-end: 6px;\\n  }\\n}\\n:host ion-header ion-toolbar ion-title h1 core-format-text {\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  white-space: nowrap;\\n  flex-shrink: 1;\\n  display: block;\\n}\\n:host ion-header ion-toolbar ion-title h1 ion-icon {\\n  margin-left: 6px;\\n}\\n@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0) {\\n  :host ion-header ion-toolbar ion-title h1 ion-icon {\\n    margin-left: unset;\\n    -webkit-margin-start: 6px;\\n    margin-inline-start: 6px;\\n  }\\n}\\n:host-context(.ios) ion-header ion-toolbar h1 {\\n  justify-content: center;\\n}\\n/*# sourceMappingURL=data:application/json;base64, */\";","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { AfterViewInit, Component, ElementRef, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { IonContent } from '@ionic/angular';\nimport { AlertOptions } from '@ionic/core';\nimport { CoreEventObserver, CoreEvents } from '@singletons/events';\nimport { CoreSites } from '@services/sites';\nimport {\n    AddonMessagesProvider,\n    AddonMessagesConversationFormatted,\n    AddonMessagesConversationMember,\n    AddonMessagesGetMessagesMessage,\n    AddonMessages,\n    AddonMessagesConversationMessageFormatted,\n    AddonMessagesSendMessageResults,\n} from '../../services/messages';\nimport { AddonMessagesOffline, AddonMessagesOfflineMessagesDBRecordFormatted } from '../../services/messages-offline';\nimport { AddonMessagesSync, AddonMessagesSyncProvider } from '../../services/messages-sync';\nimport { CoreUser } from '@features/user/services/user';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreLogger } from '@singletons/logger';\nimport { CoreApp } from '@services/app';\nimport { CoreInfiniteLoadingComponent } from '@components/infinite-loading/infinite-loading';\nimport { Md5 } from 'ts-md5/dist/md5';\nimport moment from 'moment-timezone';\nimport { CoreError } from '@classes/errors/error';\nimport { Translate } from '@singletons';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreIonLoadingElement } from '@classes/ion-loading';\nimport { ActivatedRoute } from '@angular/router';\nimport { CoreConstants } from '@/core/constants';\nimport { CoreDom } from '@singletons/dom';\n\n/**\n * Page that displays a message discussion page.\n */\n@Component({\n    selector: 'page-addon-messages-discussion',\n    templateUrl: 'discussion.html',\n    styleUrls: ['discussion.scss'],\n})\nexport class AddonMessagesDiscussionPage implements OnInit, OnDestroy, AfterViewInit {\n\n    @ViewChild(IonContent) content?: IonContent;\n    @ViewChild(CoreInfiniteLoadingComponent) infinite?: CoreInfiniteLoadingComponent;\n\n    siteId: string;\n    protected fetching = false;\n    protected polling?: number;\n    protected logger: CoreLogger;\n\n    protected messagesBeingSent = 0;\n    protected pagesLoaded = 1;\n    protected lastMessage = { text: '', timecreated: 0 };\n    protected keepMessageMap: {[hash: string]: boolean} = {};\n    protected syncObserver: CoreEventObserver;\n    protected oldContentHeight = 0;\n    protected scrollBottom = true;\n    protected viewDestroyed = false;\n    protected memberInfoObserver: CoreEventObserver;\n    protected showLoadingModal = false; // Whether to show a loading modal while fetching data.\n    protected hostElement: HTMLElement;\n\n    conversationId?: number; // Conversation ID. Undefined if it's a new individual conversation.\n    conversation?: AddonMessagesConversationFormatted; // The conversation object (if it exists).\n    userId?: number; // User ID you're talking to (only if group messaging not enabled or it's a new individual conversation).\n    currentUserId: number;\n    title?: string;\n    showInfo = false;\n    conversationImage?: string;\n    loaded = false;\n    showKeyboard = false;\n    canLoadMore = false;\n    loadMoreError = false;\n    messages: AddonMessagesConversationMessageFormatted[] = [];\n    showDelete = false;\n    canDelete = false;\n    groupMessagingEnabled: boolean;\n    isGroup = false;\n    members: {[id: number]: AddonMessagesConversationMember} = {}; // Members that wrote a message, indexed by ID.\n    favouriteIcon = 'fa-star';\n    deleteIcon = 'fas-trash';\n    blockIcon = 'fas-user-lock';\n    addRemoveIcon = 'fas-user-plus';\n    muteIcon = 'fas-bell-slash';\n    favouriteIconSlash = false;\n    muteEnabled = false;\n    otherMember?: AddonMessagesConversationMember; // Other member information (individual conversations only).\n    footerType: 'message' | 'blocked' | 'requiresContact' | 'requestSent' | 'requestReceived' | 'unable' = 'unable';\n    requestContactSent = false;\n    requestContactReceived = false;\n    isSelf = false;\n    newMessages = 0;\n    scrollElement?: HTMLElement;\n    unreadMessageFrom = 0;\n    initialized = false;\n\n    constructor(\n        protected route: ActivatedRoute,\n        protected elementRef: ElementRef<HTMLElement>,\n    ) {\n        this.hostElement = elementRef.nativeElement;\n        this.siteId = CoreSites.getCurrentSiteId();\n        this.currentUserId = CoreSites.getCurrentSiteUserId();\n        this.groupMessagingEnabled = AddonMessages.isGroupMessagingEnabled();\n        this.muteEnabled = AddonMessages.isMuteConversationEnabled();\n\n        this.logger = CoreLogger.getInstance('AddonMessagesDiscussionPage');\n\n        // Refresh data if this discussion is synchronized automatically.\n        this.syncObserver = CoreEvents.on(AddonMessagesSyncProvider.AUTO_SYNCED, (data) => {\n            if ((data.userId && data.userId == this.userId) ||\n                    (data.conversationId && data.conversationId == this.conversationId)) {\n                // Fetch messages.\n                this.fetchMessages();\n\n                // Show first warning if any.\n                if (data.warnings && data.warnings[0]) {\n                    CoreDomUtils.showAlert(undefined, data.warnings[0]);\n                }\n            }\n        }, this.siteId);\n\n        // Refresh data if info of a mamber of the conversation have changed.\n        this.memberInfoObserver = CoreEvents.on(\n            AddonMessagesProvider.MEMBER_INFO_CHANGED_EVENT,\n            (data) => {\n                if (data.userId && (this.members[data.userId] || this.otherMember && data.userId == this.otherMember.id)) {\n                    this.fetchData();\n                }\n            },\n            this.siteId,\n        );\n    }\n\n    /**\n     * Runs when the page has loaded. This event only happens once per page being created.\n     * If a page leaves but is cached, then this event will not fire again on a subsequent viewing.\n     * Setup code for the page.\n     */\n    async ngOnInit(): Promise<void> {\n        this.conversationId = CoreNavigator.getRouteNumberParam('conversationId');\n        this.userId = CoreNavigator.getRouteNumberParam('userId');\n        this.showInfo = !CoreNavigator.getRouteBooleanParam('hideInfo');\n        this.showKeyboard = !!CoreNavigator.getRouteBooleanParam('showKeyboard');\n\n        await this.fetchData();\n\n        this.scrollToBottom(true);\n    }\n\n    /**\n     * View has been initialized.\n     */\n    async ngAfterViewInit(): Promise<void> {\n        this.scrollElement = await this.content?.getScrollElement();\n    }\n\n    /**\n     * Adds a new message to the message list.\n     *\n     * @param message Message to be added.\n     * @param keep If set the keep flag or not.\n     * @returns If message is not mine and was recently added.\n     */\n    protected addMessage(\n        message: AddonMessagesConversationMessageFormatted,\n        keep: boolean = true,\n    ): boolean {\n\n        /* Create a hash to identify the message. The text of online messages isn't reliable because it can have random data\n           like VideoJS ID. Try to use id and fallback to text for offline messages. */\n        const id = 'id' in message ? message.id : '';\n        message.hash = Md5.hashAsciiStr(String(id || message.text || '')) + '#' + message.timecreated + '#' +\n                message.useridfrom;\n\n        let added = false;\n        if (this.keepMessageMap[message.hash] === undefined) {\n            // Message not added to the list. Add it now.\n            this.messages.push(message);\n            added = message.useridfrom != this.currentUserId;\n        }\n        // Message needs to be kept in the list.\n        this.keepMessageMap[message.hash] = keep;\n\n        return added;\n    }\n\n    /**\n     * Remove a message if it shouldn't be in the list anymore.\n     *\n     * @param hash Hash of the message to be removed.\n     */\n    protected removeMessage(hash: string): void {\n        if (this.keepMessageMap[hash]) {\n            // Selected to keep it, clear the flag.\n            this.keepMessageMap[hash] = false;\n\n            return;\n        }\n\n        delete this.keepMessageMap[hash];\n\n        const position = this.messages.findIndex((message) => message.hash == hash);\n        if (position >= 0) {\n            this.messages.splice(position, 1);\n        }\n    }\n\n    /**\n     * Convenience function to fetch the conversation data.\n     *\n     * @returns Resolved when done.\n     */\n    protected async fetchData(): Promise<void> {\n        let loader: CoreIonLoadingElement | undefined;\n        if (this.showLoadingModal) {\n            loader = await CoreDomUtils.showModalLoading();\n        }\n\n        if (!this.groupMessagingEnabled && this.userId) {\n            // Get the user profile to retrieve the user fullname and image.\n            CoreUser.getProfile(this.userId, undefined, true).then((user) => {\n                if (!this.title) {\n                    this.title = user.fullname;\n                }\n                this.conversationImage = user.profileimageurl;\n                this.members[user.id] = <AddonMessagesConversationMember>user;\n\n                return;\n            }).catch(() => {\n                // Ignore errors.\n            });\n        }\n\n        // Synchronize messages if needed.\n        try {\n            const syncResult = await AddonMessagesSync.syncDiscussion(this.conversationId, this.userId);\n            if (syncResult.warnings && syncResult.warnings[0]) {\n                CoreDomUtils.showAlert(undefined, syncResult.warnings[0]);\n            }\n        } catch {\n            // Ignore errors;\n        }\n\n        try {\n            const promises: Promise<void>[] = [];\n            if (this.groupMessagingEnabled) {\n                // Get the conversation ID if it exists and we don't have it yet.\n                const exists = await this.getConversation(this.conversationId, this.userId);\n\n                if (exists) {\n                    // Fetch the messages for the first time.\n                    promises.push(this.fetchMessages());\n                }\n\n                if (this.userId) {\n                    const userId = this.userId;\n                    // Get the member info. Invalidate first to make sure we get the latest status.\n                    promises.push(AddonMessages.invalidateMemberInfo(this.userId).then(async () => {\n                        this.otherMember = await AddonMessages.getMemberInfo(userId);\n\n                        if (!exists && this.otherMember) {\n                            this.conversationImage = this.otherMember.profileimageurl;\n                            this.title = this.otherMember.fullname;\n                        }\n                        this.blockIcon = this.otherMember.isblocked ? 'fas-user-check' : 'fas-user-lock';\n\n                        return;\n                    }));\n                } else {\n                    this.otherMember = undefined;\n                }\n\n            } else {\n                if (this.userId) {\n                    const userId = this.userId;\n\n                    // Fake the user member info.\n                    promises.push(CoreUser.getProfile(this.userId).then(async (user) => {\n                        this.otherMember = {\n                            id: user.id,\n                            fullname: user.fullname,\n                            profileurl: '',\n                            profileimageurl: user.profileimageurl || '',\n                            profileimageurlsmall: user.profileimageurlsmall || '',\n                            isonline: false,\n                            showonlinestatus: false,\n                            isblocked: false,\n                            iscontact: false,\n                            isdeleted: false,\n                            canmessageevenifblocked: true,\n                            canmessage: true,\n                            requirescontact: false,\n                        };\n                        this.otherMember.isblocked = await AddonMessages.isBlocked(userId);\n                        this.otherMember.iscontact = await AddonMessages.isContact(userId);\n                        this.blockIcon = this.otherMember.isblocked ? 'fas-user-check' : 'fas-user-lock';\n\n                        return;\n                    }));\n\n                }\n\n                // Fetch the messages for the first time.\n                promises.push(this.fetchMessages().then(() => {\n                    if (!this.title && this.messages.length) {\n                        // Didn't receive the fullname via argument. Try to get it from messages.\n                        // It's possible that name cannot be resolved when no messages were yet exchanged.\n                        const firstMessage = this.messages[0];\n                        if ('usertofullname' in firstMessage) {\n                            if (firstMessage.useridto != this.currentUserId) {\n                                this.title = firstMessage.usertofullname || '';\n                            } else {\n                                this.title = firstMessage.userfromfullname || '';\n                            }\n                        }\n                    }\n\n                    return;\n                }));\n            }\n\n            await Promise.all(promises);\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'addon.messages.errorwhileretrievingmessages', true);\n        } finally {\n            this.checkCanDelete();\n            this.loaded = true;\n            this.setPolling(); // Make sure we're polling messages.\n            this.setContactRequestInfo();\n            this.setFooterType();\n            loader && loader.dismiss();\n        }\n    }\n\n    /**\n     * Runs when the page has fully entered and is now the active page.\n     * This event will fire, whether it was the first load or a cached page.\n     */\n    ionViewDidEnter(): void {\n        this.setPolling();\n    }\n\n    /**\n     * Runs when the page is about to leave and no longer be the active page.\n     */\n    ionViewWillLeave(): void {\n        this.unsetPolling();\n    }\n\n    /**\n     * Convenience function to fetch messages.\n     *\n     * @param messagesAreNew If messages loaded are new messages.\n     * @returns Resolved when done.\n     */\n    protected async fetchMessages(messagesAreNew: boolean = true): Promise<void> {\n        this.loadMoreError = false;\n\n        if (this.messagesBeingSent > 0) {\n            // We do not poll while a message is being sent or we could confuse the user.\n            // Otherwise, his message would disappear from the list, and he'd have to wait for the interval to check for messages.\n            return;\n        } else if (this.fetching) {\n            // Already fetching.\n            return;\n        } else if (this.groupMessagingEnabled && !this.conversationId) {\n            // Don't have enough data to fetch messages.\n            throw new CoreError('No enough data provided to fetch messages');\n        }\n\n        if (this.conversationId) {\n            this.logger.debug(`Polling new messages for conversation '${this.conversationId}'`);\n        } else if (this.userId) {\n            this.logger.debug(`Polling new messages for discussion with user '${this.userId}'`);\n        } else {\n            // Should not happen.\n            throw new CoreError('No enough data provided to fetch messages');\n        }\n\n        this.fetching = true;\n\n        try {\n            // Wait for synchronization process to finish.\n            await AddonMessagesSync.waitForSyncConversation(this.conversationId, this.userId);\n\n            let messages: AddonMessagesConversationMessageFormatted[] = [];\n            // Fetch messages. Invalidate the cache before fetching.\n            if (this.groupMessagingEnabled) {\n                await AddonMessages.invalidateConversationMessages(this.conversationId!);\n                messages = await this.getConversationMessages(this.pagesLoaded);\n            } else {\n                await AddonMessages.invalidateDiscussionCache(this.userId!);\n                messages = await this.getDiscussionMessages(this.pagesLoaded);\n            }\n\n            this.loadMessages(messages, messagesAreNew);\n\n        } finally {\n            this.fetching = false;\n        }\n    }\n\n    /**\n     * Format and load a list of messages into the view.\n     *\n     * @param messages Messages to load.\n     * @param messagesAreNew If messages loaded are new messages.\n     */\n    protected loadMessages(\n        messages: AddonMessagesConversationMessageFormatted[],\n        messagesAreNew: boolean = true,\n    ): void {\n\n        if (this.viewDestroyed) {\n            return;\n        }\n\n        // Check if we are at the bottom to scroll it after render.\n        // Use a 5px error margin because in iOS there is 1px difference for some reason.\n        this.scrollBottom = CoreDom.scrollIsBottom(this.scrollElement, 5);\n\n        if (this.messagesBeingSent > 0) {\n            // Ignore polling due to a race condition.\n            return;\n        }\n\n        // Add new messages to the list and mark the messages that should still be displayed.\n        const newMessages = messages.reduce((val, message) => val + (this.addMessage(message) ? 1 : 0), 0);\n\n        // Set the new badges message if we're loading new messages.\n        if (messagesAreNew) {\n            this.setNewMessagesBadge(this.newMessages + newMessages);\n        }\n\n        // Remove messages that shouldn't be in the list anymore.\n        for (const hash in this.keepMessageMap) {\n            this.removeMessage(hash);\n        }\n\n        // Sort the messages.\n        AddonMessages.sortMessages(this.messages);\n\n        // Calculate which messages need to display the date or user data.\n        this.messages.forEach((message, index) => {\n            message.showDate = this.showDate(message, this.messages[index - 1]);\n            message.showUserData = this.showUserData(message, this.messages[index - 1]);\n            message.showTail = this.showTail(message, this.messages[index + 1]);\n        });\n\n        // If we received a new message while using group messaging, force mark messages as read.\n        const last = this.messages[this.messages.length - 1];\n        const forceMark = this.groupMessagingEnabled && last && last.useridfrom != this.currentUserId && this.lastMessage.text != ''\n                    && (last.text !== this.lastMessage.text || last.timecreated !== this.lastMessage.timecreated);\n\n        // Notify that there can be a new message.\n        this.notifyNewMessage();\n\n        // Mark retrieved messages as read if they are not.\n        this.markMessagesAsRead(forceMark);\n    }\n\n    /**\n     * Set the new message badge number and set scroll listener if needed.\n     *\n     * @param addMessages Number of messages still to be read.\n     */\n    protected setNewMessagesBadge(addMessages: number): void {\n        if (this.newMessages == 0 && addMessages > 0) {\n            this.scrollFunction();\n        }\n\n        this.newMessages = addMessages;\n    }\n\n    /**\n     * The scroll was moved. Update new messages count.\n     */\n    scrollFunction(): void {\n        if (this.newMessages == 0) {\n            return;\n        }\n\n        if (CoreDom.scrollIsBottom(this.scrollElement, 40)) {\n            // At the bottom, reset.\n            this.setNewMessagesBadge(0);\n\n            return;\n        }\n\n        const scrollElRect = this.scrollElement?.getBoundingClientRect();\n        const scrollBottomPos = (scrollElRect && scrollElRect.bottom) || 0;\n\n        if (scrollBottomPos == 0) {\n            return;\n        }\n\n        const messages = Array.from(this.hostElement.querySelectorAll('core-message:not(.is-mine)'))\n            .slice(-this.newMessages)\n            .reverse();\n\n        const newMessagesUnread = messages.findIndex((message) => {\n            const elementRect = message.getBoundingClientRect();\n            if (!elementRect) {\n                return false;\n            }\n\n            return elementRect.bottom <= scrollBottomPos;\n        });\n\n        if (newMessagesUnread > 0 && newMessagesUnread < this.newMessages) {\n            this.setNewMessagesBadge(newMessagesUnread);\n        }\n    }\n\n    /**\n     * Get the conversation.\n     *\n     * @param conversationId Conversation ID.\n     * @param userId User ID.\n     * @returns Promise resolved with a boolean: whether the conversation exists or not.\n     */\n    protected async getConversation(conversationId?: number, userId?: number): Promise<boolean> {\n        let fallbackConversation: AddonMessagesConversationFormatted | undefined;\n\n        // Try to get the conversationId if we don't have it.\n        if (!conversationId && userId) {\n            try {\n                if (userId === this.currentUserId && AddonMessages.isSelfConversationEnabled()) {\n                    fallbackConversation = await AddonMessages.getSelfConversation();\n                } else {\n                    fallbackConversation = await AddonMessages.getConversationBetweenUsers(userId, undefined, true);\n                }\n                conversationId = fallbackConversation.id;\n            } catch (error) {\n                // Probably conversation does not exist or user is offline. Try to load offline messages.\n                this.isSelf = userId === this.currentUserId;\n\n                const messages = await AddonMessagesOffline.getMessages(userId);\n\n                if (messages && messages.length) {\n                // We have offline messages, this probably means that the conversation didn't exist. Don't display error.\n                    messages.forEach((message) => {\n                        message.pending = true;\n                        message.text = message.smallmessage;\n                    });\n\n                    this.loadMessages(messages);\n                } else if (error.errorcode != 'errorconversationdoesnotexist') {\n                    // Display the error.\n                    throw error;\n                }\n\n                return false;\n            }\n        }\n\n        if (!conversationId) {\n            return false;\n        }\n\n        // Retrieve the conversation. Invalidate data first to get the right unreadcount.\n        await AddonMessages.invalidateConversation(conversationId);\n\n        try {\n            this.conversation = await AddonMessages.getConversation(conversationId, undefined, true);\n        } catch (error) {\n            // Get conversation failed, use the fallback one if we have it.\n            if (fallbackConversation) {\n                this.conversation = fallbackConversation;\n            } else {\n                throw error;\n            }\n        }\n\n        if (this.conversation) {\n            this.conversationId = this.conversation.id;\n            this.title = this.conversation.name;\n            this.conversationImage = this.conversation.imageurl;\n            this.isGroup = this.conversation.type == AddonMessagesProvider.MESSAGE_CONVERSATION_TYPE_GROUP;\n            this.favouriteIcon = 'fas-star';\n            this.favouriteIconSlash = this.conversation.isfavourite;\n            this.muteIcon = this.conversation.ismuted ? 'fas-bell' : 'fas-bell-slash';\n            if (!this.isGroup) {\n                this.userId = this.conversation.userid;\n            }\n            this.isSelf = this.conversation.type == AddonMessagesProvider.MESSAGE_CONVERSATION_TYPE_SELF;\n\n            return true;\n        } else {\n            return false;\n        }\n\n    }\n\n    /**\n     * Get the messages of the conversation. Used if group messaging is supported.\n     *\n     * @param pagesToLoad Number of \"pages\" to load.\n     * @param offset Offset for message list.\n     * @returns Promise resolved with the list of messages.\n     */\n    protected async getConversationMessages(\n        pagesToLoad: number,\n        offset: number = 0,\n    ): Promise<AddonMessagesConversationMessageFormatted[]> {\n\n        if (!this.conversationId) {\n            return [];\n        }\n\n        const excludePending = offset > 0;\n\n        const result = await AddonMessages.getConversationMessages(this.conversationId, {\n            excludePending: excludePending,\n            limitFrom: offset,\n        });\n\n        pagesToLoad--;\n\n        // Treat members. Don't use CoreUtilsProvider.arrayToObject because we don't want to override the existing object.\n        if (result.members) {\n            result.members.forEach((member) => {\n                this.members[member.id] = member;\n            });\n        }\n\n        const messages: AddonMessagesConversationMessageFormatted[] = result.messages;\n\n        if (pagesToLoad > 0 && result.canLoadMore) {\n            offset += AddonMessagesProvider.LIMIT_MESSAGES;\n\n            // Get more messages.\n            const nextMessages = await this.getConversationMessages(pagesToLoad, offset);\n\n            return messages.concat(nextMessages);\n        }\n\n        // No more messages to load, return them.\n        this.canLoadMore = !!result.canLoadMore;\n\n        return messages;\n\n    }\n\n    /**\n     * Get a discussion. Can load several \"pages\".\n     *\n     * @param pagesToLoad Number of pages to load.\n     * @param lfReceivedUnread Number of unread received messages already fetched, so fetch will be done from this.\n     * @param lfReceivedRead Number of read received messages already fetched, so fetch will be done from this.\n     * @param lfSentUnread Number of unread sent messages already fetched, so fetch will be done from this.\n     * @param lfSentRead Number of read sent messages already fetched, so fetch will be done from this.\n     * @returns Resolved when done.\n     */\n    protected async getDiscussionMessages(\n        pagesToLoad: number,\n        lfReceivedUnread: number = 0,\n        lfReceivedRead: number = 0,\n        lfSentUnread: number = 0,\n        lfSentRead: number = 0,\n    ): Promise<(AddonMessagesGetMessagesMessage | AddonMessagesOfflineMessagesDBRecordFormatted)[]> {\n\n        // Only get offline messages if we're loading the first \"page\".\n        const excludePending = lfReceivedUnread > 0 || lfReceivedRead > 0 || lfSentUnread > 0 || lfSentRead > 0;\n\n        // Get next messages.\n        const result = await AddonMessages.getDiscussion(\n            this.userId!,\n            excludePending,\n            lfReceivedUnread,\n            lfReceivedRead,\n            lfSentUnread,\n            lfSentRead,\n        );\n\n        pagesToLoad--;\n        if (pagesToLoad > 0 && result.canLoadMore) {\n            // More pages to load. Calculate new limit froms.\n            result.messages.forEach((message) => {\n                if (!message.pending && 'read' in message) {\n                    if (message.useridfrom == this.userId) {\n                        if (message.read) {\n                            lfReceivedRead++;\n                        } else {\n                            lfReceivedUnread++;\n                        }\n                    } else {\n                        if (message.read) {\n                            lfSentRead++;\n                        } else {\n                            lfSentUnread++;\n                        }\n                    }\n                }\n            });\n\n            // Get next messages.\n            const nextMessages =\n                await this.getDiscussionMessages(pagesToLoad, lfReceivedUnread, lfReceivedRead, lfSentUnread, lfSentRead);\n\n            return result.messages.concat(nextMessages);\n        } else {\n            // No more messages to load, return them.\n            this.canLoadMore = result.canLoadMore;\n\n            return result.messages;\n        }\n    }\n\n    /**\n     * Mark messages as read.\n     */\n    protected async markMessagesAsRead(forceMark: boolean): Promise<void> {\n        let readChanged = false;\n        let messageUnreadFound = false;\n\n        // Mark all messages at a time if there is any unread message.\n        if (forceMark) {\n            messageUnreadFound = true;\n        } else if (this.groupMessagingEnabled) {\n            messageUnreadFound = !!((this.conversation?.unreadcount && this.conversation?.unreadcount > 0) &&\n                (this.conversationId && this.conversationId > 0));\n        } else {\n            // If an unread message is found, mark all messages as read.\n            messageUnreadFound = this.messages.some((message) =>\n                message.useridfrom != this.currentUserId && ('read' in message && !message.read));\n        }\n\n        if (messageUnreadFound) {\n            this.setUnreadLabelPosition();\n\n            if (this.groupMessagingEnabled) {\n                await AddonMessages.markAllConversationMessagesRead(this.conversationId!);\n            } else {\n                await AddonMessages.markAllMessagesRead(this.userId);\n\n                // Mark all messages as read.\n                this.messages.forEach((message) => {\n                    if ('read' in message) {\n                        message.read = true;\n                    }\n                });\n            }\n\n            readChanged = true;\n        }\n\n        if (readChanged) {\n            CoreEvents.trigger(AddonMessagesProvider.READ_CHANGED_EVENT, {\n                conversationId: this.conversationId,\n                userId: this.userId,\n            }, this.siteId);\n        }\n    }\n\n    /**\n     * Notify the last message found so discussions list controller can tell if last message should be updated.\n     */\n    protected notifyNewMessage(): void {\n        const last = this.messages[this.messages.length - 1];\n\n        let trigger = false;\n\n        if (!last) {\n            this.lastMessage = { text: '', timecreated: 0 };\n            trigger = true;\n        } else if (last.text !== this.lastMessage.text || last.timecreated !== this.lastMessage.timecreated) {\n            this.lastMessage = { text: last.text || '', timecreated: last.timecreated };\n            trigger = true;\n        }\n\n        if (trigger) {\n            // Update discussions last message.\n            CoreEvents.trigger(AddonMessagesProvider.NEW_MESSAGE_EVENT, {\n                conversationId: this.conversationId,\n                userId: this.userId,\n                message: this.lastMessage.text,\n                timecreated: this.lastMessage.timecreated,\n                isfavourite: !!this.conversation?.isfavourite,\n                type: this.conversation?.type,\n            }, this.siteId);\n\n            // Update navBar links and buttons.\n            const newCanDelete = (last && 'id' in last && last.id && this.messages.length == 1) || this.messages.length > 1;\n            if (this.canDelete != newCanDelete) {\n                this.checkCanDelete();\n            }\n        }\n    }\n\n    /**\n     * Set the place where the unread label position has to be.\n     */\n    protected setUnreadLabelPosition(): void {\n        if (this.unreadMessageFrom != 0) {\n            return;\n        }\n\n        if (this.groupMessagingEnabled) {\n            // Use the unreadcount from the conversation to calculate where should the label be placed.\n            if (this.conversation && (this.conversation?.unreadcount && this.conversation?.unreadcount > 0) && this.messages) {\n                // Iterate over messages to find the right message using the unreadcount. Skip offline messages and own messages.\n                let found = 0;\n\n                for (let i = this.messages.length - 1; i >= 0; i--) {\n                    const message = this.messages[i];\n                    if (!message.pending && message.useridfrom != this.currentUserId && 'id' in message) {\n                        found++;\n                        if (found == this.conversation.unreadcount) {\n                            this.unreadMessageFrom = Number(message.id);\n                            break;\n                        }\n                    }\n                }\n            }\n        } else {\n            let previousMessageRead = false;\n\n            for (const x in this.messages) {\n                const message = this.messages[x];\n                if (message.useridfrom != this.currentUserId && 'read' in message) {\n                    const unreadFrom = !message.read && previousMessageRead;\n\n                    if (unreadFrom) {\n                        // Save where the label is placed.\n                        this.unreadMessageFrom = Number(message.id);\n                        break;\n                    }\n\n                    previousMessageRead = !!message.read;\n                }\n            }\n        }\n\n        // Do not update the message unread from label on next refresh.\n        if (this.unreadMessageFrom == 0) {\n            // Using negative to indicate the label is not placed but should not be placed.\n            this.unreadMessageFrom = -1;\n        }\n    }\n\n    /**\n     * Check if there's any message in the list that can be deleted.\n     */\n    protected checkCanDelete(): void {\n        // All messages being sent should be at the end of the list.\n        const first = this.messages[0];\n        this.canDelete = first && !first.sending;\n    }\n\n    /**\n     * Hide unread label when sending messages.\n     */\n    protected hideUnreadLabel(): void {\n        if (this.unreadMessageFrom > 0) {\n            this.unreadMessageFrom = -1;\n        }\n    }\n\n    /**\n     * Wait until fetching is false.\n     *\n     * @returns Resolved when done.\n     */\n    protected async waitForFetch(): Promise<void> {\n        if (!this.fetching) {\n            return;\n        }\n\n        await CoreUtils.wait(400);\n        await CoreUtils.ignoreErrors(this.waitForFetch());\n    }\n\n    /**\n     * Set a polling to get new messages every certain time.\n     */\n    protected setPolling(): void {\n        if (this.groupMessagingEnabled && !this.conversationId) {\n            // Don't have enough data to poll messages.\n            return;\n        }\n\n        if (!this.polling) {\n            // Start polling.\n            this.polling = window.setInterval(() => {\n                this.fetchMessages().catch(() => {\n                    // Ignore errors.\n                });\n            }, AddonMessagesProvider.POLL_INTERVAL);\n        }\n    }\n\n    /**\n     * Unset polling.\n     */\n    protected unsetPolling(): void {\n        if (this.polling) {\n            this.logger.debug(`Cancelling polling for conversation with user '${this.userId}'`);\n            clearInterval(this.polling);\n            this.polling = undefined;\n        }\n    }\n\n    /**\n     * Copy message to clipboard.\n     *\n     * @param message Message to be copied.\n     */\n    copyMessage(message: AddonMessagesConversationMessageFormatted): void {\n        const text = 'smallmessage' in message ? message.smallmessage || message.text || '' : message.text || '';\n        CoreUtils.copyToClipboard(CoreTextUtils.decodeHTMLEntities(text));\n    }\n\n    /**\n     * Function to delete a message.\n     *\n     * @param message Message object to delete.\n     * @param index Index where the message is to delete it from the view.\n     */\n    async deleteMessage(\n        message: AddonMessagesConversationMessageFormatted,\n        index: number,\n    ): Promise<void> {\n        const canDeleteAll = this.conversation && this.conversation.candeletemessagesforallusers;\n        const langKey = message.pending || canDeleteAll || this.isSelf ? 'core.areyousure' :\n            'addon.messages.deletemessageconfirmation';\n        const options: AlertOptions = {};\n\n        if (canDeleteAll && !message.pending) {\n            // Show delete for all checkbox.\n            options.inputs = [{\n                type: 'checkbox',\n                name: 'deleteforall',\n                checked: false,\n                value: true,\n                label: Translate.instant('addon.messages.deleteforeveryone'),\n            }];\n        }\n\n        try {\n            const data: boolean[] = await CoreDomUtils.showConfirm(\n                Translate.instant(langKey),\n                undefined,\n                undefined,\n                undefined,\n                options,\n            );\n\n            const modal = await CoreDomUtils.showModalLoading('core.deleting', true);\n\n            try {\n                await AddonMessages.deleteMessage(message, data && data[0]);\n                // Remove message from the list without having to wait for re-fetch.\n                this.messages.splice(index, 1);\n                this.removeMessage(message.hash!);\n                this.notifyNewMessage();\n\n                this.fetchMessages(); // Re-fetch messages to update cached data.\n            } finally {\n                modal.dismiss();\n            }\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'addon.messages.errordeletemessage', true);\n        }\n    }\n\n    /**\n     * Function to load previous messages.\n     *\n     * @param infiniteComplete Infinite scroll complete function. Only used from core-infinite-loading.\n     * @returns Resolved when done.\n     */\n    async loadPrevious(infiniteComplete?: () => void): Promise<void> {\n        if (!this.initialized) {\n            // Don't load previous if the view isn't fully initialized.\n            // Don't put the initialized condition in the \"enabled\" input because then the load more is hidden and\n            // the scroll height changes when it appears.\n            infiniteComplete && infiniteComplete();\n\n            return;\n        }\n\n        let infiniteHeight = this.infinite?.hostElement.getBoundingClientRect().height || 0;\n        const scrollHeight = (this.scrollElement?.scrollHeight || 0);\n\n        // If there is an ongoing fetch, wait for it to finish.\n        try {\n            await this.waitForFetch();\n        } finally {\n            this.pagesLoaded++;\n\n            try {\n                await this.fetchMessages(false);\n\n                // Try to keep the scroll position.\n                const scrollBottom = scrollHeight - (this.scrollElement?.scrollTop || 0);\n\n                const height = this.infinite?.hostElement.getBoundingClientRect().height || 0;\n                if (this.canLoadMore && infiniteHeight && this.infinite) {\n                    // The height of the infinite is different while spinner is shown. Add that difference.\n                    infiniteHeight = infiniteHeight - height;\n                } else if (!this.canLoadMore) {\n                    // Can't load more, take into account the full height of the infinite loading since it will disappear now.\n                    infiniteHeight = infiniteHeight || height;\n                }\n\n                this.keepScroll(scrollHeight, scrollBottom, infiniteHeight);\n            } catch (error) {\n                this.loadMoreError = true; // Set to prevent infinite calls with infinite-loading.\n                this.pagesLoaded--;\n                CoreDomUtils.showErrorModalDefault(error, 'addon.messages.errorwhileretrievingmessages', true);\n            } finally {\n                infiniteComplete && infiniteComplete();\n            }\n        }\n    }\n\n    /**\n     * Keep scroll position after loading previous messages.\n     */\n    protected keepScroll(oldScrollHeight: number, oldScrollBottom: number, infiniteHeight: number, retries = 0): void {\n        setTimeout(() => {\n            const newScrollHeight = (this.scrollElement?.scrollHeight || 0);\n\n            if (newScrollHeight == oldScrollHeight) {\n                // Height hasn't changed yet. Retry if max retries haven't been reached.\n                if (retries <= 10) {\n                    this.keepScroll(oldScrollHeight, oldScrollBottom, infiniteHeight, retries + 1);\n                }\n\n                return;\n            }\n\n            // Scroll has changed, but maybe it hasn't reached the full height yet.\n            setTimeout(() => {\n                const newScrollHeight = (this.scrollElement?.scrollHeight || 0);\n                const scrollTo = newScrollHeight - oldScrollBottom + infiniteHeight;\n\n                this.content!.scrollToPoint(0, scrollTo, 0);\n            }, 30);\n        }, 30);\n    }\n\n    /**\n     * Scroll bottom when render has finished.\n     *\n     * @param force Whether to force scroll to bottom.\n     */\n    async scrollToBottom(force = false): Promise<void> {\n        // Check if scroll is at bottom. If so, scroll bottom after rendering since there might be something new.\n        if (this.scrollBottom || force) {\n            this.scrollBottom = false;\n\n            // Reset the badge.\n            this.setNewMessagesBadge(0);\n\n            // Leave time for the view to be rendered.\n            await CoreUtils.nextTicks(5);\n\n            if (!this.viewDestroyed && this.content) {\n                this.content.scrollToBottom(0);\n            }\n\n            if (force) {\n                this.initialized = true;\n            }\n        }\n    }\n\n    /**\n     * Scroll to the first new unread message.\n     */\n    scrollToFirstUnreadMessage(): void {\n        if (this.newMessages > 0) {\n            const messages = Array.from(this.hostElement.querySelectorAll<HTMLElement>('core-message:not(.is-mine)'));\n\n            CoreDom.scrollToElement(messages[messages.length - this.newMessages]);\n        }\n    }\n\n    /**\n     * Sends a message to the server.\n     *\n     * @param text Message text.\n     */\n    async sendMessage(text: string): Promise<void> {\n        this.hideUnreadLabel();\n\n        this.showDelete = false;\n        this.scrollBottom = true;\n        this.setNewMessagesBadge(0);\n\n        const message: AddonMessagesConversationMessageFormatted = {\n            id: -1,\n            pending: true,\n            sending: true,\n            useridfrom: this.currentUserId,\n            smallmessage: text,\n            text: text,\n            timecreated: Date.now(),\n        };\n        message.showDate = this.showDate(message, this.messages[this.messages.length - 1]);\n        this.addMessage(message, false);\n\n        this.messagesBeingSent++;\n\n        // If there is an ongoing fetch, wait for it to finish.\n        // Otherwise, if a message is sent while fetching it could disappear until the next fetch.\n        try {\n            await this.waitForFetch();\n        } finally {\n\n            try {\n                let data: AddonMessagesSendMessageResults;\n                if (this.conversationId) {\n                    data = await AddonMessages.sendMessageToConversation(this.conversation!, text);\n                } else {\n                    data = await AddonMessages.sendMessage(this.userId!, text);\n                }\n\n                this.messagesBeingSent--;\n                let failure = false;\n                if (data.sent) {\n                    try {\n\n                        if (!this.conversationId && data.message && 'conversationid' in data.message) {\n                            // Message sent to a new conversation, try to load the conversation.\n                            await this.getConversation(data.message.conversationid, this.userId);\n                            // Now fetch messages.\n                            try {\n                                await this.fetchMessages();\n                            } finally {\n                                // Start polling messages now that the conversation exists.\n                                this.setPolling();\n                            }\n                        } else {\n                            // Message was sent, fetch messages right now.\n                            await this.fetchMessages();\n                        }\n                    } catch {\n                        failure = true;\n                    }\n                }\n\n                if (failure || !data.sent) {\n                    // Fetch failed or is offline message, mark the message as sent.\n                    // If fetch is successful there's no need to mark it because the fetch will already show the message received.\n                    message.sending = false;\n                    if (data.sent) {\n                        // Message sent to server, not pending anymore.\n                        message.pending = false;\n                    } else if (data.message) {\n                        message.timecreated = data.message.timecreated || 0;\n                    }\n\n                    this.notifyNewMessage();\n                }\n\n            } catch (error) {\n                this.messagesBeingSent--;\n\n                // Only close the keyboard if an error happens.\n                // We want the user to be able to send multiple messages without the keyboard being closed.\n                CoreApp.closeKeyboard();\n\n                CoreDomUtils.showErrorModalDefault(error, 'addon.messages.messagenotsent', true);\n                this.removeMessage(message.hash!);\n            }\n        }\n    }\n\n    /**\n     * Check date should be shown on message list for the current message.\n     * If date has changed from previous to current message it should be shown.\n     *\n     * @param message Current message where to show the date.\n     * @param prevMessage Previous message where to compare the date with.\n     * @returns If date has changed and should be shown.\n     */\n    showDate(\n        message: AddonMessagesConversationMessageFormatted,\n        prevMessage?: AddonMessagesConversationMessageFormatted,\n    ): boolean {\n\n        if (!prevMessage) {\n            // First message, show it.\n            return true;\n        }\n\n        // Check if day has changed.\n        return !moment(message.timecreated).isSame(prevMessage.timecreated, 'day');\n    }\n\n    /**\n     * Check if the user info should be displayed for the current message.\n     * User data is only displayed for group conversations if the previous message was from another user.\n     *\n     * @param message Current message where to show the user info.\n     * @param prevMessage Previous message.\n     * @returns Whether user data should be shown.\n     */\n    showUserData(\n        message: AddonMessagesConversationMessageFormatted,\n        prevMessage?: AddonMessagesConversationMessageFormatted,\n    ): boolean {\n\n        return this.isGroup && message.useridfrom != this.currentUserId && this.members[(message.useridfrom || 0)] &&\n            (!prevMessage || prevMessage.useridfrom != message.useridfrom || !!message.showDate);\n    }\n\n    /**\n     * Check if a css tail should be shown.\n     *\n     * @param message Current message where to show the user info.\n     * @param nextMessage Next message.\n     * @returns Whether user data should be shown.\n     */\n    showTail(\n        message: AddonMessagesConversationMessageFormatted,\n        nextMessage?: AddonMessagesConversationMessageFormatted,\n    ): boolean {\n        return !nextMessage || nextMessage.useridfrom != message.useridfrom || !!nextMessage.showDate;\n    }\n\n    /**\n     * View info. If it's an individual conversation, go to the user profile.\n     * If it's a group conversation, view info about the group.\n     */\n    async viewInfo(): Promise<void> {\n        if (this.isGroup) {\n            const { AddonMessagesConversationInfoComponent } =\n                await import('@addons/messages/components/conversation-info/conversation-info.module');\n\n            // Display the group information.\n            const userId = await CoreDomUtils.openSideModal<number>({\n                component: AddonMessagesConversationInfoComponent,\n                componentProps: {\n                    conversationId: this.conversationId,\n                },\n            });\n\n            if (userId !== undefined) {\n                const splitViewLoaded = CoreNavigator.isCurrentPathInTablet('**/messages/**/discussion/**');\n\n                // Open user conversation.\n                if (splitViewLoaded) {\n                    // Notify the left pane to load it, this way the right conversation will be highlighted.\n                    CoreEvents.trigger(\n                        AddonMessagesProvider.OPEN_CONVERSATION_EVENT,\n                        { userId },\n                        this.siteId,\n                    );\n                } else {\n                    // Open the discussion in a new view.\n                    CoreNavigator.navigateToSitePath(`/messages/discussion/user/${userId}`);\n                }\n            }\n        } else {\n            // Open the user profile.\n            CoreNavigator.navigateToSitePath('/user/profile', { params: { userId: this.userId } });\n        }\n    }\n\n    /**\n     * Change the favourite state of the current conversation.\n     *\n     * @param done Function to call when done.\n     */\n    async changeFavourite(done?: () => void): Promise<void> {\n        if (!this.conversation) {\n            return;\n        }\n\n        this.favouriteIcon = CoreConstants.ICON_LOADING;\n\n        try {\n            await AddonMessages.setFavouriteConversation(this.conversation.id, !this.conversation.isfavourite);\n\n            this.conversation.isfavourite = !this.conversation.isfavourite;\n\n            // Get the conversation data so it's cached. Don't block the user for this.\n            AddonMessages.getConversation(this.conversation.id, undefined, true);\n\n            CoreEvents.trigger(AddonMessagesProvider.UPDATE_CONVERSATION_LIST_EVENT, {\n                conversationId: this.conversation.id,\n                action: 'favourite',\n                value: this.conversation.isfavourite,\n            }, this.siteId);\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'Error changing favourite state.');\n        } finally {\n            this.favouriteIcon = 'fas-star';\n            this.favouriteIconSlash = this.conversation.isfavourite;\n            done && done();\n        }\n    }\n\n    /**\n     * Change the mute state of the current conversation.\n     *\n     * @param done Function to call when done.\n     */\n    async changeMute(done?: () => void): Promise<void> {\n        if (!this.conversation) {\n            return;\n        }\n\n        this.muteIcon = CoreConstants.ICON_LOADING;\n\n        try {\n            await AddonMessages.muteConversation(this.conversation.id, !this.conversation.ismuted);\n            this.conversation.ismuted = !this.conversation.ismuted;\n\n            // Get the conversation data so it's cached. Don't block the user for this.\n            AddonMessages.getConversation(this.conversation.id, undefined, true);\n\n            CoreEvents.trigger(AddonMessagesProvider.UPDATE_CONVERSATION_LIST_EVENT, {\n                conversationId: this.conversation.id,\n                action: 'mute',\n                value: this.conversation.ismuted,\n            }, this.siteId);\n\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'Error changing muted state.');\n        } finally {\n            this.muteIcon = this.conversation.ismuted ? 'fas-bell' : 'fas-bell-slash';\n            done && done();\n        }\n    }\n\n    /**\n     * Calculate whether there are pending contact requests.\n     */\n    protected setContactRequestInfo(): void {\n        this.requestContactSent = false;\n        this.requestContactReceived = false;\n        if (this.otherMember && !this.otherMember.iscontact) {\n            this.requestContactSent = !!this.otherMember.contactrequests?.some((request) =>\n                request.userid == this.currentUserId && request.requesteduserid == this.otherMember!.id);\n            this.requestContactReceived = !!this.otherMember.contactrequests?.some((request) =>\n                request.userid == this.otherMember!.id && request.requesteduserid == this.currentUserId);\n        }\n    }\n\n    /**\n     * Calculate what to display in the footer.\n     */\n    protected setFooterType(): void {\n        if (!this.otherMember) {\n            // Group conversation or group messaging not available.\n            this.footerType = 'message';\n        } else if (this.otherMember.isblocked) {\n            this.footerType = 'blocked';\n        } else if (this.requestContactReceived) {\n            this.footerType = 'requestReceived';\n        } else if (this.otherMember.canmessage) {\n            this.footerType = 'message';\n        } else if (this.requestContactSent) {\n            this.footerType = 'requestSent';\n        } else if (this.otherMember.requirescontact) {\n            this.footerType = 'requiresContact';\n        } else {\n            this.footerType = 'unable';\n        }\n    }\n\n    /**\n     * Displays a confirmation modal to block the user of the individual conversation.\n     *\n     * @returns Promise resolved when user is blocked or dialog is cancelled.\n     */\n    async blockUser(): Promise<void> {\n        if (!this.otherMember) {\n            // Should never happen.\n            throw new CoreError('No member selected to be blocked.');\n        }\n\n        if (this.otherMember.canmessageevenifblocked) {\n            CoreDomUtils.showErrorModal(Translate.instant('addon.messages.cantblockuser', { $a: this.otherMember.fullname }));\n\n            return;\n        }\n\n        const template = Translate.instant('addon.messages.blockuserconfirm', { $a: this.otherMember.fullname });\n        const okText = Translate.instant('addon.messages.blockuser');\n\n        try {\n            await CoreDomUtils.showConfirm(template, undefined, okText);\n            this.blockIcon = CoreConstants.ICON_LOADING;\n\n            const modal = await CoreDomUtils.showModalLoading('core.sending', true);\n            this.showLoadingModal = true;\n\n            try {\n                try {\n                    await AddonMessages.blockContact(this.otherMember.id);\n                } finally {\n                    modal.dismiss();\n                    this.showLoadingModal = false;\n                }\n            } catch (error) {\n                CoreDomUtils.showErrorModalDefault(error, 'core.error', true);\n            } finally {\n                this.blockIcon = this.otherMember.isblocked ? 'fas-user-check' : 'fas-user-lock';\n            }\n        } catch {\n            // User cancelled.\n        }\n    }\n\n    /**\n     * Delete the conversation.\n     *\n     * @param done Function to call when done.\n     */\n    async deleteConversation(done?: () => void): Promise<void> {\n        if (!this.conversation) {\n            return;\n        }\n\n        const confirmMessage = 'addon.messages.' + (this.isSelf ? 'deleteallselfconfirm' : 'deleteallconfirm');\n\n        try {\n            await CoreDomUtils.showDeleteConfirm(confirmMessage);\n            this.deleteIcon = CoreConstants.ICON_LOADING;\n\n            try {\n                try {\n                    await AddonMessages.deleteConversation(this.conversation.id);\n\n                    CoreEvents.trigger(\n                        AddonMessagesProvider.UPDATE_CONVERSATION_LIST_EVENT,\n                        {\n                            conversationId: this.conversation.id,\n                            action: 'delete',\n                        },\n                        this.siteId,\n                    );\n\n                    this.messages = [];\n                } finally {\n                    done && done();\n                }\n            } catch (error) {\n                CoreDomUtils.showErrorModalDefault(error, 'Error deleting conversation.');\n            } finally {\n                this.deleteIcon = 'fas-trash';\n            }\n        } catch {\n            // User cancelled.\n        }\n    }\n\n    /**\n     * Displays a confirmation modal to unblock the user of the individual conversation.\n     *\n     * @returns Promise resolved when user is unblocked or dialog is cancelled.\n     */\n    async unblockUser(): Promise<void> {\n        if (!this.otherMember) {\n            // Should never happen.\n            throw new CoreError('No member selected to be unblocked.');\n        }\n\n        const template = Translate.instant('addon.messages.unblockuserconfirm', { $a: this.otherMember.fullname });\n        const okText = Translate.instant('addon.messages.unblockuser');\n\n        try {\n            await CoreDomUtils.showConfirm(template, undefined, okText);\n\n            this.blockIcon = CoreConstants.ICON_LOADING;\n\n            const modal = await CoreDomUtils.showModalLoading('core.sending', true);\n            this.showLoadingModal = true;\n\n            try {\n                try {\n                    await AddonMessages.unblockContact(this.otherMember.id);\n                } finally {\n                    modal.dismiss();\n                    this.showLoadingModal = false;\n                }\n            } catch (error) {\n                CoreDomUtils.showErrorModalDefault(error, 'core.error', true);\n            } finally {\n                this.blockIcon = this.otherMember.isblocked ? 'fas-user-check' : 'fas-user-lock';\n            }\n        } catch {\n            // User cancelled.\n        }\n    }\n\n    /**\n     * Displays a confirmation modal to send a contact request to the other user of the individual conversation.\n     *\n     * @returns Promise resolved when the request is sent or the dialog is cancelled.\n     */\n    async createContactRequest(): Promise<void> {\n        if (!this.otherMember) {\n            // Should never happen.\n            throw new CoreError('No member selected to be requested.');\n        }\n\n        const template = Translate.instant('addon.messages.addcontactconfirm', { $a: this.otherMember.fullname });\n        const okText = Translate.instant('core.add');\n\n        try {\n            await CoreDomUtils.showConfirm(template, undefined, okText);\n\n            this.addRemoveIcon = CoreConstants.ICON_LOADING;\n\n            const modal = await CoreDomUtils.showModalLoading('core.sending', true);\n            this.showLoadingModal = true;\n\n            try {\n                try {\n                    await AddonMessages.createContactRequest(this.otherMember.id);\n                } finally {\n                    modal.dismiss();\n                    this.showLoadingModal = false;\n                }\n            } catch (error) {\n                CoreDomUtils.showErrorModalDefault(error, 'core.error', true);\n            } finally {\n                this.addRemoveIcon = 'fas-user-plus';\n            }\n        } catch {\n            // User cancelled.\n        }\n    }\n\n    /**\n     * Confirms the contact request of the other user of the individual conversation.\n     *\n     * @returns Promise resolved when the request is confirmed.\n     */\n    async confirmContactRequest(): Promise<void> {\n        if (!this.otherMember) {\n            // Should never happen.\n            throw new CoreError('No member selected to be confirmed.');\n        }\n\n        const modal = await CoreDomUtils.showModalLoading('core.sending', true);\n        this.showLoadingModal = true;\n\n        try {\n            try {\n                await AddonMessages.confirmContactRequest(this.otherMember.id);\n            } finally {\n                modal.dismiss();\n                this.showLoadingModal = false;\n            }\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'core.error', true);\n        }\n    }\n\n    /**\n     * Declines the contact request of the other user of the individual conversation.\n     *\n     * @returns Promise resolved when the request is confirmed.\n     */\n    async declineContactRequest(): Promise<void> {\n        if (!this.otherMember) {\n            // Should never happen.\n            throw new CoreError('No member selected to be declined.');\n        }\n\n        const modal = await CoreDomUtils.showModalLoading('core.sending', true);\n        this.showLoadingModal = true;\n\n        try {\n            try {\n                await AddonMessages.declineContactRequest(this.otherMember.id);\n            } finally {\n                modal.dismiss();\n                this.showLoadingModal = false;\n            }\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'core.error', true);\n        }\n    }\n\n    /**\n     * Displays a confirmation modal to remove the other user of the conversation from contacts.\n     *\n     * @returns Promise resolved when the request is sent or the dialog is cancelled.\n     */\n    async removeContact(): Promise<void> {\n        if (!this.otherMember) {\n            // Should never happen.\n            throw new CoreError('No member selected to be removed.');\n        }\n\n        const template = Translate.instant('addon.messages.removecontactconfirm', { $a: this.otherMember.fullname });\n        const okText = Translate.instant('core.remove');\n\n        try {\n            await CoreDomUtils.showConfirm(template, undefined, okText);\n\n            this.addRemoveIcon = CoreConstants.ICON_LOADING;\n\n            const modal = await CoreDomUtils.showModalLoading('core.sending', true);\n            this.showLoadingModal = true;\n\n            try {\n                try {\n                    await AddonMessages.removeContact(this.otherMember.id);\n                } finally {\n                    modal.dismiss();\n                    this.showLoadingModal = false;\n                }\n            } catch (error) {\n                CoreDomUtils.showErrorModalDefault(error, 'core.error', true);\n            } finally {\n                this.addRemoveIcon = 'fas-user-plus';\n            }\n        } catch {\n            // User cancelled.\n        }\n\n    }\n\n    /**\n     * Page destroyed.\n     */\n    ngOnDestroy(): void {\n        // Unset again, just in case.\n        this.unsetPolling();\n        this.syncObserver?.off();\n        this.memberInfoObserver?.off();\n        this.viewDestroyed = true;\n    }\n\n}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { CoreEventObserver, CoreEvents } from '@singletons/events';\nimport { CoreSites } from '@services/sites';\nimport {\n    AddonMessages,\n    AddonMessagesDiscussion,\n    AddonMessagesMessageAreaContact,\n    AddonMessagesProvider,\n} from '../../services/messages';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreApp } from '@services/app';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport { CorePushNotificationsNotificationBasicData } from '@features/pushnotifications/services/pushnotifications';\nimport { CorePushNotificationsDelegate } from '@features/pushnotifications/services/push-delegate';\nimport { Subscription } from 'rxjs';\nimport { Translate } from '@singletons';\nimport { IonRefresher } from '@ionic/angular';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreScreen } from '@services/screen';\nimport { CoreMainMenuDeepLinkManager } from '@features/mainmenu/classes/deep-link-manager';\nimport { CorePlatform } from '@services/platform';\nimport { CoreSplitViewComponent } from '@components/split-view/split-view';\n\n/**\n * Page that displays the list of discussions.\n */\n@Component({\n    selector: 'addon-messages-discussions',\n    templateUrl: 'discussions.html',\n    styleUrls: ['../../messages-common.scss'],\n})\nexport class AddonMessagesDiscussions35Page implements OnInit, OnDestroy {\n\n    @ViewChild(CoreSplitViewComponent) splitView!: CoreSplitViewComponent;\n\n    protected newMessagesObserver: CoreEventObserver;\n    protected readChangedObserver: CoreEventObserver;\n    protected appResumeSubscription: Subscription;\n    protected pushObserver: Subscription;\n    protected loadingMessages: string;\n    protected siteId: string;\n\n    loaded = false;\n    loadingMessage = '';\n    discussions: AddonMessagesDiscussion[] = [];\n    discussionUserId?: number;\n\n    search = {\n        showResults: false,\n        results: <AddonMessagesMessageAreaContact[]> [],\n        loading: '',\n        text: '',\n    };\n\n    constructor(\n        protected route: ActivatedRoute,\n    ) {\n\n        this.search.loading = Translate.instant('core.searching');\n        this.loadingMessages = Translate.instant('core.loading');\n        this.siteId = CoreSites.getCurrentSiteId();\n\n        // Update discussions when new message is received.\n        this.newMessagesObserver = CoreEvents.on(\n            AddonMessagesProvider.NEW_MESSAGE_EVENT,\n            (data) => {\n                if (data.userId && this.discussions) {\n                    const discussion = this.discussions.find((disc) => disc.message?.user === data.userId);\n\n                    if (discussion === undefined) {\n                        this.loaded = false;\n                        this.refreshData().finally(() => {\n                            this.loaded = true;\n                        });\n                    } else if (discussion.message) {\n                        // An existing discussion has a new message, update the last message.\n                        discussion.message.message = data.message;\n                        discussion.message.timecreated = data.timecreated;\n                    }\n                }\n            },\n            this.siteId,\n        );\n\n        // Update discussions when a message is read.\n        this.readChangedObserver = CoreEvents.on(\n            AddonMessagesProvider.READ_CHANGED_EVENT,\n            (data) => {\n                if (data.userId && this.discussions) {\n                    const discussion = this.discussions.find((disc) => disc.message?.user === data.userId);\n\n                    if (discussion !== undefined) {\n                        // A discussion has been read reset counter.\n                        discussion.unread = false;\n\n                        // Conversations changed, invalidate them and refresh unread counts.\n                        AddonMessages.invalidateConversations(this.siteId);\n                        AddonMessages.refreshUnreadConversationCounts(this.siteId);\n                    }\n                }\n            },\n            this.siteId,\n        );\n\n        // Refresh the view when the app is resumed.\n        this.appResumeSubscription = CorePlatform.resume.subscribe(() => {\n            if (!this.loaded) {\n                return;\n            }\n            this.loaded = false;\n            this.refreshData();\n        });\n\n        // If a message push notification is received, refresh the view.\n        this.pushObserver = CorePushNotificationsDelegate.on<CorePushNotificationsNotificationBasicData>('receive')\n            .subscribe((notification) => {\n                // New message received. If it's from current site, refresh the data.\n                if (CoreUtils.isFalseOrZero(notification.notif) && notification.site == this.siteId) {\n                // Don't refresh unread counts, it's refreshed from the main menu handler in this case.\n                    this.refreshData(undefined, false);\n                }\n            });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async ngOnInit(): Promise<void> {\n        this.route.queryParams.subscribe(async (params) => {\n            // When a child page loads this callback is triggered too.\n            this.discussionUserId = CoreNavigator.getRouteNumberParam('userId', { params }) ?? this.discussionUserId;\n        });\n\n        const deepLinkManager = new CoreMainMenuDeepLinkManager();\n\n        await this.fetchData();\n\n        if (!this.discussionUserId && this.discussions.length > 0 && CoreScreen.isTablet && this.discussions[0].message) {\n            // Take first and load it.\n            await this.gotoDiscussion(this.discussions[0].message.user);\n        }\n\n        // Treat deep link now that the conversation route has been loaded if needed.\n        deepLinkManager.treatLink();\n    }\n\n    /**\n     * Refresh the data.\n     *\n     * @param refresher Refresher.\n     * @param refreshUnreadCounts Whteher to refresh unread counts.\n     * @returns Promise resolved when done.\n     */\n    async refreshData(refresher?: IonRefresher, refreshUnreadCounts: boolean = true): Promise<void> {\n        const promises: Promise<void>[] = [];\n        promises.push(AddonMessages.invalidateDiscussionsCache(this.siteId));\n\n        if (refreshUnreadCounts) {\n            promises.push(AddonMessages.invalidateUnreadConversationCounts(this.siteId));\n        }\n\n        await CoreUtils.allPromises(promises).finally(() => this.fetchData().finally(() => {\n            if (refresher) {\n                refresher?.complete();\n            }\n        }));\n    }\n\n    /**\n     * Fetch discussions.\n     *\n     * @returns Promise resolved when done.\n     */\n    protected async fetchData(): Promise<void> {\n        this.loadingMessage = this.loadingMessages;\n\n        const promises: Promise<unknown>[] = [];\n\n        promises.push(AddonMessages.getDiscussions(this.siteId).then((discussions) => {\n            // Convert to an array for sorting.\n            const discussionsSorted: AddonMessagesDiscussion[] = [];\n            for (const userId in discussions) {\n                discussions[userId].unread = !!discussions[userId].unread;\n\n                discussionsSorted.push(discussions[userId]);\n            }\n\n            this.discussions = discussionsSorted.sort((a, b) => (b.message?.timecreated || 0) - (a.message?.timecreated || 0));\n\n            return;\n        }));\n\n        promises.push(AddonMessages.getUnreadConversationCounts(this.siteId));\n\n        try {\n            await Promise.all(promises);\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'addon.messages.errorwhileretrievingdiscussions', true);\n        }\n\n        this.loaded = true;\n    }\n\n    /**\n     * Clear search and show discussions again.\n     */\n    clearSearch(): void {\n        this.loaded = false;\n        this.search.showResults = false;\n        this.search.text = ''; // Reset searched string.\n        this.fetchData().finally(() => {\n            this.loaded = true;\n        });\n    }\n\n    /**\n     * Search messages cotaining text.\n     *\n     * @param query Text to search for.\n     * @returns Resolved when done.\n     */\n    async searchMessage(query: string): Promise<void> {\n        CoreApp.closeKeyboard();\n        this.loaded = false;\n        this.loadingMessage = this.search.loading;\n\n        try {\n            const searchResults = await AddonMessages.searchMessages(query, undefined, undefined, undefined, this.siteId);\n            this.search.showResults = true;\n            this.search.results = searchResults.messages;\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'addon.messages.errorwhileretrievingmessages', true);\n        }\n\n        this.loaded = true;\n    }\n\n    /**\n     * Navigate to a particular discussion.\n     *\n     * @param discussionUserId Discussion Id to load.\n     * @param messageId Message to scroll after loading the discussion. Used when searching.\n     */\n    async gotoDiscussion(discussionUserId: number, messageId?: number): Promise<void> {\n        this.discussionUserId = discussionUserId;\n\n        const params: Params = {};\n\n        if (messageId) {\n            params.message = messageId;\n        }\n\n        const path = CoreNavigator.getRelativePathToParent('/messages/index') + `discussion/user/${discussionUserId}`;\n\n        await CoreNavigator.navigate(path, {\n            params,\n            reset: CoreScreen.isTablet && !!this.splitView && !this.splitView.isNested,\n        });\n    }\n\n    /**\n     * Navigate to contacts view.\n     */\n    gotoContacts(): void {\n        const params: Params = {};\n\n        if (CoreScreen.isTablet && this.discussionUserId) {\n            params.discussionUserId = this.discussionUserId;\n        }\n\n        CoreNavigator.navigateToSitePath('contacts-35', { params });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnDestroy(): void {\n        this.newMessagesObserver?.off();\n        this.readChangedObserver?.off();\n        this.appResumeSubscription?.unsubscribe();\n        this.pushObserver?.unsubscribe();\n    }\n\n}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnInit, OnDestroy, ViewChild, ElementRef } from '@angular/core';\nimport { IonContent, IonRefresher } from '@ionic/angular';\nimport { CoreEventObserver, CoreEvents } from '@singletons/events';\nimport { CoreSites } from '@services/sites';\nimport {\n    AddonMessagesProvider,\n    AddonMessagesConversationFormatted,\n    AddonMessages,\n    AddonMessagesNewMessagedEventData,\n} from '../../services/messages';\nimport {\n    AddonMessagesOffline,\n    AddonMessagesOfflineAnyMessagesFormatted,\n} from '../../services/messages-offline';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreUser } from '@features/user/services/user';\nimport { CorePushNotificationsDelegate } from '@features/pushnotifications/services/push-delegate';\nimport { Translate } from '@singletons';\nimport { Subscription } from 'rxjs';\nimport { CorePushNotificationsNotificationBasicData } from '@features/pushnotifications/services/pushnotifications';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreScreen } from '@services/screen';\nimport { CoreMainMenuDeepLinkManager } from '@features/mainmenu/classes/deep-link-manager';\nimport { CorePlatform } from '@services/platform';\nimport { CoreSplitViewComponent } from '@components/split-view/split-view';\n\n/**\n * Page that displays the list of conversations, including group conversations.\n */\n@Component({\n    selector: 'page-addon-messages-group-conversations',\n    templateUrl: 'group-conversations.html',\n    styleUrls: ['../../messages-common.scss'],\n})\nexport class AddonMessagesGroupConversationsPage implements OnInit, OnDestroy {\n\n    @ViewChild(CoreSplitViewComponent) splitView!: CoreSplitViewComponent;\n\n    @ViewChild(IonContent) content?: IonContent;\n    @ViewChild('favlist') favListEl?: ElementRef;\n    @ViewChild('grouplist') groupListEl?: ElementRef;\n    @ViewChild('indlist') indListEl?: ElementRef;\n\n    loaded = false;\n    loadingMessage: string;\n    selectedConversationId?: number;\n    selectedUserId?: number;\n    contactRequestsCount = 0;\n    favourites: AddonMessagesGroupConversationOption = {\n        type: undefined,\n        favourites: true,\n        count: 0,\n        unread: 0,\n        conversations: [],\n    };\n\n    group: AddonMessagesGroupConversationOption = {\n        type: AddonMessagesProvider.MESSAGE_CONVERSATION_TYPE_GROUP,\n        favourites: false,\n        count: 0,\n        unread: 0,\n        conversations: [],\n    };\n\n    individual: AddonMessagesGroupConversationOption = {\n        type: AddonMessagesProvider.MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,\n        favourites: false,\n        count: 0,\n        unread: 0,\n        conversations: [],\n    };\n\n    typeGroup = AddonMessagesProvider.MESSAGE_CONVERSATION_TYPE_GROUP;\n    currentListEl?: HTMLElement;\n\n    protected siteId: string;\n    protected currentUserId: number;\n    protected newMessagesObserver: CoreEventObserver;\n    protected pushObserver: Subscription;\n    protected appResumeSubscription: Subscription;\n    protected readChangedObserver: CoreEventObserver;\n    protected cronObserver: CoreEventObserver;\n    protected openConversationObserver: CoreEventObserver;\n    protected updateConversationListObserver: CoreEventObserver;\n    protected contactRequestsCountObserver: CoreEventObserver;\n    protected memberInfoObserver: CoreEventObserver;\n\n    constructor(\n        protected route: ActivatedRoute,\n    ) {\n        this.loadingMessage = Translate.instant('core.loading');\n        this.siteId = CoreSites.getCurrentSiteId();\n        this.currentUserId = CoreSites.getCurrentSiteUserId();\n\n        // Update conversations when new message is received.\n        this.newMessagesObserver = CoreEvents.on(\n            AddonMessagesProvider.NEW_MESSAGE_EVENT,\n            (data) => {\n            // Check if the new message belongs to the option that is currently expanded.\n                const expandedOption = this.getExpandedOption();\n                const messageOption = this.getConversationOption(data);\n\n                if (expandedOption != messageOption) {\n                    return; // Message doesn't belong to current list, stop.\n                }\n\n                // Search the conversation to update.\n                const conversation = this.findConversation(data.conversationId, data.userId, expandedOption);\n\n                if (conversation === undefined) {\n                // Probably a new conversation, refresh the list.\n                    this.loaded = false;\n                    this.refreshData().finally(() => {\n                        this.loaded = true;\n                    });\n\n                    return;\n                }\n                if (conversation.lastmessage != data.message || conversation.lastmessagedate != data.timecreated / 1000) {\n                    const isNewer = data.timecreated / 1000 > (conversation.lastmessagedate || 0);\n\n                    // An existing conversation has a new message, update the last message.\n                    conversation.lastmessage = data.message;\n                    conversation.lastmessagedate = data.timecreated / 1000;\n\n                    // Sort the affected list.\n                    const option = this.getConversationOption(conversation);\n                    option.conversations = AddonMessages.sortConversations(option.conversations || []);\n\n                    if (isNewer) {\n                    // The last message is newer than the previous one, scroll to top to keep viewing the conversation.\n                        this.content?.scrollToTop();\n                    }\n                }\n            },\n            this.siteId,\n        );\n\n        // Update conversations when a message is read.\n        this.readChangedObserver = CoreEvents.on(AddonMessagesProvider.READ_CHANGED_EVENT, (data) => {\n            if (data.conversationId) {\n                const conversation = this.findConversation(data.conversationId);\n\n                if (conversation !== undefined) {\n                    // A conversation has been read reset counter.\n                    conversation.unreadcount = 0;\n\n                    // Conversations changed, invalidate them and refresh unread counts.\n                    AddonMessages.invalidateConversations(this.siteId);\n                    AddonMessages.refreshUnreadConversationCounts(this.siteId);\n                }\n            }\n        }, this.siteId);\n\n        // Load a discussion if we receive an event to do so.\n        this.openConversationObserver = CoreEvents.on(\n            AddonMessagesProvider.OPEN_CONVERSATION_EVENT,\n            (data) => {\n                if (data.conversationId || data.userId) {\n                    this.gotoConversation(data.conversationId, data.userId);\n                }\n            },\n            this.siteId,\n        );\n\n        // Refresh the view when the app is resumed.\n        this.appResumeSubscription = CorePlatform.resume.subscribe(() => {\n            if (!this.loaded) {\n                return;\n            }\n            this.loaded = false;\n            this.refreshData().finally(() => {\n                this.loaded = true;\n            });\n        });\n\n        // Update conversations if we receive an event to do so.\n        this.updateConversationListObserver = CoreEvents.on(\n            AddonMessagesProvider.UPDATE_CONVERSATION_LIST_EVENT,\n            (data) => {\n                if (data && data.action == 'mute') {\n                // If the conversation is displayed, change its muted value.\n                    const expandedOption = this.getExpandedOption();\n\n                    if (expandedOption && expandedOption.conversations) {\n                        const conversation = this.findConversation(data.conversationId, undefined, expandedOption);\n                        if (conversation) {\n                            conversation.ismuted = !!data.value;\n                        }\n                    }\n\n                    return;\n                }\n\n                this.refreshData();\n\n            },\n            this.siteId,\n        );\n\n        // If a message push notification is received, refresh the view.\n        this.pushObserver = CorePushNotificationsDelegate.on<CorePushNotificationsNotificationBasicData>('receive')\n            .subscribe((notification) => {\n                // New message received. If it's from current site, refresh the data.\n                if (CoreUtils.isFalseOrZero(notification.notif) && notification.site == this.siteId) {\n                // Don't refresh unread counts, it's refreshed from the main menu handler in this case.\n                    this.refreshData(undefined, false);\n                }\n            });\n\n        // Update unread conversation counts.\n        this.cronObserver = CoreEvents.on(\n            AddonMessagesProvider.UNREAD_CONVERSATION_COUNTS_EVENT,\n            (data) => {\n                this.favourites.unread = data.favourites;\n                this.individual.unread = data.individual + data.self; // Self is only returned if it's not favourite.\n                this.group.unread = data.group;\n            },\n            this.siteId,\n        );\n\n        // Update the contact requests badge.\n        this.contactRequestsCountObserver = CoreEvents.on(\n            AddonMessagesProvider.CONTACT_REQUESTS_COUNT_EVENT,\n            (data) => {\n                this.contactRequestsCount = data.count;\n            },\n            this.siteId,\n        );\n\n        // Update block status of a user.\n        this.memberInfoObserver = CoreEvents.on(\n            AddonMessagesProvider.MEMBER_INFO_CHANGED_EVENT,\n            (data) => {\n                if (!data.userBlocked && !data.userUnblocked) {\n                // The block status has not changed, ignore.\n                    return;\n                }\n\n                const expandedOption = this.getExpandedOption();\n                if (expandedOption == this.individual || expandedOption == this.favourites) {\n                    if (!expandedOption.conversations || expandedOption.conversations.length <= 0) {\n                        return;\n                    }\n\n                    const conversation = this.findConversation(undefined, data.userId, expandedOption);\n                    if (conversation) {\n                        conversation.isblocked = data.userBlocked;\n                    }\n                }\n            },\n            this.siteId,\n        );\n    }\n\n    /**\n     * Component loaded.\n     */\n    async ngOnInit(): Promise<void> {\n        this.route.queryParams.subscribe(async (params) => {\n            // When a child page loads this callback is triggered too.\n            const conversationId = CoreNavigator.getRouteNumberParam('conversationId', { params });\n            const userId = CoreNavigator.getRouteNumberParam('userId', { params });\n            if (conversationId || userId) {\n                // Update the selected ones.\n                this.selectedConversationId = conversationId;\n                this.selectedUserId = userId;\n            }\n        });\n\n        const deepLinkManager = new CoreMainMenuDeepLinkManager();\n\n        await this.fetchData();\n\n        if (!this.selectedConversationId && !this.selectedUserId && CoreScreen.isTablet) {\n            // Load the first conversation.\n            let conversation: AddonMessagesConversationForList;\n            const expandedOption = this.getExpandedOption();\n\n            if (expandedOption && expandedOption.conversations.length) {\n                conversation = expandedOption.conversations[0];\n\n                if (conversation) {\n                    await this.gotoConversation(conversation.id);\n                }\n            }\n        }\n\n        // Treat deep link now that the conversation route has been loaded if needed.\n        deepLinkManager.treatLink();\n    }\n\n    /**\n     * Fetch conversations.\n     *\n     * @param refreshUnreadCounts Whether to refresh unread counts.\n     * @returns Promise resolved when done.\n     */\n    protected async fetchData(refreshUnreadCounts: boolean = true): Promise<void> {\n        // Load the amount of conversations and contact requests.\n        const promises: Promise<unknown>[] = [];\n\n        promises.push(this.fetchConversationCounts());\n\n        // View updated by the events observers.\n        promises.push(AddonMessages.getContactRequestsCount(this.siteId));\n        if (refreshUnreadCounts) {\n            promises.push(AddonMessages.refreshUnreadConversationCounts(this.siteId));\n        }\n\n        try {\n            await Promise.all(promises);\n\n            // The expanded status hasn't been initialized. Do it now.\n            if (this.favourites.expanded === undefined && (this.selectedConversationId || this.selectedUserId)) {\n                // A certain conversation should be opened.\n                // We don't know which option it belongs to, so we need to fetch the data for all of them.\n                const promises: Promise<void>[] = [];\n\n                promises.push(this.fetchDataForOption(this.favourites, false));\n                promises.push(this.fetchDataForOption(this.group, false));\n                promises.push(this.fetchDataForOption(this.individual, false));\n\n                await Promise.all(promises);\n                // All conversations have been loaded, find the one we need to load and expand its option.\n                const conversation = this.findConversation(this.selectedConversationId, this.selectedUserId);\n                if (conversation) {\n                    const option = this.getConversationOption(conversation);\n\n                    await this.expandOption(option);\n\n                    this.loaded = true;\n\n                    return;\n                }\n            }\n\n            // Load the data for the expanded option.\n            await this.fetchDataForExpandedOption();\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'addon.messages.errorwhileretrievingdiscussions', true);\n        }\n        this.loaded = true;\n    }\n\n    /**\n     * Fetch data for the expanded option.\n     *\n     * @returns Promise resolved when done.\n     */\n    protected async fetchDataForExpandedOption(): Promise<void> {\n        if (this.favourites.expanded === undefined) {\n            // Calculate which option should be expanded initially.\n            this.favourites.expanded = this.favourites.count != 0 && !this.group.unread && !this.individual.unread;\n            this.group.expanded = !this.favourites.expanded && this.group.count != 0 && !this.individual.unread;\n            this.individual.expanded = !this.favourites.expanded && !this.group.expanded;\n        }\n\n        this.loadCurrentListElement();\n\n        const expandedOption = this.getExpandedOption();\n\n        if (expandedOption) {\n            await this.fetchDataForOption(expandedOption, false);\n        }\n    }\n\n    /**\n     * Fetch data for a certain option.\n     *\n     * @param option The option to fetch data for.\n     * @param loadingMore Whether we are loading more data or just the first ones.\n     * @param getCounts Whether to get counts data.\n     * @returns Promise resolved when done.\n     */\n    async fetchDataForOption(\n        option: AddonMessagesGroupConversationOption,\n        loadingMore = false,\n        getCounts = false,\n    ): Promise<void> {\n        option.loadMoreError = false;\n\n        const limitFrom = loadingMore ? option.conversations.length : 0;\n        const promises: Promise<unknown>[] = [];\n\n        let data = {\n            conversations: <AddonMessagesConversationForList[]> [],\n            canLoadMore: false,\n        };\n        let offlineMessages:\n        AddonMessagesOfflineAnyMessagesFormatted[] = [];\n\n        // Get the conversations and, if needed, the offline messages. Always try to get the latest data.\n        promises.push(AddonMessages.invalidateConversations(this.siteId).then(async () => {\n            data = await AddonMessages.getConversations(option.type, option.favourites, limitFrom, this.siteId);\n\n            return;\n        }));\n\n        if (!loadingMore) {\n            promises.push(AddonMessagesOffline.getAllMessages().then((messages) => {\n                offlineMessages = messages;\n\n                return;\n            }));\n        }\n\n        if (getCounts) {\n            promises.push(this.fetchConversationCounts());\n            promises.push(AddonMessages.refreshUnreadConversationCounts(this.siteId));\n        }\n\n        await Promise.all(promises);\n\n        if (loadingMore) {\n            option.conversations = option.conversations.concat(data.conversations);\n            option.canLoadMore = data.canLoadMore;\n        } else {\n            option.conversations = data.conversations;\n            option.canLoadMore = data.canLoadMore;\n\n            if (offlineMessages && offlineMessages.length) {\n                await this.loadOfflineMessages(option, offlineMessages);\n\n                // Sort the conversations, the offline messages could affect the order.\n                option.conversations = AddonMessages.sortConversations(option.conversations);\n            }\n        }\n    }\n\n    /**\n     * Fetch conversation counts.\n     *\n     * @returns Promise resolved when done.\n     */\n    protected async fetchConversationCounts(): Promise<void> {\n        // Always try to get the latest data.\n        await AddonMessages.invalidateConversationCounts(this.siteId);\n\n        const counts = await AddonMessages.getConversationCounts(this.siteId);\n        this.favourites.count = counts.favourites;\n        this.individual.count = counts.individual + counts.self; // Self is only returned if it's not favourite.\n        this.group.count = counts.group;\n    }\n\n    /**\n     * Find a conversation in the list of loaded conversations.\n     *\n     * @param conversationId The conversation ID to search.\n     * @param userId User ID to search (if no conversationId).\n     * @param option The option to search in. If not defined, search in all options.\n     * @returns Conversation.\n     */\n    protected findConversation(\n        conversationId?: number,\n        userId?: number,\n        option?: AddonMessagesGroupConversationOption,\n    ): AddonMessagesConversationForList | undefined {\n\n        if (conversationId) {\n            const conversations: AddonMessagesConversationForList[] = option\n                ? option.conversations\n                : (this.favourites.conversations.concat(this.group.conversations).concat(this.individual.conversations));\n\n            return conversations.find((conv) => conv.id == conversationId);\n        }\n\n        const conversations = option\n            ? option.conversations\n            : this.favourites.conversations.concat(this.individual.conversations);\n\n        return conversations.find((conv) => conv.userid == userId);\n    }\n\n    /**\n     * Get the option that is currently expanded, undefined if they are all collapsed.\n     *\n     * @returns Option currently expanded.\n     */\n    protected getExpandedOption(): AddonMessagesGroupConversationOption | undefined {\n        if (this.favourites.expanded) {\n            return this.favourites;\n        } else if (this.group.expanded) {\n            return this.group;\n        } else if (this.individual.expanded) {\n            return this.individual;\n        }\n    }\n\n    /**\n     * Navigate to contacts view.\n     */\n    gotoContacts(): void {\n        CoreNavigator.navigateToSitePath('contacts');\n    }\n\n    /**\n     * Navigate to a particular conversation.\n     *\n     * @param conversationId Conversation Id to load.\n     * @param userId User of the conversation. Only if there is no conversationId.\n     * @param messageId Message to scroll after loading the discussion. Used when searching.\n     */\n    async gotoConversation(conversationId?: number, userId?: number, messageId?: number): Promise<void> {\n        this.selectedConversationId = conversationId;\n        this.selectedUserId = userId;\n\n        const params: Params = {};\n        if (messageId) {\n            params.message = messageId;\n        }\n\n        const path = CoreNavigator.getRelativePathToParent('/messages/group-conversations') + 'discussion/' +\n            (conversationId ? conversationId : `user/${userId}`);\n\n        await CoreNavigator.navigate(path, {\n            params,\n            reset: CoreScreen.isTablet && !!this.splitView && !this.splitView.isNested,\n        });\n    }\n\n    /**\n     * Navigate to message settings.\n     */\n    gotoSettings(): void {\n        CoreNavigator.navigateToSitePath('message-settings');\n    }\n\n    /**\n     * Function to load more conversations.\n     *\n     * @param option The option to fetch data for.\n     * @param infiniteComplete Infinite scroll complete function. Only used from core-infinite-loading.\n     * @returns Promise resolved when done.\n     */\n    async loadMoreConversations(option: AddonMessagesGroupConversationOption, infiniteComplete?: () => void): Promise<void> {\n        try {\n            await this.fetchDataForOption(option, true);\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'addon.messages.errorwhileretrievingdiscussions', true);\n            option.loadMoreError = true;\n        }\n\n        infiniteComplete && infiniteComplete();\n    }\n\n    /**\n     * Load offline messages into the conversations.\n     *\n     * @param option The option where the messages should be loaded.\n     * @param messages Offline messages.\n     * @returns Promise resolved when done.\n     */\n    protected async loadOfflineMessages(\n        option: AddonMessagesGroupConversationOption,\n        messages: AddonMessagesOfflineAnyMessagesFormatted[],\n    ): Promise<void> {\n        const promises: Promise<void>[] = [];\n\n        messages.forEach((message) => {\n            if ('conversationid' in message) {\n                // It's an existing conversation. Search it in the current option.\n                let conversation = this.findConversation(message.conversationid, undefined, option);\n\n                if (conversation) {\n                    // Check if it's the last message. Offline messages are considered more recent than sent messages.\n                    if (conversation.lastmessage === undefined || conversation.lastmessage === null ||\n                            !conversation.lastmessagepending || (conversation.lastmessagedate || 0) <= message.timecreated / 1000) {\n\n                        this.addLastOfflineMessage(conversation, message);\n                    }\n                } else {\n                    // Conversation not found, it could be an old one or the message could belong to another option.\n                    conversation = {\n                        id: message.conversationid,\n                        type: message.conversation?.type || AddonMessagesProvider.MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,\n                        membercount: message.conversation?.membercount || 0,\n                        ismuted: message.conversation?.ismuted || false,\n                        isfavourite: message.conversation?.isfavourite || false,\n                        isread: message.conversation?.isread || false,\n                        members: message.conversation?.members || [],\n                        messages: message.conversation?.messages || [],\n                        candeletemessagesforallusers: message.conversation?.candeletemessagesforallusers || false,\n                        userid: 0, // Faked data.\n                        name: message.conversation?.name,\n                        imageurl: message.conversation?.imageurl || '',\n                    };\n\n                    if (this.getConversationOption(conversation) == option) {\n                        // Message belongs to current option, add the conversation.\n                        this.addLastOfflineMessage(conversation, message);\n                        this.addOfflineConversation(conversation);\n                    }\n                }\n            } else if (option.type == AddonMessagesProvider.MESSAGE_CONVERSATION_TYPE_INDIVIDUAL) {\n                // It's a new conversation. Check if we already created it (there is more than one message for the same user).\n                const conversation = this.findConversation(undefined, message.touserid, option);\n\n                message.text = message.smallmessage;\n\n                if (conversation) {\n                    // Check if it's the last message. Offline messages are considered more recent than sent messages.\n                    if ((conversation.lastmessagedate || 0) <= message.timecreated / 1000) {\n                        this.addLastOfflineMessage(conversation, message);\n                    }\n                } else {\n                    // Get the user data and create a new conversation if it belongs to the current option.\n                    promises.push(CoreUser.getProfile(message.touserid, undefined, true).catch(() => {\n                        // User not found.\n                    }).then((user) => {\n                        const conversation: AddonMessagesConversationForList = {\n                            id: 0,\n                            type: AddonMessagesProvider.MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,\n                            membercount: 0, // Faked data.\n                            ismuted: false, // Faked data.\n                            isfavourite: false, // Faked data.\n                            isread: false, // Faked data.\n                            members: [], // Faked data.\n                            messages: [], // Faked data.\n                            candeletemessagesforallusers: false,\n                            userid: message.touserid,\n                            name: user ? user.fullname : String(message.touserid),\n                            imageurl: user ? user.profileimageurl : '',\n                        };\n\n                        this.addLastOfflineMessage(conversation, message);\n                        this.addOfflineConversation(conversation);\n\n                        return;\n                    }));\n                }\n            }\n        });\n\n        await Promise.all(promises);\n    }\n\n    /**\n     * Add an offline conversation into the right list of conversations.\n     *\n     * @param conversation Offline conversation to add.\n     */\n    protected addOfflineConversation(conversation: AddonMessagesConversationForList): void {\n        const option = this.getConversationOption(conversation);\n        option.conversations.unshift(conversation);\n    }\n\n    /**\n     * Add a last offline message into a conversation.\n     *\n     * @param conversation Conversation where to put the last message.\n     * @param message Offline message to add.\n     */\n    protected addLastOfflineMessage(\n        conversation: AddonMessagesConversationForList,\n        message: AddonMessagesOfflineAnyMessagesFormatted,\n    ): void {\n        conversation.lastmessage = message.text;\n        conversation.lastmessagedate = message.timecreated / 1000;\n        conversation.lastmessagepending = true;\n        conversation.sentfromcurrentuser = true;\n    }\n\n    /**\n     * Given a conversation, return its option (favourites, group, individual).\n     *\n     * @param conversation Conversation to check.\n     * @returns Option object.\n     */\n    protected getConversationOption(\n        conversation: AddonMessagesConversationForList | AddonMessagesNewMessagedEventData,\n    ): AddonMessagesGroupConversationOption {\n        if (conversation.isfavourite) {\n            return this.favourites;\n        }\n\n        if (conversation.type == AddonMessagesProvider.MESSAGE_CONVERSATION_TYPE_GROUP) {\n            return this.group;\n        }\n\n        return this.individual;\n    }\n\n    /**\n     * Refresh the data.\n     *\n     * @param refresher Refresher.\n     * @param refreshUnreadCounts Whether to refresh unread counts.\n     * @returns Promise resolved when done.\n     */\n    async refreshData(refresher?: IonRefresher, refreshUnreadCounts: boolean = true): Promise<void> {\n        // Don't invalidate conversations and so, they always try to get latest data.\n        try {\n            await AddonMessages.invalidateContactRequestsCountCache(this.siteId);\n        } finally {\n            try {\n                await this.fetchData(refreshUnreadCounts);\n            } finally {\n                if (refresher) {\n                    refresher?.complete();\n                }\n            }\n        }\n    }\n\n    /**\n     * Toogle the visibility of an option (expand/collapse).\n     *\n     * @param option The option to expand/collapse.\n     */\n    toggle(option: AddonMessagesGroupConversationOption): void {\n        if (option.expanded) {\n            // Already expanded, close it.\n            option.expanded = false;\n            this.loadCurrentListElement();\n        } else {\n            // Pass getCounts=true to update the counts everytime the user expands an option.\n            this.expandOption(option, true).catch((error) => {\n                CoreDomUtils.showErrorModalDefault(error, 'addon.messages.errorwhileretrievingdiscussions', true);\n            });\n        }\n    }\n\n    /**\n     * Expand a certain option.\n     *\n     * @param option The option to expand.\n     * @param getCounts Whether to get counts data.\n     * @returns Promise resolved when done.\n     */\n    protected async expandOption(option: AddonMessagesGroupConversationOption, getCounts = false): Promise<void> {\n        // Collapse all and expand the right one.\n        this.favourites.expanded = false;\n        this.group.expanded = false;\n        this.individual.expanded = false;\n\n        option.expanded = true;\n        option.loading = true;\n\n        try {\n            await this.fetchDataForOption(option, false, getCounts);\n\n            this.loadCurrentListElement();\n        } catch (error) {\n            option.expanded = false;\n\n            throw error;\n        } finally {\n            option.loading = false;\n        }\n\n    }\n\n    /**\n     * Load the current list element based on the expanded list.\n     */\n    protected loadCurrentListElement(): void {\n        if (this.favourites.expanded) {\n            this.currentListEl = this.favListEl && this.favListEl.nativeElement;\n        } else if (this.group.expanded) {\n            this.currentListEl = this.groupListEl && this.groupListEl.nativeElement;\n        } else if (this.individual.expanded) {\n            this.currentListEl = this.indListEl && this.indListEl.nativeElement;\n        } else {\n            this.currentListEl = undefined;\n        }\n    }\n\n    /**\n     * Navigate to the search page.\n     */\n    gotoSearch(): void {\n        CoreNavigator.navigateToSitePath('search');\n    }\n\n    /**\n     * Page destroyed.\n     */\n    ngOnDestroy(): void {\n        this.newMessagesObserver?.off();\n        this.appResumeSubscription?.unsubscribe();\n        this.pushObserver?.unsubscribe();\n        this.readChangedObserver?.off();\n        this.cronObserver?.off();\n        this.openConversationObserver?.off();\n        this.updateConversationListObserver?.off();\n        this.contactRequestsCountObserver?.off();\n        this.memberInfoObserver?.off();\n    }\n\n}\n\n/**\n * Conversation options.\n */\nexport type AddonMessagesGroupConversationOption = {\n    type?: number; // Option type.\n    favourites: boolean; // Whether it contains favourites conversations.\n    count: number; // Number of conversations.\n    unread?: number; // Number of unread conversations.\n    expanded?: boolean; // Whether the option is currently expanded.\n    loading?: boolean; // Whether the option is being loaded.\n    canLoadMore?: boolean; // Whether it can load more data.\n    loadMoreError?: boolean; // Whether there was an error loading more conversations.\n    conversations: AddonMessagesConversationForList[]; // List of conversations.\n};\n\n/**\n * Formatted conversation with some calculated data for the list.\n */\nexport type AddonMessagesConversationForList = AddonMessagesConversationFormatted & {\n    lastmessagepending?: boolean; // Calculated in the app. Whether last message is pending to be sent.\n};\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnDestroy, ViewChild } from '@angular/core';\nimport { CoreEventObserver, CoreEvents } from '@singletons/events';\nimport { CoreSites } from '@services/sites';\nimport {\n    AddonMessagesProvider,\n    AddonMessagesConversationMember,\n    AddonMessagesMessageAreaContact,\n    AddonMessages,\n} from '../../services/messages';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreApp } from '@services/app';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreScreen } from '@services/screen';\nimport { CoreSplitViewComponent } from '@components/split-view/split-view';\n\n/**\n * Page for searching users.\n */\n@Component({\n    selector: 'page-addon-messages-search',\n    templateUrl: 'search.html',\n})\nexport class AddonMessagesSearchPage implements OnDestroy {\n\n    @ViewChild(CoreSplitViewComponent) splitView!: CoreSplitViewComponent;\n\n    disableSearch = false;\n    displaySearching = false;\n    displayResults = false;\n    query = '';\n    contacts: AddonMessagesSearchResults = {\n        type: 'contacts',\n        titleString: 'addon.messages.contacts',\n        results: [],\n        canLoadMore: false,\n        loadingMore: false,\n    };\n\n    nonContacts: AddonMessagesSearchResults = {\n        type: 'noncontacts',\n        titleString: 'addon.messages.noncontacts',\n        results: [],\n        canLoadMore: false,\n        loadingMore: false,\n    };\n\n    messages: AddonMessagesSearchMessageResults = {\n        type: 'messages',\n        titleString: 'addon.messages.messages',\n        results: [],\n        canLoadMore: false,\n        loadingMore: false,\n        loadMoreError: false,\n    };\n\n    selectedResult?: AddonMessagesConversationMember | AddonMessagesMessageAreaContact;\n\n    protected memberInfoObserver: CoreEventObserver;\n\n    constructor() {\n        // Update block status of a user.\n        this.memberInfoObserver = CoreEvents.on(\n            AddonMessagesProvider.MEMBER_INFO_CHANGED_EVENT,\n            (data) => {\n                if (!data.userBlocked && !data.userUnblocked) {\n                    // The block status has not changed, ignore.\n                    return;\n                }\n\n                const contact = this.contacts.results.find((user) => user.id == data.userId);\n                if (contact) {\n                    contact.isblocked = !!data.userBlocked;\n                } else {\n                    const nonContact = this.nonContacts.results.find((user) => user.id == data.userId);\n                    if (nonContact) {\n                        nonContact.isblocked = !!data.userBlocked;\n                    }\n                }\n\n                this.messages.results.forEach((message: AddonMessagesMessageAreaContact): void => {\n                    if (message.userid == data.userId) {\n                        message.isblocked = !!data.userBlocked;\n                    }\n                });\n            },\n            CoreSites.getCurrentSiteId(),\n        );\n    }\n\n    /**\n     * Clear search.\n     */\n    clearSearch(): void {\n        this.query = '';\n        this.displayResults = false;\n\n        // Empty details.\n        const path = CoreNavigator.getRelativePathToParent('/messages/search');\n        if (path) {\n            CoreNavigator.navigate(path);\n        }\n    }\n\n    /**\n     * Start a new search or load more results.\n     *\n     * @param query Text to search for.\n     * @param loadMore Load more contacts, noncontacts or messages. If undefined, start a new search.\n     * @param infiniteComplete Infinite scroll complete function. Only used from core-infinite-loading.\n     * @returns Resolved when done.\n     */\n    async search(query: string, loadMore?: 'contacts' | 'noncontacts' | 'messages', infiniteComplete?: () => void): Promise<void> {\n        CoreApp.closeKeyboard();\n\n        this.query = query;\n        this.disableSearch = true;\n        this.displaySearching = !loadMore;\n\n        const promises: Promise<void>[] = [];\n        let newContacts: AddonMessagesConversationMember[] = [];\n        let newNonContacts: AddonMessagesConversationMember[] = [];\n        let newMessages: AddonMessagesMessageAreaContact[] = [];\n        let canLoadMoreContacts = false;\n        let canLoadMoreNonContacts = false;\n        let canLoadMoreMessages = false;\n\n        if (!loadMore || loadMore == 'contacts' || loadMore == 'noncontacts') {\n            const limitNum = loadMore ? AddonMessagesProvider.LIMIT_SEARCH : AddonMessagesProvider.LIMIT_INITIAL_USER_SEARCH;\n            let limitFrom = 0;\n            if (loadMore == 'contacts') {\n                limitFrom = this.contacts.results.length;\n                this.contacts.loadingMore = true;\n            } else if (loadMore == 'noncontacts') {\n                limitFrom = this.nonContacts.results.length;\n                this.nonContacts.loadingMore = true;\n            }\n\n            promises.push(\n                AddonMessages.searchUsers(query, limitFrom, limitNum).then((result) => {\n                    if (!loadMore || loadMore == 'contacts') {\n                        newContacts = result.contacts;\n                        canLoadMoreContacts = result.canLoadMoreContacts;\n                    }\n                    if (!loadMore || loadMore == 'noncontacts') {\n                        newNonContacts = result.nonContacts;\n                        canLoadMoreNonContacts = result.canLoadMoreNonContacts;\n                    }\n\n                    return;\n                }),\n            );\n        }\n\n        if (!loadMore || loadMore == 'messages') {\n            let limitFrom = 0;\n            if (loadMore == 'messages') {\n                limitFrom = this.messages.results.length;\n                this.messages.loadingMore = true;\n            }\n\n            promises.push(\n                AddonMessages.searchMessages(query, undefined, limitFrom).then((result) => {\n                    newMessages = result.messages;\n                    canLoadMoreMessages = result.canLoadMore;\n\n                    return;\n                }),\n            );\n        }\n\n        try {\n            await Promise.all(promises);\n            if (!loadMore) {\n                this.contacts.results = [];\n                this.nonContacts.results = [];\n                this.messages.results = [];\n            }\n\n            this.displayResults = true;\n\n            if (!loadMore || loadMore == 'contacts') {\n                this.contacts.results.push(...newContacts);\n                this.contacts.canLoadMore = canLoadMoreContacts;\n                this.setHighlight(newContacts, true);\n            }\n\n            if (!loadMore || loadMore == 'noncontacts') {\n                this.nonContacts.results.push(...newNonContacts);\n                this.nonContacts.canLoadMore = canLoadMoreNonContacts;\n                this.setHighlight(newNonContacts, true);\n            }\n\n            if (!loadMore || loadMore == 'messages') {\n                this.messages.results.push(...newMessages);\n                this.messages.canLoadMore = canLoadMoreMessages;\n                this.messages.loadMoreError = false;\n                this.setHighlight(newMessages, false);\n            }\n\n            if (!loadMore) {\n                if (this.contacts.results.length > 0) {\n                    this.openConversation(this.contacts.results[0], true);\n                } else if (this.nonContacts.results.length > 0) {\n                    this.openConversation(this.nonContacts.results[0], true);\n                } else if (this.messages.results.length > 0) {\n                    this.openConversation(this.messages.results[0], true);\n                }\n            }\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'addon.messages.errorwhileretrievingusers', true);\n\n            if (loadMore == 'messages') {\n                this.messages.loadMoreError = true;\n            }\n        } finally {\n            this.disableSearch = false;\n            this.displaySearching = false;\n\n            if (loadMore == 'contacts') {\n                this.contacts.loadingMore = false;\n            } else if (loadMore == 'noncontacts') {\n                this.nonContacts.loadingMore = false;\n            } else if (loadMore == 'messages') {\n                this.messages.loadingMore = false;\n            }\n\n            infiniteComplete && infiniteComplete();\n        }\n    }\n\n    /**\n     * Open a conversation in the split view.\n     *\n     * @param result User or message.\n     * @param onInit Whether the tser was selected on initial load.\n     */\n    openConversation(result: AddonMessagesConversationMember | AddonMessagesMessageAreaContact, onInit: boolean = false): void {\n        if (!onInit || CoreScreen.isTablet) {\n            this.selectedResult = result;\n\n            let conversationId: number | undefined;\n            let userId: number | undefined;\n            if ('conversationid' in result) {\n                conversationId = result.conversationid;\n            } else {\n                userId = result.id;\n            }\n\n            const path = CoreNavigator.getRelativePathToParent('/messages/search') + 'discussion/' +\n                (conversationId ? conversationId : `user/${userId}`);\n\n            CoreNavigator.navigate(path, {\n                reset: CoreScreen.isTablet && !!this.splitView && !this.splitView.isNested,\n            });\n        }\n    }\n\n    /**\n     * Set the highlight values for each entry.\n     *\n     * @param results Results to highlight.\n     * @param isUser Whether the results are from a user search or from a message search.\n     */\n    setHighlight(\n        results: (AddonMessagesConversationMemberWithHighlight | AddonMessagesMessageAreaContactWithHighlight)[],\n        isUser = false,\n    ): void {\n        results.forEach((result) => {\n            result.highlightName = isUser ? this.query : undefined;\n            result.highlightMessage = !isUser ? this.query : undefined;\n        });\n    }\n\n    /**\n     * Component destroyed.\n     */\n    ngOnDestroy(): void {\n        this.memberInfoObserver?.off();\n    }\n\n}\n\ntype AddonMessagesSearchResults = {\n    type: string;\n    titleString: string;\n    results: AddonMessagesConversationMemberWithHighlight[];\n    canLoadMore: boolean;\n    loadingMore: boolean;\n};\n\ntype AddonMessagesSearchMessageResults = {\n    type: string;\n    titleString: string;\n    results: AddonMessagesMessageAreaContactWithHighlight[];\n    canLoadMore: boolean;\n    loadingMore: boolean;\n    loadMoreError: boolean;\n};\n\ntype AddonMessagesSearchResultHighlight = {\n    highlightName?: string;\n    highlightMessage?: string;\n};\n\ntype AddonMessagesConversationMemberWithHighlight = AddonMessagesConversationMember & AddonMessagesSearchResultHighlight;\ntype AddonMessagesMessageAreaContactWithHighlight = AddonMessagesMessageAreaContact & AddonMessagesSearchResultHighlight;\n"],"sourceRoot":"webpack:///"}