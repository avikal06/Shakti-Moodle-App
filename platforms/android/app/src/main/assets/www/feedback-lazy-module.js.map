{"version":3,"sources":["./src/addons/mod/feedback/pages/attempt/attempt.html","./src/addons/mod/feedback/pages/attempts/attempts.html","./src/addons/mod/feedback/pages/form/form.html","./src/addons/mod/feedback/pages/index/index.html","./src/addons/mod/feedback/pages/nonrespondents/nonrespondents.html","./src/addons/mod/feedback/classes/feedback-attempts-source.ts","./src/addons/mod/feedback/feedback-lazy.module.ts","./src/addons/mod/feedback/pages/attempt/attempt.ts","./src/addons/mod/feedback/pages/attempts/attempts.ts","./src/addons/mod/feedback/pages/form/form.scss","./src/addons/mod/feedback/pages/form/form.ts","./src/addons/mod/feedback/pages/index/index.ts","./src/addons/mod/feedback/pages/nonrespondents/nonrespondents.ts","./src/core/classes/items-management/swipe-navigation-items-manager.ts"],"names":[],"mappings":"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","file":"feedback-lazy-module.js","sourcesContent":["export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <ion-title>\\r\\n            <h1 *ngIf=\\\"attempt\\\">{{ attempt.fullname }}</h1>\\r\\n            <h1 *ngIf=\\\"anonAttempt\\\">{{ 'addon.mod_feedback.anonymous_user' | translate }}</h1>\\r\\n        </ion-title>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content [core-swipe-navigation]=\\\"attempts\\\">\\r\\n    <core-loading [hideUntil]=\\\"loaded\\\">\\r\\n        <ion-list class=\\\"ion-no-margin\\\" *ngIf=\\\"attempt || anonAttempt\\\">\\r\\n            <ion-item *ngIf=\\\"attempt\\\" class=\\\"ion-text-wrap\\\" core-user-link [userId]=\\\"attempt.userid\\\"\\r\\n                [attr.aria-label]=\\\"'core.user.viewprofile' | translate\\\" [courseId]=\\\"attempt.courseid\\\">\\r\\n                <core-user-avatar [user]=\\\"attempt\\\" slot=\\\"start\\\" [linkProfile]=\\\"false\\\"></core-user-avatar>\\r\\n                <ion-label>\\r\\n                    <h2>{{attempt.fullname}}</h2>\\r\\n                    <p *ngIf=\\\"attempt.timemodified\\\">{{attempt.timemodified * 1000 | coreFormatDate }}</p>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n\\r\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"anonAttempt\\\">\\r\\n                <core-user-avatar [linkProfile]=\\\"false\\\" slot=\\\"start\\\"></core-user-avatar>\\r\\n                <ion-label>\\r\\n                    <h2>{{ 'addon.mod_feedback.anonymous_user' |translate }}</h2>\\r\\n                    <p>{{ 'addon.mod_feedback.response_nr' | translate }}: {{anonAttempt.number}}</p>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n            <ng-container *ngIf=\\\"items && items.length\\\">\\r\\n                <ng-container *ngFor=\\\"let item of items\\\">\\r\\n                    <core-spacer *ngIf=\\\"item.typ == 'pagebreak'\\\"></core-spacer>\\r\\n                    <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"item.typ != 'pagebreak'\\\" [color]=\\\"item.dependitem > 0 ? 'light' : ''\\\">\\r\\n                        <ion-label>\\r\\n                            <p class=\\\"item-heading\\\" *ngIf=\\\"item.name\\\" [core-mark-required]=\\\"item.required\\\">\\r\\n                                <span *ngIf=\\\"feedback!.autonumbering && item.itemnumber\\\">{{item.itemnumber}}. </span>\\r\\n                                <core-format-text [component]=\\\"component\\\" [componentId]=\\\"cmId\\\" [text]=\\\"item.name\\\" contextLevel=\\\"module\\\"\\r\\n                                    [contextInstanceId]=\\\"cmId\\\" [courseId]=\\\"courseId\\\">\\r\\n                                </core-format-text>\\r\\n                            </p>\\r\\n                            <p *ngIf=\\\"item.submittedValue\\\">\\r\\n                                <core-format-text [component]=\\\"component\\\" [componentId]=\\\"cmId\\\" [text]=\\\"item.submittedValue\\\"\\r\\n                                    contextLevel=\\\"module\\\" [contextInstanceId]=\\\"cmId\\\" [courseId]=\\\"courseId\\\">\\r\\n                                </core-format-text>\\r\\n                            </p>\\r\\n                        </ion-label>\\r\\n                    </ion-item>\\r\\n                </ng-container>\\r\\n            </ng-container>\\r\\n        </ion-list>\\r\\n    </core-loading>\\r\\n</ion-content>\\r\\n\";","export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <ion-title>\\r\\n            <h1>{{ 'addon.mod_feedback.responses' |translate }}</h1>\\r\\n        </ion-title>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content>\\r\\n    <core-split-view>\\r\\n        <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!attempts || !attempts.loaded\\\" (ionRefresh)=\\\"refreshFeedback($event.target)\\\">\\r\\n            <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n        </ion-refresher>\\r\\n        <core-loading [hideUntil]=\\\"attempts && attempts.loaded\\\">\\r\\n            <ion-list class=\\\"ion-no-margin\\\">\\r\\n                <core-group-selector [groupInfo]=\\\"groupInfo\\\" [(selected)]=\\\"selectedGroup\\\" (selectedChange)=\\\"reloadAttempts()\\\"\\r\\n                    [courseId]=\\\"courseId\\\">\\r\\n                </core-group-selector>\\r\\n\\r\\n                <ng-container *ngIf=\\\"identifiableAttemptsTotal > 0\\\">\\r\\n                    <ion-item-divider>\\r\\n                        <ion-label>\\r\\n                            <h2>{{ 'addon.mod_feedback.non_anonymous_entries' | translate : {$a: identifiableAttemptsTotal } }}</h2>\\r\\n                        </ion-label>\\r\\n                    </ion-item-divider>\\r\\n                    <ion-item *ngFor=\\\"let attempt of identifiableAttempts\\\" class=\\\"ion-text-wrap\\\" button detail=\\\"true\\\"\\r\\n                        (click)=\\\"attempts?.select(attempt)\\\" [attr.aria-current]=\\\"attempts?.getItemAriaCurrent(attempt)\\\">\\r\\n                        <core-user-avatar [user]=\\\"attempt\\\" [linkProfile]=\\\"false\\\" slot=\\\"start\\\"></core-user-avatar>\\r\\n                        <ion-label>\\r\\n                            <p class=\\\"item-heading\\\">{{ attempt.fullname }}</p>\\r\\n                            <p *ngIf=\\\"attempt.timemodified\\\">{{ attempt.timemodified * 1000 | coreFormatDate }}</p>\\r\\n                        </ion-label>\\r\\n                    </ion-item>\\r\\n                </ng-container>\\r\\n\\r\\n                <ng-container *ngIf=\\\"identifiableAttemptsTotal === identifiableAttempts.length && anonymousAttemptsTotal > 0\\\">\\r\\n                    <ion-item-divider>\\r\\n                        <ion-label>\\r\\n                            <h2>{{ 'addon.mod_feedback.anonymous_entries' | translate : {$a: anonymousAttemptsTotal } }}</h2>\\r\\n                        </ion-label>\\r\\n                    </ion-item-divider>\\r\\n                    <ion-item *ngFor=\\\"let attempt of anonymousAttempts\\\" class=\\\"ion-text-wrap\\\" button detail=\\\"true\\\"\\r\\n                        (click)=\\\"attempts?.select(attempt)\\\" [attr.aria-current]=\\\"attempts?.getItemAriaCurrent(attempt)\\\">\\r\\n                        <core-user-avatar [linkProfile]=\\\"false\\\" slot=\\\"start\\\"></core-user-avatar>\\r\\n                        <ion-label>\\r\\n                            <p class=\\\"item-heading\\\">{{ 'addon.mod_feedback.anonymous_user' | translate }}</p>\\r\\n                            <p>{{ 'addon.mod_feedback.response_nr' | translate }}: {{attempt.number}}</p>\\r\\n                        </ion-label>\\r\\n                    </ion-item>\\r\\n                </ng-container>\\r\\n\\r\\n                <core-infinite-loading [enabled]=\\\"attempts && attempts.loaded && !attempts.completed\\\" [error]=\\\"fetchFailed\\\"\\r\\n                    (action)=\\\"fetchMoreAttempts($event)\\\">\\r\\n                </core-infinite-loading>\\r\\n            </ion-list>\\r\\n        </core-loading>\\r\\n    </core-split-view>\\r\\n</ion-content>\\r\\n\";","export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <ion-title>\\r\\n            <h1>\\r\\n                <core-format-text [text]=\\\"title\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"cmId\\\" [courseId]=\\\"courseId\\\">\\r\\n                </core-format-text>\\r\\n            </h1>\\r\\n        </ion-title>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content class=\\\"limited-width\\\">\\r\\n    <core-loading [hideUntil]=\\\"feedbackLoaded\\\" class=\\\"has-spacer\\\">\\r\\n        <ng-container *ngIf=\\\"items && items.length\\\">\\r\\n            <ion-list class=\\\"ion-no-margin has-spacer\\\">\\r\\n                <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                    <ion-label>\\r\\n                        <p class=\\\"item-heading\\\">{{ 'addon.mod_feedback.mode' | translate }}</p>\\r\\n                        <p *ngIf=\\\"access!.isanonymous\\\">{{ 'addon.mod_feedback.anonymous' | translate }}</p>\\r\\n                        <p *ngIf=\\\"!access!.isanonymous\\\">{{ 'addon.mod_feedback.non_anonymous' | translate }}</p>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n                <ng-container *ngFor=\\\"let item of items\\\">\\r\\n                    <core-spacer *ngIf=\\\"item.typ == 'pagebreak'\\\"></core-spacer>\\r\\n                    <ng-container *ngIf=\\\"item.typ != 'pagebreak'\\\">\\r\\n                        <ion-item class=\\\"ion-text-wrap addon-mod_feedback-item\\\" [color]=\\\"item.dependitem > 0 ? 'light' : ''\\\"\\r\\n                            [class.core-danger-item]=\\\"item.isEmpty || item.hasError\\\">\\r\\n                            <ion-label [position]=\\\"item.hasTextInput ? 'stacked' : undefined\\\">\\r\\n                                <p *ngIf=\\\"item.name\\\" [core-mark-required]=\\\"item.required\\\">\\r\\n                                    <span *ngIf=\\\"feedback!.autonumbering && item.itemnumber\\\">{{item.itemnumber}}. </span>\\r\\n                                    <core-format-text [component]=\\\"component\\\" [componentId]=\\\"cmId\\\" [text]=\\\"item.name\\\" contextLevel=\\\"module\\\"\\r\\n                                        [contextInstanceId]=\\\"cmId\\\" [courseId]=\\\"courseId\\\" [wsNotFiltered]=\\\"true\\\">\\r\\n                                    </core-format-text>\\r\\n                                    <span *ngIf=\\\"item.postfix\\\" class=\\\"addon-mod_feedback-postfix\\\">{{item.postfix}}</span>\\r\\n                                </p>\\r\\n                                <p *ngIf=\\\"item.templateName == 'label'\\\">\\r\\n                                    <core-format-text [component]=\\\"component\\\" [componentId]=\\\"cmId\\\" [text]=\\\"item.presentation\\\"\\r\\n                                        contextLevel=\\\"module\\\" [contextInstanceId]=\\\"cmId\\\" [wsNotFiltered]=\\\"true\\\" [courseId]=\\\"courseId\\\">\\r\\n                                    </core-format-text>\\r\\n                                </p>\\r\\n                            </ion-label>\\r\\n\\r\\n                            <ion-input *ngIf=\\\"item.templateName == 'textfield'\\\" type=\\\"text\\\" [(ngModel)]=\\\"item.value\\\" autocorrect=\\\"off\\\"\\r\\n                                name=\\\"{{item.typ}}_{{item.id}}\\\" maxlength=\\\"{{item.length}}\\\" [required]=\\\"item.required\\\">\\r\\n                            </ion-input>\\r\\n\\r\\n                            <ng-container *ngIf=\\\"item.templateName == 'numeric'\\\">\\r\\n                                <ion-input type=\\\"number\\\" [(ngModel)]=\\\"item.value\\\" name=\\\"{{item.typ}}_{{item.id}}\\\"\\r\\n                                    [required]=\\\"item.required\\\">\\r\\n                                </ion-input>\\r\\n                                <ion-text *ngIf=\\\"item.hasError\\\" color=\\\"danger\\\" class=\\\"addon-mod_feedback-item-error\\\">\\r\\n                                    {{ 'addon.mod_feedback.numberoutofrange' | translate }} [{{item.rangefrom}}\\r\\n                                    <span *ngIf=\\\"item.rangefrom && item.rangeto\\\">, </span>{{item.rangeto}}]\\r\\n                                </ion-text>\\r\\n                            </ng-container>\\r\\n\\r\\n                            <ion-textarea *ngIf=\\\"item.templateName == 'textarea'\\\" [required]=\\\"item.required\\\" name=\\\"{{item.typ}}_{{item.id}}\\\"\\r\\n                                [(ngModel)]=\\\"item.value\\\">\\r\\n                            </ion-textarea>\\r\\n\\r\\n                            <ion-select *ngIf=\\\"item.templateName == 'multichoice-d'\\\" [required]=\\\"item.required\\\"\\r\\n                                name=\\\"{{item.typ}}_{{item.id}}\\\" [(ngModel)]=\\\"item.value\\\" interface=\\\"action-sheet\\\"\\r\\n                                [cancelText]=\\\"'core.cancel' | translate\\\" [interfaceOptions]=\\\"{header: item.name}\\\">\\r\\n                                <ion-select-option *ngFor=\\\"let option of item.choices\\\" [value]=\\\"option.value\\\">\\r\\n                                    <core-format-text [component]=\\\"component\\\" [componentId]=\\\"cmId\\\" [text]=\\\"option.label\\\"\\r\\n                                        contextLevel=\\\"module\\\" [contextInstanceId]=\\\"cmId\\\" [wsNotFiltered]=\\\"true\\\" [courseId]=\\\"courseId\\\">\\r\\n                                    </core-format-text>\\r\\n                                </ion-select-option>\\r\\n                            </ion-select>\\r\\n                        </ion-item>\\r\\n\\r\\n                        <ion-radio-group *ngIf=\\\"item.templateName == 'multichoice-r'\\\" [(ngModel)]=\\\"item.value\\\" [required]=\\\"item.required\\\"\\r\\n                            name=\\\"{{item.typ}}_{{item.id}}\\\">\\r\\n                            <ion-item *ngFor=\\\"let option of item.choices\\\">\\r\\n                                <ion-label>\\r\\n                                    <core-format-text [component]=\\\"component\\\" [componentId]=\\\"cmId\\\" [text]=\\\"option.label\\\"\\r\\n                                        contextLevel=\\\"module\\\" [contextInstanceId]=\\\"cmId\\\" [wsNotFiltered]=\\\"true\\\" [courseId]=\\\"courseId\\\">\\r\\n                                    </core-format-text>\\r\\n                                </ion-label>\\r\\n                                <ion-radio slot=\\\"start\\\" [value]=\\\"option.value\\\"></ion-radio>\\r\\n                            </ion-item>\\r\\n                        </ion-radio-group>\\r\\n\\r\\n                        <ng-container *ngIf=\\\"item.templateName == 'multichoice-c'\\\">\\r\\n                            <ion-item *ngFor=\\\"let option of item.choices\\\">\\r\\n                                <ion-label>\\r\\n                                    <core-format-text [component]=\\\"component\\\" [componentId]=\\\"cmId\\\" [text]=\\\"option.label\\\"\\r\\n                                        contextLevel=\\\"module\\\" [contextInstanceId]=\\\"cmId\\\" [wsNotFiltered]=\\\"true\\\" [courseId]=\\\"courseId\\\">\\r\\n                                    </core-format-text>\\r\\n                                </ion-label>\\r\\n                                <ion-checkbox [required]=\\\"item.required\\\" name=\\\"{{item.typ}}_{{item.id}}\\\" [(ngModel)]=\\\"option.checked\\\"\\r\\n                                    value=\\\"option.value\\\">\\r\\n                                </ion-checkbox>\\r\\n                            </ion-item>\\r\\n                        </ng-container>\\r\\n\\r\\n                        <ng-container *ngIf=\\\"item.templateName == 'captcha'\\\">\\r\\n                            <core-recaptcha *ngIf=\\\"!preview && !offline\\\" [publicKey]=\\\"item.captcha.recaptchapublickey\\\" [model]=\\\"item\\\"\\r\\n                                modelValueName=\\\"value\\\">\\r\\n                            </core-recaptcha>\\r\\n                            <div *ngIf=\\\"!preview && (!item.captcha || offline)\\\" class=\\\"core-warning-card\\\">\\r\\n                                <ion-item>\\r\\n                                    <ion-icon name=\\\"fas-triangle-exclamation\\\" slot=\\\"start\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                                    <ion-label>{{ 'addon.mod_feedback.captchaofflinewarning' | translate }}</ion-label>\\r\\n                                </ion-item>\\r\\n                            </div>\\r\\n                        </ng-container>\\r\\n                    </ng-container>\\r\\n                </ng-container>\\r\\n\\r\\n                <ion-row class=\\\"ion-align-items-center spacer-top\\\" *ngIf=\\\"!preview\\\">\\r\\n                    <ion-col *ngIf=\\\"hasPrevPage\\\">\\r\\n                        <ion-button expand=\\\"block\\\" fill=\\\"outline\\\" (click)=\\\"gotoPage(true)\\\" class=\\\"ion-text-wrap\\\">\\r\\n                            <ion-icon name=\\\"fas-chevron-left\\\" slot=\\\"start\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                            {{ 'core.previous' | translate }}\\r\\n                        </ion-button>\\r\\n                    </ion-col>\\r\\n                    <ion-col *ngIf=\\\"hasNextPage\\\">\\r\\n                        <ion-button expand=\\\"block\\\" (click)=\\\"gotoPage(false)\\\" class=\\\"ion-text-wrap\\\">\\r\\n                            {{ 'core.next' | translate }}\\r\\n                            <ion-icon name=\\\"fas-chevron-right\\\" slot=\\\"end\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                        </ion-button>\\r\\n                    </ion-col>\\r\\n                    <ion-col *ngIf=\\\"!hasNextPage\\\">\\r\\n                        <ion-button expand=\\\"block\\\" (click)=\\\"gotoPage(false)\\\" class=\\\"ion-text-wrap\\\">\\r\\n                            {{ 'core.submit' | translate }}\\r\\n                        </ion-button>\\r\\n                    </ion-col>\\r\\n                </ion-row>\\r\\n            </ion-list>\\r\\n        </ng-container>\\r\\n\\r\\n        <ion-card class=\\\"core-success-card\\\" *ngIf=\\\"completed\\\">\\r\\n            <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                <ion-icon name=\\\"fas-check\\\" slot=\\\"start\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                <ion-label>\\r\\n                    <p *ngIf=\\\"!completionPageContents && !completedOffline\\\">\\r\\n                        {{ 'addon.mod_feedback.this_feedback_is_already_submitted' | translate }}\\r\\n                    </p>\\r\\n                    <p *ngIf=\\\"!completionPageContents && completedOffline\\\">\\r\\n                        {{ 'addon.mod_feedback.feedback_submitted_offline' | translate }}\\r\\n                    </p>\\r\\n                    <core-format-text *ngIf=\\\"completionPageContents\\\" [component]=\\\"component\\\" componentId=\\\"componentId\\\"\\r\\n                        [text]=\\\"completionPageContents\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"cmId\\\" [courseId]=\\\"courseId\\\">\\r\\n                    </core-format-text>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n        </ion-card>\\r\\n\\r\\n        <div collapsible-footer *ngIf=\\\"feedbackLoaded && completed\\\" slot=\\\"fixed\\\" appearOnBottom>\\r\\n            <div class=\\\"list-item-limited-width adaptable-buttons-row\\\">\\r\\n                <ion-button expand=\\\"block\\\" fill=\\\"outline\\\" (click)=\\\"showAnalysis()\\\" class=\\\"ion-text-wrap ion-margin\\\"\\r\\n                    *ngIf=\\\"access!.canviewanalysis\\\">\\r\\n                    <ion-icon name=\\\"fas-chart-bar\\\" slot=\\\"start\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                    {{ 'addon.mod_feedback.completed_feedbacks' | translate }}\\r\\n                </ion-button>\\r\\n                <ion-button expand=\\\"block\\\" (click)=\\\"continue()\\\" class=\\\"ion-text-wrap ion-margin\\\">\\r\\n                    <ng-container *ngIf=\\\"!siteAfterSubmit\\\">{{ 'core.continue' | translate }}</ng-container>\\r\\n                    <ng-container *ngIf=\\\"siteAfterSubmit\\\">{{ 'core.course.nextactivity' | translate }}</ng-container>\\r\\n                </ion-button>\\r\\n            </div>\\r\\n        </div>\\r\\n    </core-loading>\\r\\n</ion-content>\\r\\n\";","export default \"<ion-header collapsible>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <ion-title>\\r\\n            <h1>\\r\\n                <core-format-text [text]=\\\"title\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"module?.id\\\" [courseId]=\\\"courseId\\\">\\r\\n                </core-format-text>\\r\\n            </h1>\\r\\n        </ion-title>\\r\\n        <ion-buttons slot=\\\"end\\\">\\r\\n            <!-- The buttons defined by the component will be added in here. -->\\r\\n        </ion-buttons>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content class=\\\"limited-width\\\">\\r\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"activityComponent?.showLoading\\\" (ionRefresh)=\\\"activityComponent?.doRefresh($event.target)\\\">\\r\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n    </ion-refresher>\\r\\n\\r\\n    <addon-mod-feedback-index [module]=\\\"module\\\" [courseId]=\\\"courseId\\\" [group]=\\\"selectedGroup\\\" [tab]=\\\"selectedTab\\\"\\r\\n        (dataRetrieved)=\\\"updateData($event)\\\"></addon-mod-feedback-index>\\r\\n</ion-content>\\r\\n\";","export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <ion-title>\\r\\n            <h1>{{ 'addon.mod_feedback.responses' |translate }}</h1>\\r\\n        </ion-title>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content>\\r\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!loaded\\\" (ionRefresh)=\\\"refreshFeedback($event.target)\\\">\\r\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n    </ion-refresher>\\r\\n    <core-loading [hideUntil]=\\\"loaded\\\">\\r\\n        <ion-list class=\\\"ion-no-margin\\\">\\r\\n            <core-group-selector [groupInfo]=\\\"groupInfo\\\" [(selected)]=\\\"selectedGroup\\\" (selectedChange)=\\\"loadAttempts(selectedGroup)\\\"\\r\\n                [courseId]=\\\"courseId\\\">\\r\\n            </core-group-selector>\\r\\n\\r\\n            <ion-item-divider>\\r\\n                <ion-label>\\r\\n                    <h2>{{ 'addon.mod_feedback.non_respondents_students' | translate : {$a: total } }}</h2>\\r\\n                </ion-label>\\r\\n            </ion-item-divider>\\r\\n            <ng-container *ngIf=\\\"total > 0\\\">\\r\\n                <ion-item *ngFor=\\\"let user of users\\\" class=\\\"ion-text-wrap\\\">\\r\\n                    <core-user-avatar [user]=\\\"user\\\" slot=\\\"start\\\"></core-user-avatar>\\r\\n                    <ion-label>\\r\\n                        <p class=\\\"item-heading\\\">{{ user.fullname }}</p>\\r\\n                        <p>\\r\\n                            <ion-badge color=\\\"success\\\" *ngIf=\\\"user.started\\\">\\r\\n                                {{ 'addon.mod_feedback.started' | translate}}\\r\\n                            </ion-badge>\\r\\n                            <ion-badge color=\\\"danger\\\" *ngIf=\\\"!user.started\\\">\\r\\n                                {{ 'addon.mod_feedback.not_started' | translate}}\\r\\n                            </ion-badge>\\r\\n                        </p>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n            </ng-container>\\r\\n\\r\\n            <core-infinite-loading [enabled]=\\\"canLoadMore\\\" (action)=\\\"loadAttempts(undefined, $event)\\\" [error]=\\\"loadMoreError\\\">\\r\\n            </core-infinite-loading>\\r\\n        </ion-list>\\r\\n    </core-loading>\\r\\n</ion-content>\\r\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { CoreRoutedItemsManagerSource } from '@classes/items-management/routed-items-manager-source';\nimport { CoreGroupInfo, CoreGroups } from '@services/groups';\nimport {\n    AddonModFeedback,\n    AddonModFeedbackProvider,\n    AddonModFeedbackWSAnonAttempt,\n    AddonModFeedbackWSAttempt,\n    AddonModFeedbackWSFeedback,\n} from '../services/feedback';\nimport { AddonModFeedbackHelper } from '../services/feedback-helper';\n\n/**\n * Feedback attempts.\n */\nexport class AddonModFeedbackAttemptsSource extends CoreRoutedItemsManagerSource<AddonModFeedbackAttemptItem> {\n\n    readonly COURSE_ID: number;\n    readonly CM_ID: number;\n\n    selectedGroup?: number;\n    identifiable?: AddonModFeedbackWSAttempt[];\n    identifiableTotal?: number;\n    anonymous?: AddonModFeedbackWSAnonAttempt[];\n    anonymousTotal?: number;\n    groupInfo?: CoreGroupInfo;\n    feedback?: AddonModFeedbackWSFeedback;\n\n    constructor(courseId: number, cmId: number) {\n        super();\n\n        this.COURSE_ID = courseId;\n        this.CM_ID = cmId;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getItemPath(attempt: AddonModFeedbackAttemptItem): string {\n        return attempt.id.toString();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getPagesLoaded(): number {\n        if (!this.identifiable || !this.anonymous) {\n            return 0;\n        }\n\n        const pageLength = this.getPageLength();\n\n        return Math.ceil(Math.max(this.anonymous.length, this.identifiable.length) / pageLength);\n    }\n\n    /**\n     * Type guard to infer AddonModFeedbackWSAttempt objects.\n     *\n     * @param attempt Attempt to check.\n     * @returns Whether the item is an identifieable attempt.\n     */\n    isIdentifiableAttempt(attempt: AddonModFeedbackAttemptItem): attempt is AddonModFeedbackWSAttempt {\n        return 'fullname' in attempt;\n    }\n\n    /**\n     * Type guard to infer AddonModFeedbackWSAnonAttempt objects.\n     *\n     * @param attempt Attempt to check.\n     * @returns Whether the item is an anonymous attempt.\n     */\n    isAnonymousAttempt(attempt: AddonModFeedbackAttemptItem): attempt is AddonModFeedbackWSAnonAttempt {\n        return 'number' in attempt;\n    }\n\n    /**\n     * Invalidate feedback cache.\n     */\n    async invalidateCache(): Promise<void> {\n        await Promise.all([\n            CoreGroups.invalidateActivityGroupInfo(this.CM_ID),\n            this.feedback && AddonModFeedback.invalidateResponsesAnalysisData(this.feedback.id),\n        ]);\n    }\n\n    /**\n     * Load feedback.\n     */\n    async loadFeedback(): Promise<void> {\n        this.feedback = await AddonModFeedback.getFeedback(this.COURSE_ID, this.CM_ID);\n        this.groupInfo = await CoreGroups.getActivityGroupInfo(this.CM_ID);\n\n        this.selectedGroup = CoreGroups.validateGroupId(this.selectedGroup, this.groupInfo);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected getPageLength(): number {\n        return AddonModFeedbackProvider.PER_PAGE;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected async loadPageItems(page: number): Promise<{ items: AddonModFeedbackAttemptItem[]; hasMoreItems: boolean }> {\n        if (!this.feedback) {\n            throw new Error('Can\\'t load attempts without feeback');\n        }\n\n        const result = await AddonModFeedbackHelper.getResponsesAnalysis(this.feedback.id, {\n            page,\n            groupId: this.selectedGroup,\n            cmId: this.CM_ID,\n        });\n\n        if (page === 0) {\n            this.identifiableTotal = result.totalattempts;\n            this.anonymousTotal = result.totalanonattempts;\n        }\n\n        const totalItemsLoaded = this.getPageLength() * (page + 1);\n        const pageAttempts: AddonModFeedbackAttemptItem[] = [\n            // The page argument is ignored in the webservice when there is only one page,\n            // so we should ignore the responses of pages beyond the first if that's the case.\n            ...(page === 0 || result.totalattempts > AddonModFeedbackProvider.PER_PAGE)\n                ? result.attempts\n                : [],\n            ...(page === 0 || result.totalanonattempts > AddonModFeedbackProvider.PER_PAGE)\n                ? result.anonattempts\n                : [],\n        ];\n\n        return {\n            items: pageAttempts,\n            hasMoreItems: result.totalattempts > totalItemsLoaded || result.totalanonattempts > totalItemsLoaded,\n        };\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected setItems(attempts: AddonModFeedbackAttemptItem[], hasMoreItems: boolean): void {\n        this.identifiable = attempts.filter(this.isIdentifiableAttempt);\n        this.anonymous = attempts.filter(this.isAnonymousAttempt);\n\n        super.setItems((this.identifiable as AddonModFeedbackAttemptItem[]).concat(this.anonymous), hasMoreItems);\n    }\n\n}\n\n/**\n * Type of items that can be held in the source.\n */\nexport type AddonModFeedbackAttemptItem = AddonModFeedbackWSAttempt | AddonModFeedbackWSAnonAttempt;\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { CoreSharedModule } from '@/core/shared.module';\nimport { AddonModFeedbackComponentsModule } from './components/components.module';\nimport { AddonModFeedbackIndexPage } from './pages/index/index';\nimport { AddonModFeedbackAttemptsPage } from './pages/attempts/attempts';\nimport { conditionalRoutes } from '@/app/app-routing.module';\nimport { CoreScreen } from '@services/screen';\nimport { AddonModFeedbackAttemptPage } from '@addons/mod/feedback/pages/attempt/attempt';\nimport { AddonModFeedbackFormPage } from '@addons/mod/feedback/pages/form/form';\nimport { CanLeaveGuard } from '@guards/can-leave';\nimport { AddonModFeedbackNonRespondentsPage } from '@addons/mod/feedback/pages/nonrespondents/nonrespondents';\n\nconst commonRoutes: Routes = [\n    {\n        path: ':courseId/:cmId',\n        component: AddonModFeedbackIndexPage,\n    },\n    {\n        path: ':courseId/:cmId/form',\n        component: AddonModFeedbackFormPage,\n        canDeactivate: [CanLeaveGuard],\n    },\n    {\n        path: ':courseId/:cmId/nonrespondents',\n        component: AddonModFeedbackNonRespondentsPage,\n    },\n];\n\nconst mobileRoutes: Routes = [\n    ...commonRoutes,\n    {\n        path: ':courseId/:cmId/attempts',\n        component: AddonModFeedbackAttemptsPage,\n    },\n    {\n        path: ':courseId/:cmId/attempts/:attemptId',\n        component: AddonModFeedbackAttemptPage,\n    },\n];\n\nconst tabletRoutes: Routes = [\n    ...commonRoutes,\n    {\n        path: ':courseId/:cmId/attempts',\n        component: AddonModFeedbackAttemptsPage,\n        children: [\n            {\n                path: ':attemptId',\n                component: AddonModFeedbackAttemptPage,\n            },\n        ],\n    },\n];\n\nconst routes: Routes = [\n    ...conditionalRoutes(mobileRoutes, () => CoreScreen.isMobile),\n    ...conditionalRoutes(tabletRoutes, () => CoreScreen.isTablet),\n];\n\n@NgModule({\n    imports: [\n        RouterModule.forChild(routes),\n        CoreSharedModule,\n        AddonModFeedbackComponentsModule,\n    ],\n    declarations: [\n        AddonModFeedbackAttemptsPage,\n        AddonModFeedbackFormPage,\n        AddonModFeedbackIndexPage,\n        AddonModFeedbackNonRespondentsPage,\n        AddonModFeedbackAttemptPage,\n    ],\n})\nexport class AddonModFeedbackLazyModule {}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRouteSnapshot } from '@angular/router';\nimport { CoreRoutedItemsManagerSourcesTracker } from '@classes/items-management/routed-items-manager-sources-tracker';\nimport { CoreSwipeNavigationItemsManager } from '@classes/items-management/swipe-navigation-items-manager';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { AddonModFeedbackAttemptsSource } from '../../classes/feedback-attempts-source';\nimport {\n    AddonModFeedback,\n    AddonModFeedbackProvider,\n    AddonModFeedbackWSAnonAttempt,\n    AddonModFeedbackWSFeedback,\n} from '../../services/feedback';\nimport { AddonModFeedbackAttempt, AddonModFeedbackFormItem, AddonModFeedbackHelper } from '../../services/feedback-helper';\nimport { CoreTime } from '@singletons/time';\nimport { CoreAnalytics, CoreAnalyticsEventType } from '@services/analytics';\n\n/**\n * Page that displays a feedback attempt review.\n */\n@Component({\n    selector: 'page-addon-mod-feedback-attempt',\n    templateUrl: 'attempt.html',\n})\nexport class AddonModFeedbackAttemptPage implements OnInit, OnDestroy {\n\n    cmId: number;\n    courseId: number;\n    feedback?: AddonModFeedbackWSFeedback;\n    attempt?: AddonModFeedbackAttempt;\n    attempts: AddonModFeedbackAttemptsSwipeManager;\n    anonAttempt?: AddonModFeedbackWSAnonAttempt;\n    items: AddonModFeedbackAttemptItem[] = [];\n    component = AddonModFeedbackProvider.COMPONENT;\n    loaded = false;\n\n    protected attemptId: number;\n    protected logView: () => void;\n\n    constructor() {\n        this.cmId = CoreNavigator.getRequiredRouteNumberParam('cmId');\n        this.courseId = CoreNavigator.getRequiredRouteNumberParam('courseId');\n        this.attemptId = CoreNavigator.getRequiredRouteNumberParam('attemptId');\n\n        const source = CoreRoutedItemsManagerSourcesTracker.getOrCreateSource(\n            AddonModFeedbackAttemptsSource,\n            [this.courseId, this.cmId],\n        );\n\n        this.attempts = new AddonModFeedbackAttemptsSwipeManager(source);\n\n        this.logView = CoreTime.once(() => {\n            if (!this.feedback) {\n                return;\n            }\n\n            CoreAnalytics.logEvent({\n                type: CoreAnalyticsEventType.VIEW_ITEM,\n                ws: 'mod_feedback_get_responses_analysis',\n                name: this.feedback.name,\n                data: { id: this.attemptId, feedbackid: this.feedback.id, category: 'feedback' },\n                url: `/mod/feedback/show_entries.php?id=${this.cmId}` +\n                    (this.attempt ? `userid=${this.attempt.userid}` : '' ) + `&showcompleted=${this.attemptId}`,\n            });\n        });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async ngOnInit(): Promise<void> {\n        try {\n            await this.attempts.start();\n        } catch (error) {\n            CoreDomUtils.showErrorModal(error);\n\n            CoreNavigator.back();\n\n            return;\n        }\n\n        this.fetchData();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnDestroy(): void {\n        this.attempts.destroy();\n    }\n\n    /**\n     * Fetch all the data required for the view.\n     *\n     * @returns Promise resolved when done.\n     */\n    protected async fetchData(): Promise<void> {\n        try {\n            this.feedback = await AddonModFeedback.getFeedback(this.courseId, this.cmId);\n\n            const attempt = await AddonModFeedback.getAttempt(this.feedback.id, this.attemptId, { cmId: this.cmId });\n\n            if (this.isAnonAttempt(attempt)) {\n                this.anonAttempt = attempt;\n                delete this.attempt;\n            } else {\n                this.attempt = (await AddonModFeedbackHelper.addImageProfile([attempt]))[0];\n                delete this.anonAttempt;\n            }\n\n            const items = await AddonModFeedback.getItems(this.feedback.id, { cmId: this.cmId });\n\n            // Add responses and format items.\n            this.items = <AddonModFeedbackAttemptItem[]> items.items.map((item) => {\n                const formItem = AddonModFeedbackHelper.getItemForm(item, true);\n                if (!formItem) {\n                    return;\n                }\n\n                const attemptItem = <AddonModFeedbackAttemptItem> formItem;\n\n                if (item.typ == 'label') {\n                    attemptItem.submittedValue = CoreTextUtils.replacePluginfileUrls(item.presentation, item.itemfiles);\n                } else {\n                    for (const x in attempt.responses) {\n                        if (attempt.responses[x].id == item.id) {\n                            attemptItem.submittedValue = attempt.responses[x].printval;\n                            break;\n                        }\n                    }\n                }\n\n                return attemptItem;\n            }).filter((itemData) => itemData); // Filter items with errors.\n\n            this.logView();\n        } catch (message) {\n            // Some call failed on fetch, go back.\n            CoreDomUtils.showErrorModalDefault(message, 'core.course.errorgetmodule', true);\n            CoreNavigator.back();\n        } finally {\n            this.loaded = true;\n        }\n    }\n\n    /**\n     * Check if an attempt is anonymous or not.\n     *\n     * @param attempt Attempt to check.\n     * @returns If attempt is anonymous.\n     */\n    isAnonAttempt(attempt: AddonModFeedbackAttempt | AddonModFeedbackWSAnonAttempt): attempt is AddonModFeedbackWSAnonAttempt {\n        return !('fullname' in attempt);\n    }\n\n}\n\ntype AddonModFeedbackAttemptItem = AddonModFeedbackFormItem & {\n    submittedValue?: string;\n};\n\n/**\n * Helper to manage swiping within a collection of discussions.\n */\nclass AddonModFeedbackAttemptsSwipeManager extends CoreSwipeNavigationItemsManager {\n\n    /**\n     * @inheritdoc\n     */\n    protected getSelectedItemPathFromRoute(route: ActivatedRouteSnapshot): string | null {\n        return route.params.attemptId;\n    }\n\n}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { AfterViewInit, Component, OnDestroy, ViewChild } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { CoreRoutedItemsManagerSourcesTracker } from '@classes/items-management/routed-items-manager-sources-tracker';\nimport { CoreListItemsManager } from '@classes/items-management/list-items-manager';\nimport { CorePromisedValue } from '@classes/promised-value';\nimport { CoreSplitViewComponent } from '@components/split-view/split-view';\nimport { IonRefresher } from '@ionic/angular';\nimport { CoreGroupInfo } from '@services/groups';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreUtils } from '@services/utils/utils';\nimport { AddonModFeedbackAttemptItem, AddonModFeedbackAttemptsSource } from '../../classes/feedback-attempts-source';\nimport { AddonModFeedbackWSAnonAttempt, AddonModFeedbackWSAttempt } from '../../services/feedback';\nimport { CoreTime } from '@singletons/time';\nimport { CoreAnalytics, CoreAnalyticsEventType } from '@services/analytics';\n\n/**\n * Page that displays feedback attempts.\n */\n@Component({\n    selector: 'page-addon-mod-feedback-attempts',\n    templateUrl: 'attempts.html',\n})\nexport class AddonModFeedbackAttemptsPage implements AfterViewInit, OnDestroy {\n\n    @ViewChild(CoreSplitViewComponent) splitView!: CoreSplitViewComponent;\n\n    promisedAttempts: CorePromisedValue<AddonModFeedbackAttemptsManager>;\n    fetchFailed = false;\n    courseId?: number;\n\n    protected logView: () => void;\n\n    constructor(protected route: ActivatedRoute) {\n        this.promisedAttempts = new CorePromisedValue();\n\n        this.logView = CoreTime.once(() => {\n            const source = this.attempts?.getSource();\n            if (!source || !source.feedback) {\n                return;\n            }\n\n            CoreAnalytics.logEvent({\n                type: CoreAnalyticsEventType.VIEW_ITEM_LIST,\n                ws: 'mod_feedback_get_responses_analysis',\n                name: source.feedback.name,\n                data: { feedbackid: source.feedback.id, category: 'feedback' },\n                url: `/mod/feedback/show_entries.php?id=${source.CM_ID}`,\n            });\n        });\n    }\n\n    get attempts(): AddonModFeedbackAttemptsManager | null {\n        return this.promisedAttempts.value;\n    }\n\n    get groupInfo(): CoreGroupInfo | undefined {\n        return this.attempts?.getSource().groupInfo;\n    }\n\n    get selectedGroup(): number | undefined {\n        return this.attempts?.getSource().selectedGroup;\n    }\n\n    set selectedGroup(group: number | undefined) {\n        if (!this.attempts) {\n            return;\n        }\n\n        this.attempts.getSource().selectedGroup = group;\n        this.attempts.getSource().setDirty(true);\n    }\n\n    get identifiableAttempts(): AddonModFeedbackWSAttempt[] {\n        return this.attempts?.getSource().identifiable ?? [];\n    }\n\n    get identifiableAttemptsTotal(): number {\n        return this.attempts?.getSource().identifiableTotal ?? 0;\n    }\n\n    get anonymousAttempts(): AddonModFeedbackWSAnonAttempt[] {\n        return this.attempts?.getSource().anonymous ?? [];\n    }\n\n    get anonymousAttemptsTotal(): number {\n        return this.attempts?.getSource().anonymousTotal ?? 0;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async ngAfterViewInit(): Promise<void> {\n        try {\n            this.courseId = CoreNavigator.getRequiredRouteNumberParam('courseId');\n            const cmId = CoreNavigator.getRequiredRouteNumberParam('cmId');\n            const source = CoreRoutedItemsManagerSourcesTracker.getOrCreateSource(\n                AddonModFeedbackAttemptsSource,\n                [this.courseId, cmId],\n            );\n\n            source.selectedGroup = CoreNavigator.getRouteNumberParam('group') || 0;\n\n            this.promisedAttempts.resolve(new AddonModFeedbackAttemptsManager(source, this.route.component));\n        } catch (error) {\n            CoreDomUtils.showErrorModal(error);\n\n            CoreNavigator.back();\n\n            return;\n        }\n\n        const attempts = await this.promisedAttempts;\n\n        try {\n            this.fetchFailed = false;\n\n            await attempts.getSource().loadFeedback();\n            await attempts.load();\n\n            this.logView();\n        } catch (error) {\n            this.fetchFailed = true;\n\n            CoreDomUtils.showErrorModalDefault(error, 'core.course.errorgetmodule', true);\n        }\n\n        await attempts.start(this.splitView);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnDestroy(): void {\n        this.attempts?.destroy();\n    }\n\n    /**\n     * Fetch more attempts, if any.\n     *\n     * @param infiniteComplete Complete callback for infinite loader.\n     */\n    async fetchMoreAttempts(infiniteComplete?: () => void): Promise<void> {\n        const attempts = await this.promisedAttempts;\n\n        try {\n            this.fetchFailed = false;\n\n            await attempts.load();\n        } catch (error) {\n            this.fetchFailed = true;\n\n            CoreDomUtils.showErrorModalDefault(error, 'core.course.errorgetmodule', true);\n        } finally {\n            infiniteComplete && infiniteComplete();\n        }\n    }\n\n    /**\n     * Refresh the attempts.\n     *\n     * @param refresher Refresher.\n     */\n    async refreshFeedback(refresher: IonRefresher): Promise<void> {\n        const attempts = await this.promisedAttempts;\n\n        try {\n            this.fetchFailed = false;\n\n            await CoreUtils.ignoreErrors(attempts.getSource().invalidateCache());\n            await attempts.getSource().loadFeedback();\n            await attempts.reload();\n        } catch (error) {\n            this.fetchFailed = true;\n\n            CoreDomUtils.showErrorModalDefault(error, 'core.course.errorgetmodule', true);\n        } finally {\n            refresher.complete();\n        }\n    }\n\n    /**\n     * Reload attempts list.\n     */\n    async reloadAttempts(): Promise<void> {\n        const attempts = await this.promisedAttempts;\n\n        await attempts.reload();\n    }\n\n}\n\n/**\n * Attempts manager.\n */\nclass AddonModFeedbackAttemptsManager extends CoreListItemsManager<AddonModFeedbackAttemptItem, AddonModFeedbackAttemptsSource> {\n}\n","export default \":host .addon-mod_feedback-item ion-label.label-stacked {\\n  margin: 11px 0px 10px;\\n  transform: none;\\n}\\n:host .addon-mod_feedback-item-error {\\n  padding-top: 5px;\\n  padding-bottom: 8px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hZGRvbnMvbW9kL2ZlZWRiYWNrL3BhZ2VzL2Zvcm0vZm9ybS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNJO0VBQ0kscUJBQUE7RUFDQSxlQUFBO0FBQVI7QUFHSTtFQUNJLGdCQUFBO0VBQ0EsbUJBQUE7QUFEUiIsImZpbGUiOiJzcmMvYWRkb25zL21vZC9mZWVkYmFjay9wYWdlcy9mb3JtL2Zvcm0uc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIjpob3N0IHtcclxuICAgIC5hZGRvbi1tb2RfZmVlZGJhY2staXRlbSBpb24tbGFiZWwubGFiZWwtc3RhY2tlZCB7XHJcbiAgICAgICAgbWFyZ2luOiAxMXB4IDBweCAxMHB4O1xyXG4gICAgICAgIHRyYW5zZm9ybTogbm9uZTtcclxuICAgIH1cclxuXHJcbiAgICAuYWRkb24tbW9kX2ZlZWRiYWNrLWl0ZW0tZXJyb3Ige1xyXG4gICAgICAgIHBhZGRpbmctdG9wOiA1cHg7XHJcbiAgICAgICAgcGFkZGluZy1ib3R0b206IDhweDtcclxuICAgIH1cclxufVxyXG4iXX0= */\";","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { CoreSite } from '@classes/site';\nimport { CoreContentLinksHelper } from '@features/contentlinks/services/contentlinks-helper';\nimport { CoreCourse, CoreCourseCommonModWSOptions } from '@features/course/services/course';\nimport { CoreCourseModuleData } from '@features/course/services/course-helper';\nimport { CanLeave } from '@guards/can-leave';\nimport { IonContent } from '@ionic/angular';\nimport { CoreNetwork } from '@services/network';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreSites, CoreSitesReadingStrategy } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreUtils } from '@services/utils/utils';\nimport { NgZone, Translate } from '@singletons';\nimport { CoreEvents } from '@singletons/events';\nimport { Subscription } from 'rxjs';\nimport {\n    AddonModFeedback,\n    AddonModFeedbackGetFeedbackAccessInformationWSResponse,\n    AddonModFeedbackPageItems,\n    AddonModFeedbackProvider,\n    AddonModFeedbackResponseValue,\n    AddonModFeedbackWSFeedback,\n} from '../../services/feedback';\nimport { AddonModFeedbackFormItem, AddonModFeedbackHelper } from '../../services/feedback-helper';\nimport { AddonModFeedbackSync } from '../../services/feedback-sync';\nimport { AddonModFeedbackModuleHandlerService } from '../../services/handlers/module';\nimport { CoreAnalytics, CoreAnalyticsEventType } from '@services/analytics';\n\n/**\n * Page that displays feedback form.\n */\n@Component({\n    selector: 'page-addon-mod-feedback-form',\n    templateUrl: 'form.html',\n    styleUrls: ['form.scss'],\n})\nexport class AddonModFeedbackFormPage implements OnInit, OnDestroy, CanLeave {\n\n    @ViewChild(IonContent) content?: IonContent;\n\n    protected module?: CoreCourseModuleData;\n    protected currentPage?: number;\n    protected onlineObserver: Subscription;\n    protected originalData?: Record<string, AddonModFeedbackResponseValue>;\n    protected currentSite: CoreSite;\n    protected forceLeave = false;\n\n    title?: string;\n    preview = false;\n    fromIndex = false;\n    cmId!: number;\n    courseId!: number;\n    feedback?: AddonModFeedbackWSFeedback;\n    completionPageContents?: string;\n    component = AddonModFeedbackProvider.COMPONENT;\n    offline = false;\n    feedbackLoaded = false;\n    access?: AddonModFeedbackGetFeedbackAccessInformationWSResponse;\n    items: AddonModFeedbackFormItem[] = [];\n    hasPrevPage = false;\n    hasNextPage = false;\n    completed = false;\n    completedOffline = false;\n    siteAfterSubmit?: string;\n\n    constructor() {\n        this.currentSite = CoreSites.getRequiredCurrentSite();\n\n        // Refresh online status when changes.\n        this.onlineObserver = CoreNetwork.onChange().subscribe(() => {\n            // Execute the callback in the Angular zone, so change detection doesn't stop working.\n            NgZone.run(() => {\n                this.offline = !CoreNetwork.isOnline();\n            });\n        });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async ngOnInit(): Promise<void> {\n        try {\n            this.cmId = CoreNavigator.getRequiredRouteNumberParam('cmId');\n            this.courseId = CoreNavigator.getRequiredRouteNumberParam('courseId');\n            this.currentPage = CoreNavigator.getRouteNumberParam('page');\n            this.title = CoreNavigator.getRouteParam('title');\n            this.preview = !!CoreNavigator.getRouteBooleanParam('preview');\n            this.fromIndex = !!CoreNavigator.getRouteBooleanParam('fromIndex');\n        } catch (error) {\n            CoreDomUtils.showErrorModal(error);\n\n            CoreNavigator.back();\n\n            return;\n        }\n\n        await this.fetchData();\n\n        if (!this.access || this.access.isempty && (!this.access.canedititems && !this.access.canviewreports)) {\n            CoreDomUtils.showErrorModal(Translate.instant('core.nopermissiontoaccesspage'));\n\n            CoreNavigator.back();\n\n            return;\n        }\n\n        if (!this.feedback) {\n            return;\n        }\n\n        try {\n            await AddonModFeedback.logView(this.feedback.id, true);\n\n            CoreCourse.checkModuleCompletion(this.courseId, this.module!.completiondata);\n        } catch {\n            // Ignore errors.\n        }\n    }\n\n    /**\n     * View entered.\n     */\n    ionViewDidEnter(): void {\n        this.forceLeave = false;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async canLeave(): Promise<boolean> {\n        if (this.forceLeave) {\n            return true;\n        }\n\n        if (!this.preview) {\n            const responses = AddonModFeedbackHelper.getPageItemsResponses(this.items);\n\n            if (this.items && !this.completed && this.originalData) {\n                // Form submitted. Check if there is any change.\n                if (!CoreUtils.basicLeftCompare(responses, this.originalData, 3)) {\n                    await CoreDomUtils.showConfirm(Translate.instant('core.confirmcanceledit'));\n                }\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Fetch all the data required for the view.\n     *\n     * @returns Promise resolved when done.\n     */\n    protected async fetchData(): Promise<void> {\n        try {\n            this.module = await CoreCourse.getModule(this.cmId, this.courseId, undefined, true, false, this.currentSite.getId());\n\n            this.offline = !CoreNetwork.isOnline();\n            const options = {\n                cmId: this.cmId,\n                readingStrategy: this.offline ? CoreSitesReadingStrategy.PREFER_CACHE : CoreSitesReadingStrategy.ONLY_NETWORK,\n                siteId: this.currentSite.getId(),\n            };\n\n            this.feedback = await AddonModFeedback.getFeedback(this.courseId, this.cmId);\n\n            this.title = this.feedback.name || this.title;\n\n            await this.fetchAccessData(options);\n\n            let page = 0;\n\n            if (!this.preview && this.access!.cansubmit && !this.access!.isempty) {\n                page = this.currentPage ?? await this.fetchResumePage(options);\n            } else {\n                this.preview = true;\n            }\n\n            await this.fetchFeedbackPageData(page);\n        } catch (message) {\n            CoreDomUtils.showErrorModalDefault(message, 'core.course.errorgetmodule', true);\n            this.forceLeave = true;\n            CoreNavigator.back();\n        } finally {\n            this.feedbackLoaded = true;\n        }\n    }\n\n    /**\n     * Fetch access information.\n     *\n     * @param options Options.\n     * @returns Promise resolved when done.\n     */\n    protected async fetchAccessData(options: CoreCourseCommonModWSOptions): Promise<void> {\n        try {\n            this.access = await AddonModFeedback.getFeedbackAccessInformation(this.feedback!.id, options);\n        } catch (error) {\n            if (this.offline || CoreUtils.isWebServiceError(error)) {\n                // Already offline or shouldn't go offline, fail.\n                throw error;\n            }\n\n            // If it fails, go offline.\n            this.offline = true;\n            options.readingStrategy = CoreSitesReadingStrategy.PREFER_CACHE;\n\n            this.access = await AddonModFeedback.getFeedbackAccessInformation(this.feedback!.id, options);\n        }\n    }\n\n    /**\n     * Get resume page from WS.\n     *\n     * @param options Options.\n     * @returns Promise resolved with the page to resume.\n     */\n    protected async fetchResumePage(options: CoreCourseCommonModWSOptions): Promise<number> {\n        try {\n            return await AddonModFeedback.getResumePage(this.feedback!.id, options);\n        } catch (error) {\n            if (this.offline || CoreUtils.isWebServiceError(error)) {\n                // Already offline or shouldn't go offline, fail.\n                throw error;\n            }\n\n            // Go offline.\n            this.offline = true;\n            options.readingStrategy = CoreSitesReadingStrategy.PREFER_CACHE;\n\n            return AddonModFeedback.getResumePage(this.feedback!.id, options);\n        }\n    }\n\n    /**\n     * Fetch page data.\n     *\n     * @param page Page to load.\n     * @returns Promise resolved when done.\n     */\n    protected async fetchFeedbackPageData(page: number = 0): Promise<void> {\n        this.items = [];\n        const response = await this.fetchPageItems(page);\n\n        this.items = <AddonModFeedbackFormItem[]> response.items\n            .map((itemData) => AddonModFeedbackHelper.getItemForm(itemData, this.preview))\n            .filter((itemData) => itemData); // Filter items with errors.\n\n        if (!this.preview) {\n            const itemsCopy = CoreUtils.clone(this.items); // Copy the array to avoid modifications.\n            this.originalData = AddonModFeedbackHelper.getPageItemsResponses(itemsCopy);\n        }\n\n        this.analyticsLogEvent();\n    }\n\n    /**\n     * Fetch page items.\n     *\n     * @param page Page to get.\n     * @returns Promise resolved with WS response.\n     */\n    protected async fetchPageItems(page: number): Promise<AddonModFeedbackPageItems> {\n        const options = {\n            cmId: this.cmId,\n            readingStrategy: this.offline ? CoreSitesReadingStrategy.PREFER_CACHE : CoreSitesReadingStrategy.ONLY_NETWORK,\n            siteId: this.currentSite.getId(),\n        };\n\n        if (this.preview) {\n            const response = await AddonModFeedback.getItems(this.feedback!.id, options);\n\n            return {\n                items: response.items,\n                warnings: response.warnings,\n                hasnextpage: false,\n                hasprevpage: false,\n            };\n        }\n\n        this.currentPage = page;\n        let response: AddonModFeedbackPageItems;\n\n        try {\n            response = await AddonModFeedback.getPageItemsWithValues(this.feedback!.id, page, options);\n        } catch (error) {\n            if (this.offline || CoreUtils.isWebServiceError(error)) {\n                // Already offline or shouldn't go offline, fail.\n                throw error;\n            }\n\n            // Go offline.\n            this.offline = true;\n            options.readingStrategy = CoreSitesReadingStrategy.PREFER_CACHE;\n\n            response = await AddonModFeedback.getPageItemsWithValues(this.feedback!.id, page, options);\n        }\n\n        this.hasPrevPage = !!response.hasprevpage;\n        this.hasNextPage = !!response.hasnextpage;\n\n        return response;\n    }\n\n    /**\n     * Function to allow page navigation through the questions form.\n     *\n     * @param goPrevious If true it will go back to the previous page, if false, it will go forward.\n     * @returns Resolved when done.\n     */\n    async gotoPage(goPrevious: boolean): Promise<void> {\n        this.content?.scrollToTop();\n        this.feedbackLoaded = false;\n\n        const responses = AddonModFeedbackHelper.getPageItemsResponses(this.items);\n        const formHasErrors = this.items.some((item) => item.isEmpty || item.hasError);\n\n        try {\n            // Sync other pages first.\n            await CoreUtils.ignoreErrors(AddonModFeedbackSync.syncFeedback(this.feedback!.id));\n\n            const response = await AddonModFeedback.processPage(this.feedback!.id, this.currentPage!, responses, {\n                goPrevious,\n                formHasErrors,\n                courseId: this.courseId,\n                cmId: this.cmId,\n            });\n\n            if (response.completed) {\n                // Form is completed, show completion message and buttons.\n                this.items = [];\n                this.completed = true;\n                this.completedOffline = !!response.offline;\n                this.completionPageContents = response.completionpagecontents;\n                this.siteAfterSubmit = response.siteaftersubmit;\n\n                CoreEvents.trigger(CoreEvents.ACTIVITY_DATA_SENT, { module: 'feedback' });\n\n                // Invalidate access information so user will see home page updated (continue form or completion messages).\n                await Promise.all([\n                    AddonModFeedback.invalidateFeedbackAccessInformationData(this.feedback!.id),\n                    AddonModFeedback.invalidateResumePageData(this.feedback!.id),\n                ]);\n\n                // If form has been submitted, the info has been already invalidated but we should update index view.\n                CoreEvents.trigger(AddonModFeedbackProvider.FORM_SUBMITTED, {\n                    feedbackId: this.feedback!.id,\n                    tab: 'overview',\n                    offline: this.completedOffline,\n                });\n\n                await this.fetchAccessData({\n                    cmId: this.cmId,\n                    readingStrategy: this.offline ? CoreSitesReadingStrategy.PREFER_CACHE : CoreSitesReadingStrategy.ONLY_NETWORK,\n                    siteId: this.currentSite.getId(),\n                });\n            } else if (typeof response.jumpto != 'number' || response.jumpto == this.currentPage) {\n                // Errors on questions, stay in page.\n            } else {\n                // Invalidate access information so user will see home page updated (continue form).\n                await AddonModFeedback.invalidateResumePageData(this.feedback!.id);\n\n                CoreEvents.trigger(AddonModFeedbackProvider.FORM_SUBMITTED, {\n                    feedbackId: this.feedback!.id,\n                    tab: 'overview',\n                    offline: this.completedOffline,\n                });\n\n                // Fetch the new page.\n                await this.fetchFeedbackPageData(response.jumpto);\n            }\n        } catch (message) {\n            CoreDomUtils.showErrorModalDefault(message, 'core.course.errorgetmodule', true);\n        } finally {\n            this.feedbackLoaded = true;\n        }\n    }\n\n    /**\n     * Function to link implemented features.\n     */\n    showAnalysis(): void {\n        if (this.fromIndex) {\n            // Previous page is the index page, go back.\n            CoreEvents.trigger(AddonModFeedbackProvider.FORM_SUBMITTED, {\n                feedbackId: this.feedback!.id,\n                tab: 'analysis',\n                offline: this.completedOffline,\n            });\n\n            CoreNavigator.back();\n\n            return;\n        }\n\n        CoreNavigator.navigateToSitePath(AddonModFeedbackModuleHandlerService.PAGE_NAME + `/${this.courseId}/${this.cmId}`, {\n            params: {\n                module: this.module,\n                tab: 'analysis',\n            },\n        });\n    }\n\n    /**\n     * Function to go to the page after submit.\n     *\n     * @returns Promise resolved when done.\n     */\n    async continue(): Promise<void> {\n        if (!this.siteAfterSubmit) {\n            return CoreNavigator.back();\n        }\n\n        const modal = await CoreDomUtils.showModalLoading();\n\n        try {\n            const treated = await CoreContentLinksHelper.handleLink(this.siteAfterSubmit);\n\n            if (!treated) {\n                await this.currentSite.openInBrowserWithAutoLogin(this.siteAfterSubmit);\n            }\n        } finally {\n            modal.dismiss();\n        }\n    }\n\n    /**\n     * Log event in analytics.\n     */\n    protected analyticsLogEvent(): void {\n        if (!this.feedback) {\n            return;\n        }\n\n        if (this.preview) {\n            CoreAnalytics.logEvent({\n                type: CoreAnalyticsEventType.VIEW_ITEM,\n                ws: 'mod_feedback_get_items',\n                name: this.feedback.name,\n                data: { id: this.feedback.id, category: 'feedback' },\n                url: `/mod/feedback/print.php?id=${this.cmId}&courseid=${this.courseId}`,\n            });\n\n            return;\n        }\n\n        let url = '/mod/feedback/complete.php';\n        if (!this.completed) {\n            url += `?id=${this.cmId}` + (this.currentPage ? `&gopage=${this.currentPage}` : '') + `&courseid=${this.courseId}`;\n        }\n\n        CoreAnalytics.logEvent({\n            type: CoreAnalyticsEventType.VIEW_ITEM,\n            ws: this.completed ? 'mod_feedback_get_feedback_access_information' : 'mod_feedback_get_page_items',\n            name: this.feedback.name,\n            data: { id: this.feedback.id, category: 'feedback', page: this.currentPage },\n            url,\n        });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnDestroy(): void {\n        this.onlineObserver.unsubscribe();\n    }\n\n}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { CoreCourseModuleMainActivityPage } from '@features/course/classes/main-activity-page';\nimport { CoreNavigator } from '@services/navigator';\nimport { AddonModFeedbackIndexComponent } from '../../components/index/index';\n\n/**\n * Page that displays a feedback.\n */\n@Component({\n    selector: 'page-addon-mod-feedback-index',\n    templateUrl: 'index.html',\n})\nexport class AddonModFeedbackIndexPage extends CoreCourseModuleMainActivityPage<AddonModFeedbackIndexComponent> implements OnInit {\n\n    @ViewChild(AddonModFeedbackIndexComponent) activityComponent?: AddonModFeedbackIndexComponent;\n\n    selectedTab?: string;\n    selectedGroup?: number;\n\n    /**\n     * @inheritdoc\n     */\n    ngOnInit(): void {\n        super.ngOnInit();\n        this.selectedTab = CoreNavigator.getRouteParam('tab');\n        this.selectedGroup = CoreNavigator.getRouteNumberParam('group');\n    }\n\n}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnInit } from '@angular/core';\nimport { IonRefresher } from '@ionic/angular';\nimport { CoreGroupInfo, CoreGroups } from '@services/groups';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreUtils } from '@services/utils/utils';\nimport { AddonModFeedback, AddonModFeedbackWSFeedback } from '../../services/feedback';\nimport { AddonModFeedbackHelper, AddonModFeedbackNonRespondent } from '../../services/feedback-helper';\nimport { CoreTime } from '@singletons/time';\nimport { CoreAnalytics, CoreAnalyticsEventType } from '@services/analytics';\n\n/**\n * Page that displays feedback non respondents.\n */\n@Component({\n    selector: 'page-addon-mod-feedback-nonrespondents',\n    templateUrl: 'nonrespondents.html',\n})\nexport class AddonModFeedbackNonRespondentsPage implements OnInit {\n\n    protected cmId!: number;\n    protected feedback?: AddonModFeedbackWSFeedback;\n    protected page = 0;\n    protected logView: () => void;\n\n    courseId!: number;\n    selectedGroup!: number;\n    groupInfo?: CoreGroupInfo;\n    users: AddonModFeedbackNonRespondent[] = [];\n    total = 0;\n    canLoadMore = false;\n    loaded = false;\n    loadMoreError = false;\n\n    constructor() {\n        this.logView = CoreTime.once(() => {\n            if (!this.feedback) {\n                return;\n            }\n\n            CoreAnalytics.logEvent({\n                type: CoreAnalyticsEventType.VIEW_ITEM_LIST,\n                ws: 'mod_feedback_get_non_respondents',\n                name: this.feedback.name,\n                data: { feedbackid: this.feedback.id, category: 'feedback' },\n                url: `/mod/feedback/show_nonrespondents.php?id=${this.cmId}&courseid=${this.courseId}`,\n            });\n        });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnInit(): void {\n        try {\n            this.cmId = CoreNavigator.getRequiredRouteNumberParam('cmId');\n            this.courseId = CoreNavigator.getRequiredRouteNumberParam('courseId');\n            this.selectedGroup = CoreNavigator.getRouteNumberParam('group') || 0;\n        } catch (error) {\n            CoreDomUtils.showErrorModal(error);\n\n            CoreNavigator.back();\n\n            return;\n        }\n\n        this.fetchData();\n    }\n\n    /**\n     * Fetch all the data required for the view.\n     *\n     * @param refresh Empty events array first.\n     * @returns Promise resolved when done.\n     */\n    protected async fetchData(refresh: boolean = false): Promise<void> {\n        this.page = 0;\n        this.total = 0;\n        this.users = [];\n\n        try {\n            this.feedback = await AddonModFeedback.getFeedback(this.courseId, this.cmId);\n\n            this.groupInfo = await CoreGroups.getActivityGroupInfo(this.cmId);\n\n            this.selectedGroup = CoreGroups.validateGroupId(this.selectedGroup, this.groupInfo);\n\n            await this.loadGroupUsers(this.selectedGroup);\n\n            this.logView();\n        } catch (message) {\n            CoreDomUtils.showErrorModalDefault(message, 'core.course.errorgetmodule', true);\n\n            if (!refresh) {\n                // Some call failed on first fetch, go back.\n                CoreNavigator.back();\n            }\n        }\n    }\n\n    /**\n     * Load Group responses.\n     *\n     * @param groupId If defined it will change group if not, it will load more users for the same group.\n     * @returns Promise resolved when done.\n     */\n    protected async loadGroupUsers(groupId?: number): Promise<void> {\n        this.loadMoreError = false;\n\n        if (groupId === undefined) {\n            this.page++;\n        } else {\n            this.selectedGroup = groupId;\n            this.page = 0;\n            this.total = 0;\n            this.users = [];\n            this.loaded = false;\n        }\n\n        try {\n            const response = await AddonModFeedbackHelper.getNonRespondents(this.feedback!.id, {\n                groupId: this.selectedGroup,\n                page: this.page,\n                cmId: this.cmId,\n            });\n\n            this.total = response.total;\n            if (this.users.length < response.total) {\n                this.users = this.users.concat(response.users);\n            }\n\n            this.canLoadMore = this.users.length < response.total;\n        } catch (error) {\n            this.loadMoreError = true;\n\n            throw error;\n        } finally {\n            this.loaded = true;\n        }\n    }\n\n    /**\n     * Change selected group or load more users.\n     *\n     * @param groupId Group ID selected. If not defined, it will load more users.\n     * @param infiniteComplete Infinite scroll complete function. Only used from core-infinite-loading.\n     */\n    async loadAttempts(groupId?: number, infiniteComplete?: () => void): Promise<void> {\n        try {\n            await this.loadGroupUsers(groupId);\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'core.course.errorgetmodule', true);\n        } finally {\n            infiniteComplete && infiniteComplete();\n        }\n    }\n\n    /**\n     * Refresh the attempts.\n     *\n     * @param refresher Refresher.\n     */\n    async refreshFeedback(refresher: IonRefresher): Promise<void> {\n        try {\n            const promises: Promise<void>[] = [];\n\n            promises.push(CoreGroups.invalidateActivityGroupInfo(this.cmId));\n            if (this.feedback) {\n                promises.push(AddonModFeedback.invalidateNonRespondentsData(this.feedback.id));\n            }\n\n            await CoreUtils.ignoreErrors(Promise.all(promises));\n\n            await this.fetchData(true);\n        } finally {\n            refresher.complete();\n        }\n    }\n\n}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { ActivatedRoute, ActivatedRouteSnapshot, UrlSegment } from '@angular/router';\n\nimport { CoreNavigator } from '@services/navigator';\n\nimport { CoreRoutedItemsManager } from './routed-items-manager';\nimport { CoreRoutedItemsManagerSource } from './routed-items-manager-source';\n\n/**\n * Helper class to manage the state and routing of a swipeable page.\n */\nexport class CoreSwipeNavigationItemsManager<\n    Item = unknown,\n    Source extends CoreRoutedItemsManagerSource<Item> = CoreRoutedItemsManagerSource<Item>\n>\n    extends CoreRoutedItemsManager<Item, Source> {\n\n    /**\n     * Process page started operations.\n     */\n    async start(): Promise<void> {\n        this.updateSelectedItem();\n    }\n\n    /**\n     * Navigate to the next item.\n     */\n    async navigateToNextItem(): Promise<void> {\n        await this.navigateToItemBy(1, 'forward');\n    }\n\n    /**\n     * Navigate to the previous item.\n     */\n    async navigateToPreviousItem(): Promise<void> {\n        await this.navigateToItemBy(-1, 'back');\n    }\n\n    /**\n     * Has a next item.\n     *\n     * @returns If has next item.\n     */\n    async hasNextItem(): Promise<boolean> {\n        const item = await this.getItemBy(1);\n\n        return !!item;\n    }\n\n    /**\n     * Has a previous item.\n     *\n     * @returns If has previous item.\n     */\n    async hasPreviousItem(): Promise<boolean> {\n        const item = await this.getItemBy(-1);\n\n        return !!item;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected getCurrentPageRoute(): ActivatedRoute | null {\n        return CoreNavigator.getCurrentRoute();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected getSelectedItemPathFromRoute(route: ActivatedRouteSnapshot): string | null {\n        const segments: UrlSegment[] = [];\n\n        while (route) {\n            segments.push(...route.url);\n\n            if (!route.firstChild) {\n                break;\n            }\n\n            route = route.firstChild;\n        }\n\n        return segments.map(segment => segment.path).join('/').replace(/\\/+/, '/').trim() || null;\n    }\n\n    /**\n     * Navigate to an item by an offset.\n     *\n     * @param delta Index offset.\n     * @param animationDirection Animation direction.\n     */\n    protected async navigateToItemBy(delta: number, animationDirection: 'forward' | 'back'): Promise<void> {\n        const item = await this.getItemBy(delta);\n\n        if (!item) {\n            return;\n        }\n\n        await this.navigateToItem(item, { animationDirection, replace: true });\n    }\n\n    /**\n     * Get item by an offset.\n     *\n     * @param delta Index offset.\n     * @returns The item or null if none.\n     */\n    protected async getItemBy(delta: number): Promise<Item | null> {\n        const items = this.getSource().getItems();\n        const selectedIndex = (this.selectedItem && items?.indexOf(this.selectedItem)) ?? -1;\n\n        if (selectedIndex === -1 || items === null) {\n            return null;\n        }\n\n        const deltaStep = delta > 0 ? 1 : -1;\n        let nextIndex = selectedIndex;\n        let deltaMoved = 0;\n\n        while (deltaMoved !== delta) {\n            nextIndex += deltaStep;\n\n            if (nextIndex < 0) {\n                return null;\n            }\n\n            if (nextIndex >= items.length) {\n                break;\n            }\n\n            if (this.skipItemInSwipe(items[nextIndex])) {\n                continue;\n            }\n\n            deltaMoved += deltaStep;\n        }\n\n        if (deltaMoved === delta) {\n            return items[nextIndex];\n        }\n\n        if (!this.getSource().isCompleted()) {\n            await this.getSource().load();\n\n            return this.getItemBy(delta);\n        }\n\n        return null;\n    }\n\n    /**\n     * Check if an item should be skipped during swipe navigation.\n     *\n     * @param item Item.\n     * @returns Whether to skip this item during swipe navigation.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    protected skipItemInSwipe(item: Item): boolean {\n        return false;\n    }\n\n}\n"],"sourceRoot":"webpack:///"}