{"version":3,"sources":["./src/addons/privatefiles/pages/index/index.html","./src/addons/privatefiles/pages/index/index.ts","./src/addons/privatefiles/privatefiles-lazy.module.ts"],"names":[],"mappings":"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","file":"addons-privatefiles-privatefiles-lazy-module.js","sourcesContent":["export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <ion-title>\\r\\n            <h1>{{ title }}</h1>\\r\\n        </ion-title>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content class=\\\"limited-width\\\">\\r\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!filesLoaded || (!showPrivateFiles && !showSiteFiles)\\\"\\r\\n        (ionRefresh)=\\\"refreshData($event.target)\\\">\\r\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n    </ion-refresher>\\r\\n\\r\\n    <core-loading [hideUntil]=\\\"filesLoaded\\\" *ngIf=\\\"showPrivateFiles || showSiteFiles\\\">\\r\\n        <!-- Allow selecting the files to see: private or site. -->\\r\\n        <core-combobox [selection]=\\\"root\\\" (onChange)=\\\"rootChanged($event)\\\" *ngIf=\\\"showPrivateFiles && showSiteFiles && !path\\\">\\r\\n            <ion-select-option class=\\\"ion-text-wrap\\\" value=\\\"my\\\">\\r\\n                {{ 'addon.privatefiles.privatefiles' | translate }}\\r\\n            </ion-select-option>\\r\\n            <ion-select-option class=\\\"ion-text-wrap\\\" value=\\\"site\\\">\\r\\n                {{ 'addon.privatefiles.sitefiles' | translate }}\\r\\n            </ion-select-option>\\r\\n        </core-combobox>\\r\\n\\r\\n        <!-- Display info about space used and space left. -->\\r\\n        <ion-card class=\\\"core-info-card\\\" *ngIf=\\\"userQuota && filesInfo && filesInfo.filecount > 0\\\">\\r\\n            <ion-item>\\r\\n                <ion-label>\\r\\n                    {{ 'core.quotausage' | translate:{$a: {used: spaceUsed, total: userQuotaReadable} } }}\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n        </ion-card>\\r\\n\\r\\n        <!-- List of files. -->\\r\\n        <ion-list *ngIf=\\\"files && files.length > 0\\\">\\r\\n            <ng-container *ngFor=\\\"let file of files\\\">\\r\\n                <ion-item button *ngIf=\\\"file.isdir\\\" class=\\\"ion-text-wrap item-file item-directory\\\" (click)=\\\"openFolder(file)\\\" detail=\\\"true\\\">\\r\\n                    <ion-icon name=\\\"fas-folder\\\" slot=\\\"start\\\" [attr.aria-label]=\\\"'core.folder' | translate\\\"></ion-icon>\\r\\n                    <ion-label>{{file.filename}}</ion-label>\\r\\n                </ion-item>\\r\\n                <core-file *ngIf=\\\"!file.isdir\\\" [file]=\\\"file\\\" [component]=\\\"component\\\" [componentId]=\\\"file.contextid\\\"></core-file>\\r\\n            </ng-container>\\r\\n        </ion-list>\\r\\n\\r\\n        <!-- Message telling there are no files. -->\\r\\n        <core-empty-box *ngIf=\\\"!files || !files.length\\\" icon=\\\"far-folder-open\\\" [message]=\\\"'addon.privatefiles.emptyfilelist' | translate\\\">\\r\\n        </core-empty-box>\\r\\n    </core-loading>\\r\\n\\r\\n    <!-- Upload a private file. -->\\r\\n    <ion-fab slot=\\\"fixed\\\" core-fab vertical=\\\"bottom\\\" horizontal=\\\"end\\\" *ngIf=\\\"showUpload && root != 'site' && !path\\\">\\r\\n        <ion-fab-button (click)=\\\"uploadFile()\\\" [attr.aria-label]=\\\"'core.fileuploader.uploadafile' | translate\\\">\\r\\n            <ion-icon name=\\\"fas-plus\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n            <span class=\\\"sr-only\\\">{{ 'core.fileuploader.uploadafile' | translate }}</span>\\r\\n        </ion-fab-button>\\r\\n    </ion-fab>\\r\\n</ion-content>\\r\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnDestroy, OnInit } from '@angular/core';\nimport { IonRefresher } from '@ionic/angular';\nimport { Md5 } from 'ts-md5/dist/md5';\n\nimport { CoreNetwork } from '@services/network';\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { Translate } from '@singletons';\nimport { CoreEventObserver, CoreEvents } from '@singletons/events';\nimport {\n    AddonPrivateFiles,\n    AddonPrivateFilesProvider,\n    AddonPrivateFilesFile,\n    AddonPrivateFilesGetUserInfoWSResult,\n    AddonPrivateFilesGetFilesWSParams,\n} from '@addons/privatefiles/services/privatefiles';\nimport { AddonPrivateFilesHelper } from '@addons/privatefiles/services/privatefiles-helper';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreTime } from '@singletons/time';\nimport { CoreAnalytics, CoreAnalyticsEventType } from '@services/analytics';\n\n/**\n * Page that displays the list of files.\n */\n@Component({\n    selector: 'page-addon-privatefiles-index',\n    templateUrl: 'index.html',\n})\nexport class AddonPrivateFilesIndexPage implements OnInit, OnDestroy {\n\n    title!: string; // Page title.\n    root?: 'my' | 'site'; // The root of the files loaded: 'my' or 'site'.\n    path?: AddonPrivateFilesGetFilesWSParams; // The path of the directory being loaded. If empty path it means load the root.\n    showPrivateFiles!: boolean; // Whether the user can view private files.\n    showSiteFiles!: boolean; // Whether the user can view site files.\n    showUpload!: boolean; // Whether the user can upload files.\n    userQuota?: number; // The user quota (in bytes).\n    filesInfo?: AddonPrivateFilesGetUserInfoWSResult; // Info about private files (size, number of files, etc.).\n    spaceUsed?: string; // Space used in a readable format.\n    userQuotaReadable?: string; // User quota in a readable format.\n    files?: AddonPrivateFilesFile[]; // List of files.\n    component!: string; // Component to link the file downloads to.\n    filesLoaded = false; // Whether the files are loaded.\n\n    protected updateSiteObserver: CoreEventObserver;\n    protected logView: () => void;\n\n    constructor() {\n        // Update visibility if current site info is updated.\n        this.updateSiteObserver = CoreEvents.on(CoreEvents.SITE_UPDATED, () => {\n            this.setVisibility();\n        }, CoreSites.getCurrentSiteId());\n\n        this.logView = CoreTime.once(async () => {\n            CoreAnalytics.logEvent({\n                type: CoreAnalyticsEventType.VIEW_ITEM_LIST,\n                ws: 'core_files_get_files',\n                name: Translate.instant('addon.privatefiles.files'),\n                data: { category: 'files' },\n                url: '/user/files.php',\n            });\n        });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnInit(): void {\n        try {\n            this.root = CoreNavigator.getRouteParam('root');\n            const contextId = CoreNavigator.getRouteNumberParam('contextid');\n\n            if (contextId) {\n                // Loading a certain folder.\n                this.path = {\n                    contextid: contextId,\n                    component: CoreNavigator.getRequiredRouteParam<string>('component'),\n                    filearea: CoreNavigator.getRequiredRouteParam<string>('filearea'),\n                    itemid: CoreNavigator.getRequiredRouteNumberParam('itemid'),\n                    filepath: CoreNavigator.getRequiredRouteParam<string>('filepath'),\n                    filename: CoreNavigator.getRequiredRouteParam<string>('filename'),\n                };\n            }\n        } catch (error) {\n            CoreDomUtils.showErrorModal(error);\n\n            CoreNavigator.back();\n\n            return;\n        }\n\n        this.title = this.path?.filename || Translate.instant('addon.privatefiles.files');\n\n        this.setVisibility();\n        this.userQuota = CoreSites.getCurrentSite()?.getInfo()?.userquota;\n\n        if (!this.root) {\n            // Load private files by default.\n            if (this.showPrivateFiles) {\n                this.root = 'my';\n            } else if (this.showSiteFiles) {\n                this.root = 'site';\n            }\n        }\n\n        if (this.root) {\n            this.rootChanged(this.root);\n        } else {\n            this.filesLoaded = true;\n        }\n    }\n\n    /**\n     * Set visibility of some items based on site data.\n     */\n    protected setVisibility(): void {\n        this.showPrivateFiles = AddonPrivateFiles.canViewPrivateFiles();\n        this.showSiteFiles = AddonPrivateFiles.canViewSiteFiles();\n        this.showUpload = AddonPrivateFiles.canUploadFiles();\n    }\n\n    /**\n     * Refresh the data.\n     *\n     * @param refresher Refresher.\n     */\n    refreshData(refresher?: IonRefresher): void {\n        this.refreshFiles().finally(() => {\n            refresher?.complete();\n        });\n    }\n\n    /**\n     * Function called when the root has changed.\n     *\n     * @param root New root.\n     */\n    rootChanged(root: 'my' | 'site'): void {\n        this.root = root;\n\n        this.filesLoaded = false;\n        this.component = this.root == 'my' ? AddonPrivateFilesProvider.PRIVATE_FILES_COMPONENT :\n            AddonPrivateFilesProvider.SITE_FILES_COMPONENT;\n\n        this.fetchFiles().finally(() => {\n            this.filesLoaded = true;\n        });\n    }\n\n    /**\n     * Upload a new file.\n     */\n    async uploadFile(): Promise<void> {\n        if (!CoreNetwork.isOnline()) {\n            CoreDomUtils.showErrorModal('core.fileuploader.errormustbeonlinetoupload', true);\n\n            return;\n        }\n\n        try {\n            await AddonPrivateFilesHelper.uploadPrivateFile(this.filesInfo);\n\n            // File uploaded, refresh the list.\n            this.filesLoaded = false;\n\n            await CoreUtils.ignoreErrors(this.refreshFiles());\n\n            this.filesLoaded = true;\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'core.fileuploader.errorwhileuploading', true);\n        }\n    }\n\n    /**\n     * Fetch the files.\n     *\n     * @returns Promise resolved when done.\n     */\n    protected async fetchFiles(): Promise<void> {\n        try {\n            if (this.path) {\n                // Path is set, serve the files the user requested.\n                this.files = await AddonPrivateFiles.getFiles(this.path);\n\n                return;\n            }\n\n            // The path is unknown, the user must be requesting a root.\n            if (this.root == 'site') {\n                this.title = Translate.instant('addon.privatefiles.sitefiles');\n\n                this.files = await AddonPrivateFiles.getSiteFiles();\n            } else if (this.root == 'my') {\n                this.title = Translate.instant('addon.privatefiles.files');\n\n                this.files = await AddonPrivateFiles.getPrivateFiles();\n\n                if (this.showUpload && this.userQuota && this.userQuota > 0) {\n                    // Get the info to calculate the available size.\n                    this.filesInfo = await AddonPrivateFiles.getPrivateFilesInfo();\n\n                    this.spaceUsed = CoreTextUtils.bytesToSize(this.filesInfo.filesizewithoutreferences, 1);\n                    this.userQuotaReadable = CoreTextUtils.bytesToSize(this.userQuota, 1);\n                } else {\n                    // User quota isn't useful, delete it.\n                    delete this.userQuota;\n                }\n\n                this.logView();\n            } else {\n                // Unknown root.\n                CoreDomUtils.showErrorModal('addon.privatefiles.couldnotloadfiles', true);\n            }\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'addon.privatefiles.couldnotloadfiles', true);\n        }\n    }\n\n    /**\n     * Refresh the displayed files.\n     *\n     * @returns Promise resolved when done.\n     */\n    protected async refreshFiles(): Promise<void> {\n        try {\n            await Promise.all([\n                AddonPrivateFiles.invalidateDirectory(this.root, this.path),\n                AddonPrivateFiles.invalidatePrivateFilesInfoForUser(),\n            ]);\n        } finally {\n            await this.fetchFiles();\n        }\n    }\n\n    /**\n     * Open a folder.\n     *\n     * @param folder Folder to open.\n     */\n    openFolder(folder: AddonPrivateFilesFile): void {\n        const params = {\n            contextid: folder.contextid,\n            component: folder.component || '',\n            filearea: folder.filearea || '',\n            itemid: folder.itemid || 0,\n            filepath: folder.filepath || '',\n            filename: folder.filename || '',\n        };\n\n        if (folder.component) {\n            // Delete unused elements that may break the request.\n            params.filename = '';\n        }\n\n        const hash = <string> Md5.hashAsciiStr(JSON.stringify(params));\n\n        CoreNavigator.navigate(`../${hash}`, { params });\n    }\n\n    /**\n     * Page destroyed.\n     */\n    ngOnDestroy(): void {\n        this.updateSiteObserver?.off();\n    }\n\n}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { CoreSharedModule } from '@/core/shared.module';\nimport { AddonPrivateFilesIndexPage } from '@addons/privatefiles/pages/index';\nimport { Injector, NgModule } from '@angular/core';\nimport { RouterModule, ROUTES, Routes } from '@angular/router';\n\nimport { buildTabMainRoutes } from '@features/mainmenu/mainmenu-tab-routing.module';\n\n/**\n * Build module routes.\n *\n * @param injector Injector.\n * @returns Routes.\n */\nfunction buildRoutes(injector: Injector): Routes {\n    return [\n        {\n            path: 'root',\n            component: AddonPrivateFilesIndexPage,\n        },\n        {\n            path: ':hash',\n            component: AddonPrivateFilesIndexPage,\n        },\n        ...buildTabMainRoutes(injector, {\n            redirectTo: 'root',\n            pathMatch: 'full',\n        }),\n    ];\n}\n\n@NgModule({\n    imports: [\n        CoreSharedModule,\n    ],\n    declarations: [\n        AddonPrivateFilesIndexPage,\n    ],\n    exports: [RouterModule],\n    providers: [\n        {\n            provide: ROUTES,\n            multi: true,\n            deps: [Injector],\n            useFactory: buildRoutes,\n        },\n    ],\n})\nexport class AddonPrivateFilesLazyModule {}\n"],"sourceRoot":"webpack:///"}