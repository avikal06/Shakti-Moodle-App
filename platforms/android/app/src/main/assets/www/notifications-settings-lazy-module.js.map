{"version":3,"sources":["./src/addons/notifications/pages/settings/settings.html","./src/addons/notifications/notifications-settings-lazy.module.ts","./src/addons/notifications/pages/settings/settings.scss","./src/addons/notifications/pages/settings/settings.ts"],"names":[],"mappings":"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","file":"notifications-settings-lazy-module.js","sourcesContent":["export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <ion-title>\\r\\n            <h1>{{ 'addon.notifications.notifications' | translate }}</h1>\\r\\n        </ion-title>\\r\\n        <ion-buttons slot=\\\"end\\\">\\r\\n        </ion-buttons>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<core-navbar-buttons slot=\\\"end\\\">\\r\\n    <core-context-menu>\\r\\n        <core-context-menu-item *ngFor=\\\"let handler of processorHandlers\\\" [priority]=\\\"handler.priority\\\"\\r\\n            [content]=\\\"handler.label | translate\\\" (action)=\\\"openExtraPreferences(handler)\\\" [iconAction]=\\\"handler.icon\\\">\\r\\n        </core-context-menu-item>\\r\\n    </core-context-menu>\\r\\n</core-navbar-buttons>\\r\\n<ion-content>\\r\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!preferencesLoaded\\\" (ionRefresh)=\\\"refreshPreferences($event.target)\\\">\\r\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n    </ion-refresher>\\r\\n    <core-loading [hideUntil]=\\\"preferencesLoaded\\\">\\r\\n        <ion-card>\\r\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"preferences\\\">\\r\\n                <ion-label>\\r\\n                    <p class=\\\"item-heading\\\">{{ 'addon.notifications.allownotifications' | translate }}</p>\\r\\n                </ion-label>\\r\\n                <ion-toggle [(ngModel)]=\\\"preferences.enableall\\\" (ngModelChange)=\\\"enableAll(preferences.enableall)\\\" slot=\\\"end\\\"></ion-toggle>\\r\\n            </ion-item>\\r\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"canChangeSound\\\">\\r\\n                <ion-label>\\r\\n                    <p class=\\\"item-heading\\\">{{ 'addon.notifications.playsound' | translate }}</p>\\r\\n                </ion-label>\\r\\n                <ion-toggle [(ngModel)]=\\\"notificationSound\\\" (ngModelChange)=\\\"changeNotificationSound(notificationSound)\\\" slot=\\\"end\\\">\\r\\n                </ion-toggle>\\r\\n            </ion-item>\\r\\n        </ion-card>\\r\\n\\r\\n        <ion-card>\\r\\n            <ion-item class=\\\"ion-text-wrap only-links\\\" *ngIf=\\\"preferences?.processors?.length\\\" lines=\\\"none\\\" [button]=\\\"false\\\">\\r\\n                <ion-label class=\\\"addon-notification-type-form\\\">\\r\\n                    <p class=\\\"item-heading\\\">{{ 'addon.notifications.typeofnotification' | translate }}</p>\\r\\n                </ion-label>\\r\\n                <!-- Show processor selector. -->\\r\\n                <ion-select [(ngModel)]=\\\"currentProcessorName\\\" (ionChange)=\\\"changeProcessor($event)\\\" interface=\\\"popover\\\">\\r\\n                    <ion-select-option class=\\\"ion-text-wrap\\\" *ngFor=\\\"let processor of preferences?.processors\\\" [value]=\\\"processor.name\\\">\\r\\n                        {{ processor.displayname }}\\r\\n                    </ion-select-option>\\r\\n                </ion-select>\\r\\n            </ion-item>\\r\\n\\r\\n            <ng-container *ngIf=\\\"loggedInOffLegacyMode\\\">\\r\\n                <ng-container *ngTemplateOutlet=\\\"legacySettings; context: {preferences: preferences}\\\"></ng-container>\\r\\n            </ng-container>\\r\\n\\r\\n            <ng-container *ngIf=\\\"!loggedInOffLegacyMode\\\">\\r\\n                <ng-container *ngTemplateOutlet=\\\"settings; context: {preferences: preferences}\\\"></ng-container>\\r\\n            </ng-container>\\r\\n        </ion-card>\\r\\n    </core-loading>\\r\\n\\r\\n</ion-content>\\r\\n\\r\\n\\r\\n<!-- 3.11 downwards version -->\\r\\n<ng-template #legacySettings let-preferences=\\\"preferences\\\">\\r\\n    <ng-container *ngFor=\\\"let component of components\\\" class=\\\"ion-margin-top\\\">\\r\\n        <ion-card-header class=\\\"ion-no-padding\\\">\\r\\n            <ion-item class=\\\"ion-text-wrap divider\\\">\\r\\n                <ion-label class=\\\"ion-text-wrap\\\">\\r\\n                    <ion-row class=\\\"ion-no-padding\\\">\\r\\n                        <ion-col class=\\\"ion-no-padding\\\">\\r\\n                            <p class=\\\"item-heading\\\">{{ component.displayname }}</p>\\r\\n                        </ion-col>\\r\\n                        <ion-col size=\\\"2\\\" class=\\\"ion-text-center ion-no-padding ion-hide-md-down\\\">\\r\\n                            <p>{{ 'core.settings.loggedin' | translate }}</p>\\r\\n                        </ion-col>\\r\\n                        <ion-col size=\\\"2\\\" class=\\\"ion-text-center ion-no-padding ion-hide-md-down\\\">\\r\\n                            <p>{{ 'core.settings.loggedoff' | translate }}</p>\\r\\n                        </ion-col>\\r\\n                    </ion-row>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n        </ion-card-header>\\r\\n        <ng-container *ngFor=\\\"let notification of component.notifications\\\">\\r\\n            <!-- Tablet view -->\\r\\n            <ion-item class=\\\"ion-text-wrap ion-hide-md-down addon-notifications-table-content only-links\\\">\\r\\n                <ion-label>\\r\\n                    <ion-row class=\\\"ion-no-padding ion-align-items-center\\\">\\r\\n                        <ion-col class=\\\"ion-margin-horizontal ion-no-padding\\\">\\r\\n                            <p class=\\\"item-heading\\\">{{ notification.displayname }}</p>\\r\\n                        </ion-col>\\r\\n                        <ion-col size=\\\"2\\\" class=\\\"ion-text-center ion-no-padding\\\" *ngFor=\\\"let state of ['loggedin', 'loggedoff']\\\">\\r\\n                            <ng-container *ngIf=\\\"preferences!.enableall && notification.processorsByName[currentProcessorName][state]\\\">\\r\\n                                <!-- If notifications enabled, show toggle. -->\\r\\n                                <core-button-with-spinner *ngIf=\\\"!notification.processorsByName[currentProcessorName].locked\\\"\\r\\n                                    [loading]=\\\"notification.processorsByName[currentProcessorName][state].updating\\\">\\r\\n                                    <ion-toggle [(ngModel)]=\\\"notification.processorsByName[currentProcessorName][state].checked\\\"\\r\\n                                        (ngModelChange)=\\\"changePreferenceLegacy(notification, state)\\\">\\r\\n                                    </ion-toggle>\\r\\n                                </core-button-with-spinner>\\r\\n                                <span class=\\\"text-gray\\\" *ngIf=\\\"notification.processorsByName[currentProcessorName].locked &&\\r\\n                                    notification.processorsByName[currentProcessorName][state].checked\\\">\\r\\n                                    {{'core.settings.forced' | translate }}\\r\\n                                </span>\\r\\n                                <span class=\\\"text-gray\\\" *ngIf=\\\"notification.processorsByName[currentProcessorName].locked &&\\r\\n                                    !notification.processorsByName[currentProcessorName][state].checked\\\">\\r\\n                                    {{'core.settings.disallowed' | translate }}\\r\\n                                </span>\\r\\n                            </ng-container>\\r\\n                            <!-- If notifications are disabled, show \\\"Disabled\\\" instead of toggle. -->\\r\\n                            <span *ngIf=\\\"!preferences!.enableall\\\" class=\\\"text-gray\\\">{{ 'core.settings.disabled' | translate }}</span>\\r\\n                        </ion-col>\\r\\n                    </ion-row>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n\\r\\n            <!-- Phone view -->\\r\\n            <ion-item class=\\\"ion-text-wrap ion-no-margin ion-hide-md-up\\\">\\r\\n                <ion-label>\\r\\n                    <p class=\\\"item-heading\\\">{{ notification.displayname }}</p>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n            <!-- If notifications enabled, show toggles. If disabled, show \\\"Disabled\\\" instead of toggle. -->\\r\\n            <ion-item *ngFor=\\\"let state of ['loggedin', 'loggedoff']\\\" class=\\\"ion-text-wrap ion-hide-md-up\\\">\\r\\n                <ion-label class=\\\"ion-margin-horizontal\\\">\\r\\n                    <p>{{ 'core.settings.' + state | translate }}</p>\\r\\n                </ion-label>\\r\\n                <div slot=\\\"end\\\" *ngIf=\\\"preferences!.enableall && notification.processorsByName[currentProcessorName][state]\\\">\\r\\n                    <core-button-with-spinner *ngIf=\\\"!notification.processorsByName[currentProcessorName].locked\\\"\\r\\n                        [loading]=\\\"notification.processorsByName[currentProcessorName][state].updating\\\">\\r\\n                        <ion-toggle *ngIf=\\\"!notification.processorsByName[currentProcessorName].locked\\\"\\r\\n                            [(ngModel)]=\\\"notification.processorsByName[currentProcessorName][state].checked\\\"\\r\\n                            (ngModelChange)=\\\"changePreferenceLegacy(notification, state)\\\">\\r\\n                        </ion-toggle>\\r\\n                    </core-button-with-spinner>\\r\\n                    <span class=\\\"text-gray\\\" *ngIf=\\\"notification.processorsByName[currentProcessorName].locked &&\\r\\n                        notification.processorsByName[currentProcessorName][state].checked\\\">\\r\\n                        {{'core.settings.forced' | translate }}\\r\\n                    </span>\\r\\n                    <span class=\\\"text-gray\\\" *ngIf=\\\"notification.processorsByName[currentProcessorName].locked &&\\r\\n                        !notification.processorsByName[currentProcessorName][state].checked\\\">\\r\\n                        {{'core.settings.disallowed' | translate }}\\r\\n                    </span>\\r\\n                </div>\\r\\n                <span class=\\\"text-gray\\\" slot=\\\"end\\\" *ngIf=\\\"!preferences!.enableall\\\">{{ 'core.settings.disabled' | translate }}</span>\\r\\n            </ion-item>\\r\\n        </ng-container>\\r\\n    </ng-container>\\r\\n</ng-template>\\r\\n\\r\\n<!-- 4.0 onwards version -->\\r\\n<ng-template #settings let-preferences=\\\"preferences\\\">\\r\\n    <ng-container *ngFor=\\\"let component of components\\\" class=\\\"ion-margin-top\\\">\\r\\n        <ion-item-divider class=\\\"ion-text-wrap\\\">\\r\\n            <ion-label>\\r\\n                <p class=\\\"item-heading\\\">{{ component.displayname }}</p>\\r\\n            </ion-label>\\r\\n        </ion-item-divider>\\r\\n        <ng-container *ngFor=\\\"let notification of component.notifications\\\">\\r\\n            <!-- If notifications enabled, show toggles. If disabled, show \\\"Disabled\\\" instead of toggle. -->\\r\\n            <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                <ion-label>\\r\\n                    <p>{{ notification.displayname }}</p>\\r\\n                </ion-label>\\r\\n\\r\\n                <div slot=\\\"end\\\" *ngIf=\\\"preferences!.enableall\\\">\\r\\n                    <core-button-with-spinner *ngIf=\\\"!notification.processorsByName[currentProcessorName].locked\\\"\\r\\n                        [loading]=\\\"notification.processorsByName[currentProcessorName].updating\\\">\\r\\n                        <ion-toggle *ngIf=\\\"!notification.processorsByName[currentProcessorName].locked\\\"\\r\\n                            [(ngModel)]=\\\"notification.processorsByName[currentProcessorName].enabled\\\"\\r\\n                            (ngModelChange)=\\\"changePreference(notification)\\\">\\r\\n                        </ion-toggle>\\r\\n                    </core-button-with-spinner>\\r\\n                    <span class=\\\"text-gray\\\" *ngIf=\\\" notification.processorsByName[currentProcessorName].locked &&\\r\\n                        notification.processorsByName[currentProcessorName].enabled\\\">\\r\\n                        {{'core.settings.forced' | translate }}\\r\\n                    </span>\\r\\n                    <span class=\\\"text-gray\\\" *ngIf=\\\" notification.processorsByName[currentProcessorName].locked &&\\r\\n                        !notification.processorsByName[currentProcessorName].enabled\\\">\\r\\n                        {{'core.settings.disallowed' | translate }}\\r\\n                    </span>\\r\\n                </div>\\r\\n                <span class=\\\"text-gray\\\" slot=\\\"end\\\" *ngIf=\\\"!preferences!.enableall\\\">{{ 'core.settings.disabled' | translate }}</span>\\r\\n            </ion-item>\\r\\n        </ng-container>\\r\\n    </ng-container>\\r\\n</ng-template>\\r\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { CoreSharedModule } from '@/core/shared.module';\nimport { AddonNotificationsSettingsPage } from '@addons/notifications/pages/settings/settings';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: AddonNotificationsSettingsPage,\n    },\n];\n\n@NgModule({\n    imports: [\n        RouterModule.forChild(routes),\n        CoreSharedModule,\n    ],\n    declarations: [\n        AddonNotificationsSettingsPage,\n    ],\n    exports: [RouterModule],\n})\nexport class AddonNotificationsSettingsLazyModule {}\n","export default \".addon-notifications-table-content ion-row {\\n  min-height: 35px;\\n}\\n\\nion-item-divider, ion-card-header {\\n  border-top: 1px solid var(--stroke);\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hZGRvbnMvbm90aWZpY2F0aW9ucy9wYWdlcy9zZXR0aW5ncy9zZXR0aW5ncy5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksZ0JBQUE7QUFDSjs7QUFFQTtFQUNJLG1DQUFBO0FBQ0oiLCJmaWxlIjoic3JjL2FkZG9ucy9ub3RpZmljYXRpb25zL3BhZ2VzL3NldHRpbmdzL3NldHRpbmdzLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuYWRkb24tbm90aWZpY2F0aW9ucy10YWJsZS1jb250ZW50IGlvbi1yb3cge1xyXG4gICAgbWluLWhlaWdodDogMzVweDtcclxufVxyXG5cclxuaW9uLWl0ZW0tZGl2aWRlciwgaW9uLWNhcmQtaGVhZGVyIHtcclxuICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCB2YXIoLS1zdHJva2UpO1xyXG59XHJcbiJdfQ== */\";","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnInit, OnDestroy } from '@angular/core';\nimport { IonRefresher } from '@ionic/angular';\n\nimport { CoreConfig } from '@services/config';\nimport { CoreLocalNotifications } from '@services/local-notifications';\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreUser } from '@features/user/services/user';\nimport { AddonMessageOutputDelegate, AddonMessageOutputHandlerData } from '@addons/messageoutput/services/messageoutput-delegate';\nimport { CoreConstants } from '@/core/constants';\nimport { CoreError } from '@classes/errors/error';\nimport { CoreEvents } from '@singletons/events';\nimport {\n    AddonNotifications,\n    AddonNotificationsPreferencesNotificationProcessorState,\n} from '../../services/notifications';\nimport {\n    AddonNotificationsHelper,\n    AddonNotificationsPreferencesComponentFormatted,\n    AddonNotificationsPreferencesFormatted,\n    AddonNotificationsPreferencesNotificationFormatted,\n    AddonNotificationsPreferencesProcessorFormatted,\n} from '@addons/notifications/services/notifications-helper';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreTime } from '@singletons/time';\nimport { CoreAnalytics, CoreAnalyticsEventType } from '@services/analytics';\nimport { Translate } from '@singletons';\n\n/**\n * Page that displays notifications settings.\n */\n@Component({\n    selector: 'page-addon-notifications-settings',\n    templateUrl: 'settings.html',\n    styleUrls: ['settings.scss'],\n})\nexport class AddonNotificationsSettingsPage implements OnInit, OnDestroy {\n\n    preferences?: AddonNotificationsPreferencesFormatted;\n    components?: AddonNotificationsPreferencesComponentFormatted[];\n    currentProcessorName = 'airnotifier';\n    preferencesLoaded = false;\n    notificationSound = false;\n    canChangeSound: boolean;\n    processorHandlers: AddonMessageOutputHandlerData[] = [];\n    loggedInOffLegacyMode = false;\n\n    protected updateTimeout?: number;\n    protected logView: () => void;\n\n    constructor() {\n        this.canChangeSound = CoreLocalNotifications.canDisableSound();\n\n        const currentSite = CoreSites.getRequiredCurrentSite();\n        this.loggedInOffLegacyMode = !currentSite.isVersionGreaterEqualThan('4.0');\n\n        this.logView = CoreTime.once(async () => {\n            CoreAnalytics.logEvent({\n                type: CoreAnalyticsEventType.VIEW_ITEM_LIST,\n                ws: 'core_message_get_user_notification_preferences',\n                name: Translate.instant('addon.notifications.notificationpreferences'),\n                data: { category: 'notifications' },\n                url: '/message/notificationpreferences.php',\n            });\n        });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async ngOnInit(): Promise<void> {\n        if (this.canChangeSound) {\n            this.notificationSound = await CoreConfig.get<boolean>(CoreConstants.SETTINGS_NOTIFICATION_SOUND, true);\n        }\n\n        this.fetchPreferences();\n    }\n\n    /**\n     * Fetches preferences data.\n     *\n     * @returns Resolved when done.\n     */\n    protected async fetchPreferences(): Promise<void> {\n        try {\n            const preferences = await AddonNotifications.getNotificationPreferences();\n\n            // Initialize current processor. Load \"Mobile\" (airnotifier) if available.\n            let currentProcessor = preferences.processors.find((processor) => processor.name == this.currentProcessorName);\n            if (!currentProcessor) {\n                currentProcessor = preferences.processors[0];\n            }\n\n            if (!currentProcessor) {\n                // Shouldn't happen.\n                throw new CoreError('No processor found');\n            }\n\n            preferences.enableall = !preferences.disableall;\n            this.preferences = AddonNotificationsHelper.formatPreferences(preferences);\n            this.loadProcessor(currentProcessor);\n\n            this.logView();\n        } catch (error) {\n            CoreDomUtils.showErrorModal(error);\n        } finally {\n            this.preferencesLoaded = true;\n        }\n    }\n\n    /**\n     * Load a processor.\n     *\n     * @param processor Processor object.\n     */\n    protected loadProcessor(processor: AddonNotificationsPreferencesProcessorFormatted): void {\n        if (!processor) {\n            return;\n        }\n\n        this.currentProcessorName = processor.name;\n        this.processorHandlers = [];\n        this.components = AddonNotificationsHelper.getProcessorComponents(\n            processor.name,\n            this.preferences?.components || [],\n        );\n\n        if (!processor.hassettings || !processor.supported) {\n            return;\n        }\n\n        const handlerData = AddonMessageOutputDelegate.getDisplayData(processor);\n        if (handlerData) {\n            this.processorHandlers.push(handlerData);\n        }\n    }\n\n    /**\n     * Update preferences after a certain time. The purpose is to store the updated data, it won't be reflected in the view.\n     */\n    protected updatePreferencesAfterDelay(): void {\n        // Cancel pending updates.\n        clearTimeout(this.updateTimeout);\n\n        this.updateTimeout = window.setTimeout(() => {\n            this.updateTimeout = undefined;\n            this.updatePreferences();\n        }, 5000);\n    }\n\n    /**\n     * Update preferences. The purpose is to store the updated data, it won't be reflected in the view.\n     *\n     * @returns Promise resolved when done.\n     */\n    protected async updatePreferences(): Promise<void> {\n        await CoreUtils.ignoreErrors(AddonNotifications.invalidateNotificationPreferences());\n\n        await AddonNotifications.getNotificationPreferences();\n    }\n\n    /**\n     * The selected processor was changed.\n     *\n     * @param name Name of the selected processor.\n     */\n    changeProcessor(name: string): void {\n        const processor = this.preferences?.processors.find((processor) => processor.name == name);\n\n        if (processor) {\n            this.loadProcessor(processor);\n        }\n    }\n\n    /**\n     * Refresh the list of preferences.\n     *\n     * @param refresher Refresher.\n     */\n    async refreshPreferences(refresher?: IonRefresher): Promise<void> {\n        try {\n            await CoreUtils.ignoreErrors(AddonNotifications.invalidateNotificationPreferences());\n\n            await this.fetchPreferences();\n        } finally {\n            refresher?.complete();\n        }\n    }\n\n    /**\n     * Open extra preferences.\n     *\n     * @param handlerData The handler data to open.\n     */\n    openExtraPreferences(handlerData: AddonMessageOutputHandlerData): void {\n        CoreNavigator.navigateToSitePath(handlerData.page, { params: handlerData.pageParams });\n    }\n\n    /**\n     * Change the value of a certain preference.\n     *\n     * @param notification Notification object.\n     * @param state State name, ['loggedin', 'loggedoff'].\n     * @returns Promise resolved when done.\n     */\n    async changePreferenceLegacy(notification: AddonNotificationsPreferencesNotificationFormatted, state: string): Promise<void> {\n        const processor = notification.processorsByName?.[this.currentProcessorName];\n        if (!processor) {\n            return;\n        }\n\n        const processorState: ProcessorStateFormatted = processor[state];\n        const preferenceName = notification.preferencekey + '_' + processorState.name;\n\n        let value = notification.processors\n            .filter((processor) => processor[state].checked)\n            .map((processor) => processor.name)\n            .join(',');\n\n        if (value == '') {\n            value = 'none';\n        }\n\n        processorState.updating = true;\n\n        try {\n            await CoreUser.updateUserPreference(preferenceName, value);\n\n            // Update the preferences since they were modified.\n            this.updatePreferencesAfterDelay();\n        } catch (error) {\n            // Show error and revert change.\n            CoreDomUtils.showErrorModal(error);\n            processor[state].checked = !processor[state].checked;\n        } finally {\n            processorState.updating = false;\n        }\n    }\n\n    /**\n     * Change the value of a certain preference.\n     *\n     * @param notification Notification object.\n     * @returns Promise resolved when done.\n     */\n    async changePreference(notification: AddonNotificationsPreferencesNotificationFormatted): Promise<void> {\n        const processor = notification.processorsByName?.[this.currentProcessorName];\n        if (!processor) {\n            return;\n        }\n\n        const preferenceName = notification.preferencekey + '_enabled';\n\n        let value = notification.processors\n            .filter((processor) => processor.enabled)\n            .map((processor) => processor.name)\n            .join(',');\n\n        if (value == '') {\n            value = 'none';\n        }\n\n        processor.updating = true;\n\n        try {\n            await CoreUser.updateUserPreference(preferenceName, value);\n\n            // Update the preferences since they were modified.\n            this.updatePreferencesAfterDelay();\n        } catch (error) {\n            // Show error and revert change.\n            CoreDomUtils.showErrorModal(error);\n            processor.enabled = !processor.enabled;\n        } finally {\n            processor.updating = false;\n        }\n    }\n\n    /**\n     * Enable all notifications changed.\n     *\n     * @param enable Whether to enable or disable.\n     * @returns Promise resolved when done.\n     */\n    async enableAll(enable?: boolean): Promise<void> {\n        if (!this.preferences) {\n            return;\n        }\n\n        const modal = await CoreDomUtils.showModalLoading('core.sending', true);\n\n        try {\n            CoreUser.updateUserPreferences([], !enable);\n\n            // Update the preferences since they were modified.\n            this.updatePreferencesAfterDelay();\n        } catch (error) {\n            // Show error and revert change.\n            CoreDomUtils.showErrorModal(error);\n            this.preferences.enableall = !this.preferences.enableall;\n        } finally {\n            modal.dismiss();\n        }\n    }\n\n    /**\n     * Change the notification sound setting.\n     *\n     * @param enabled True to enable the notification sound, false to disable it.\n     */\n    async changeNotificationSound(enabled: boolean): Promise<void> {\n        await CoreUtils.ignoreErrors(CoreConfig.set(CoreConstants.SETTINGS_NOTIFICATION_SOUND, enabled ? 1 : 0));\n\n        const siteId = CoreSites.getCurrentSiteId();\n        CoreEvents.trigger(CoreEvents.NOTIFICATION_SOUND_CHANGED, { enabled }, siteId);\n        CoreLocalNotifications.rescheduleAll();\n    }\n\n    /**\n     * Page destroyed.\n     */\n    ngOnDestroy(): void {\n        // If there is a pending action to update preferences, execute it right now.\n        if (this.updateTimeout) {\n            clearTimeout(this.updateTimeout);\n            this.updatePreferences();\n        }\n    }\n\n}\n\n/**\n * State in notification processor in notification preferences component with some calculated data.\n *\n * @deprecated 4.0\n */\ntype ProcessorStateFormatted = AddonNotificationsPreferencesNotificationProcessorState & {\n    updating?: boolean; // Calculated in the app. Whether the state is being updated.\n};\n"],"sourceRoot":"webpack:///"}