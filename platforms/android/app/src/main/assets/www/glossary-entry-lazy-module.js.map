{"version":3,"sources":["./src/addons/mod/glossary/pages/entry/entry.html","./src/addons/mod/glossary/glossary-entry-lazy.module.ts","./src/addons/mod/glossary/pages/entry/entry.ts","./src/core/classes/items-management/swipe-navigation-items-manager.ts"],"names":[],"mappings":"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","file":"glossary-entry-lazy-module.js","sourcesContent":["export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <ion-title>\\r\\n            <h1 *ngIf=\\\"entry\\\">\\r\\n                <core-format-text [text]=\\\"entry.concept\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"componentId\\\" [courseId]=\\\"courseId\\\">\\r\\n                </core-format-text>\\r\\n            </h1>\\r\\n        </ion-title>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content [core-swipe-navigation]=\\\"entries\\\" class=\\\"limited-width\\\">\\r\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!loaded\\\" (ionRefresh)=\\\"doRefresh($event.target)\\\">\\r\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n    </ion-refresher>\\r\\n\\r\\n    <core-loading [hideUntil]=\\\"loaded\\\">\\r\\n        <ng-container *ngIf=\\\"entry && loaded\\\">\\r\\n            <ion-card *ngIf=\\\"offlineEntry\\\" class=\\\"core-warning-card\\\">\\r\\n                <ion-item>\\r\\n                    <ion-icon name=\\\"fas-triangle-exclamation\\\" slot=\\\"start\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                    <ion-label>{{ 'core.hasdatatosync' | translate: { $a: 'addon.mod_glossary.entry' | translate } }}</ion-label>\\r\\n                </ion-item>\\r\\n            </ion-card>\\r\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"showAuthor\\\">\\r\\n                <core-user-avatar [user]=\\\"entry\\\" slot=\\\"start\\\"></core-user-avatar>\\r\\n                <ion-label>\\r\\n                    <h2>\\r\\n                        <core-format-text [text]=\\\"entry.concept\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"componentId\\\"\\r\\n                            [courseId]=\\\"courseId\\\">\\r\\n                        </core-format-text>\\r\\n                    </h2>\\r\\n                    <p *ngIf=\\\"onlineEntry\\\">{{ onlineEntry.userfullname }}</p>\\r\\n                </ion-label>\\r\\n                <ion-note slot=\\\"end\\\" *ngIf=\\\"showDate && onlineEntry\\\">{{ onlineEntry.timemodified | coreDateDayOrTime }}</ion-note>\\r\\n            </ion-item>\\r\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"!showAuthor\\\">\\r\\n                <ion-label>\\r\\n                    <p class=\\\"item-heading\\\">\\r\\n                        <core-format-text [text]=\\\"entry.concept\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"componentId\\\">\\r\\n                        </core-format-text>\\r\\n                    </p>\\r\\n                </ion-label>\\r\\n                <ion-note slot=\\\"end\\\" *ngIf=\\\"showDate && onlineEntry\\\">{{ onlineEntry.timemodified | coreDateDayOrTime }}</ion-note>\\r\\n            </ion-item>\\r\\n            <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                <ion-label>\\r\\n                    <core-format-text [component]=\\\"component\\\" [componentId]=\\\"componentId\\\" [text]=\\\"entry.definition\\\" contextLevel=\\\"module\\\"\\r\\n                        [contextInstanceId]=\\\"componentId\\\" [courseId]=\\\"courseId\\\">\\r\\n                    </core-format-text>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n            <div *ngIf=\\\"onlineEntry && onlineEntry.attachment\\\">\\r\\n                <core-file *ngFor=\\\"let file of onlineEntry.attachments\\\" [file]=\\\"file\\\" [component]=\\\"component\\\" [componentId]=\\\"componentId\\\">\\r\\n                </core-file>\\r\\n            </div>\\r\\n            <div *ngIf=\\\"offlineEntry && offlineEntry.attachments\\\">\\r\\n                <core-file *ngFor=\\\"let file of offlineEntry.attachments.online\\\" [file]=\\\"file\\\" [component]=\\\"component\\\"\\r\\n                    [componentId]=\\\"componentId\\\">\\r\\n                </core-file>\\r\\n            </div>\\r\\n            <div *ngIf=\\\"offlineEntry && offlineEntryFiles\\\">\\r\\n                <core-local-file *ngFor=\\\"let file of offlineEntryFiles\\\" [file]=\\\"file\\\">\\r\\n                </core-local-file>\\r\\n            </div>\\r\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"onlineEntry && tagsEnabled && entry && onlineEntry.tags && onlineEntry.tags.length > 0\\\">\\r\\n                <ion-label>\\r\\n                    <div slot=\\\"start\\\">{{ 'core.tag.tags' | translate }}:</div>\\r\\n                    <core-tag-list [tags]=\\\"onlineEntry.tags\\\"></core-tag-list>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n            <ion-item *ngIf=\\\"canDelete || canEdit\\\">\\r\\n                <div slot=\\\"end\\\">\\r\\n                    <ion-button *ngIf=\\\"canDelete\\\" fill=\\\"clear\\\" color=\\\"danger\\\" (click)=\\\"deleteEntry()\\\"\\r\\n                        [attr.aria-label]=\\\"'addon.mod_glossary.deleteentry' | translate\\\">\\r\\n                        <ion-icon slot=\\\"icon-only\\\" name=\\\"fas-trash\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                    </ion-button>\\r\\n                    <ion-button *ngIf=\\\"canEdit\\\" fill=\\\"clear\\\" (click)=\\\"editEntry()\\\"\\r\\n                        [attr.aria-label]=\\\"'addon.mod_glossary.editentry' | translate\\\">\\r\\n                        <ion-icon slot=\\\"icon-only\\\" name=\\\"fas-pen\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                    </ion-button>\\r\\n                </div>\\r\\n            </ion-item>\\r\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"onlineEntry && !onlineEntry.approved\\\">\\r\\n                <ion-label>\\r\\n                    <p><em>{{ 'addon.mod_glossary.entrypendingapproval' | translate }}</em></p>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n            <core-comments *ngIf=\\\"glossary && glossary.allowcomments && onlineEntry && onlineEntry.id > 0 && commentsEnabled\\\"\\r\\n                contextLevel=\\\"module\\\" [instanceId]=\\\"glossary.coursemodule\\\" component=\\\"mod_glossary\\\" [itemId]=\\\"onlineEntry.id\\\"\\r\\n                area=\\\"glossary_entry\\\" [courseId]=\\\"glossary.course\\\" [showItem]=\\\"true\\\">\\r\\n            </core-comments>\\r\\n            <core-rating-rate *ngIf=\\\"glossary && ratingInfo && onlineEntry\\\" [ratingInfo]=\\\"ratingInfo\\\" contextLevel=\\\"module\\\"\\r\\n                [instanceId]=\\\"glossary.coursemodule\\\" [itemId]=\\\"onlineEntry.id\\\" [itemSetId]=\\\"0\\\" [courseId]=\\\"glossary.course\\\"\\r\\n                [aggregateMethod]=\\\"glossary.assessed\\\" [scaleId]=\\\"glossary.scale\\\" [userId]=\\\"entry.userid\\\" (onUpdate)=\\\"ratingUpdated()\\\">\\r\\n            </core-rating-rate>\\r\\n            <core-rating-aggregate *ngIf=\\\"glossary && ratingInfo && onlineEntry\\\" [ratingInfo]=\\\"ratingInfo\\\" contextLevel=\\\"module\\\"\\r\\n                [instanceId]=\\\"glossary.coursemodule\\\" [itemId]=\\\"onlineEntry.id\\\" [courseId]=\\\"glossary.course\\\"\\r\\n                [aggregateMethod]=\\\"glossary.assessed\\\" [scaleId]=\\\"glossary.scale\\\">\\r\\n            </core-rating-aggregate>\\r\\n        </ng-container>\\r\\n\\r\\n        <ion-card *ngIf=\\\"!entry\\\" class=\\\"core-warning-card\\\">\\r\\n            <ion-item>\\r\\n                <ion-label>{{ 'addon.mod_glossary.errorloadingentry' | translate }}</ion-label>\\r\\n            </ion-item>\\r\\n        </ion-card>\\r\\n    </core-loading>\\r\\n</ion-content>\\r\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { NgModule } from '@angular/core';\nimport { CoreSharedModule } from '@/core/shared.module';\nimport { CoreCommentsComponentsModule } from '@features/comments/components/components.module';\nimport { CoreRatingComponentsModule } from '@features/rating/components/components.module';\nimport { CoreTagComponentsModule } from '@features/tag/components/components.module';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AddonModGlossaryEntryPage } from '@addons/mod/glossary/pages/entry/entry';\n\nconst routes: Routes = [{\n    path: '',\n    component: AddonModGlossaryEntryPage,\n}];\n\n@NgModule({\n    declarations: [\n        AddonModGlossaryEntryPage,\n    ],\n    imports: [\n        RouterModule.forChild(routes),\n        CoreSharedModule,\n        CoreCommentsComponentsModule,\n        CoreRatingComponentsModule,\n        CoreTagComponentsModule,\n    ],\n})\nexport class AddonModGlossaryEntryLazyModule {}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { AddonModGlossaryHelper } from '@addons/mod/glossary/services/glossary-helper';\nimport { AddonModGlossaryOffline, AddonModGlossaryOfflineEntry } from '@addons/mod/glossary/services/glossary-offline';\nimport { Component, OnDestroy, OnInit, Optional, ViewChild } from '@angular/core';\nimport { ActivatedRoute, ActivatedRouteSnapshot } from '@angular/router';\nimport { CoreRoutedItemsManagerSourcesTracker } from '@classes/items-management/routed-items-manager-sources-tracker';\nimport { CoreSwipeNavigationItemsManager } from '@classes/items-management/swipe-navigation-items-manager';\nimport { CoreSplitViewComponent } from '@components/split-view/split-view';\nimport { CoreCommentsCommentsComponent } from '@features/comments/components/comments/comments';\nimport { CoreComments } from '@features/comments/services/comments';\nimport { CoreRatingInfo } from '@features/rating/services/rating';\nimport { CoreTag } from '@features/tag/services/tag';\nimport { FileEntry } from '@ionic-native/file/ngx';\nimport { IonRefresher } from '@ionic/angular';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreNetwork } from '@services/network';\nimport { CoreDomUtils, ToastDuration } from '@services/utils/dom';\nimport { CoreUtils } from '@services/utils/utils';\nimport { Translate } from '@singletons';\nimport { CoreEventObserver, CoreEvents } from '@singletons/events';\nimport { AddonModGlossaryEntriesSource, AddonModGlossaryEntryItem } from '../../classes/glossary-entries-source';\nimport {\n    AddonModGlossary,\n    AddonModGlossaryEntry,\n    AddonModGlossaryGlossary,\n    AddonModGlossaryProvider,\n    GLOSSARY_ENTRY_UPDATED,\n} from '../../services/glossary';\nimport { CoreTime } from '@singletons/time';\nimport { CoreAnalytics, CoreAnalyticsEventType } from '@services/analytics';\n\n/**\n * Page that displays a glossary entry.\n */\n@Component({\n    selector: 'page-addon-mod-glossary-entry',\n    templateUrl: 'entry.html',\n})\nexport class AddonModGlossaryEntryPage implements OnInit, OnDestroy {\n\n    @ViewChild(CoreCommentsCommentsComponent) comments?: CoreCommentsCommentsComponent;\n\n    component = AddonModGlossaryProvider.COMPONENT;\n    componentId?: number;\n    onlineEntry?: AddonModGlossaryEntry;\n    offlineEntry?: AddonModGlossaryOfflineEntry;\n    offlineEntryFiles?: FileEntry[];\n    entries!: AddonModGlossaryEntryEntriesSwipeManager;\n    glossary?: AddonModGlossaryGlossary;\n    entryUpdatedObserver?: CoreEventObserver;\n    loaded = false;\n    showAuthor = false;\n    showDate = false;\n    ratingInfo?: CoreRatingInfo;\n    tagsEnabled = false;\n    canEdit = false;\n    canDelete = false;\n    commentsEnabled = false;\n    courseId!: number;\n    cmId!: number;\n\n    protected logView: () => void;\n\n    constructor(@Optional() protected splitView: CoreSplitViewComponent, protected route: ActivatedRoute) {\n        this.logView = CoreTime.once(async () => {\n            if (!this.onlineEntry || !this.glossary || !this.componentId) {\n                return;\n            }\n\n            await CoreUtils.ignoreErrors(AddonModGlossary.logEntryView(this.onlineEntry.id, this.componentId));\n\n            this.analyticsLogEvent('mod_glossary_get_entry_by_id', `/mod/glossary/showentry.php?eid=${this.onlineEntry.id}`);\n        });\n    }\n\n    get entry(): AddonModGlossaryEntry | AddonModGlossaryOfflineEntry | undefined {\n        return this.onlineEntry ?? this.offlineEntry;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async ngOnInit(): Promise<void> {\n        let onlineEntryId: number | null = null;\n        let offlineEntryTimeCreated: number | null = null;\n\n        try {\n            this.courseId = CoreNavigator.getRequiredRouteNumberParam('courseId');\n            this.tagsEnabled = CoreTag.areTagsAvailableInSite();\n            this.commentsEnabled = !CoreComments.areCommentsDisabledInSite();\n            this.cmId = CoreNavigator.getRequiredRouteNumberParam('cmId');\n\n            const entrySlug = CoreNavigator.getRequiredRouteParam<string>('entrySlug');\n            const routeData = this.route.snapshot.data;\n            const source = CoreRoutedItemsManagerSourcesTracker.getOrCreateSource(\n                AddonModGlossaryEntriesSource,\n                [this.courseId, this.cmId, routeData.glossaryPathPrefix ?? ''],\n            );\n\n            this.entries = new AddonModGlossaryEntryEntriesSwipeManager(source);\n\n            await this.entries.start();\n\n            if (entrySlug.startsWith('new-')) {\n                offlineEntryTimeCreated = Number(entrySlug.slice(4));\n            } else {\n                onlineEntryId = Number(entrySlug);\n            }\n        } catch (error) {\n            CoreDomUtils.showErrorModal(error);\n            CoreNavigator.back();\n\n            return;\n        }\n\n        this.entryUpdatedObserver = CoreEvents.on(GLOSSARY_ENTRY_UPDATED, data => {\n            if (data.glossaryId !== this.glossary?.id) {\n                return;\n            }\n\n            if (\n                (this.onlineEntry && this.onlineEntry.id === data.entryId) ||\n                (this.offlineEntry && this.offlineEntry.timecreated === data.timecreated)\n            ) {\n                this.doRefresh();\n            }\n        });\n\n        try {\n            if (onlineEntryId) {\n                await this.loadOnlineEntry(onlineEntryId);\n            } else if (offlineEntryTimeCreated) {\n                await this.loadOfflineEntry(offlineEntryTimeCreated);\n            }\n        } finally {\n            this.loaded = true;\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnDestroy(): void {\n        this.entries.destroy();\n        this.entryUpdatedObserver?.off();\n    }\n\n    /**\n     * Edit entry.\n     */\n    async editEntry(): Promise<void> {\n        await CoreNavigator.navigate('./edit');\n    }\n\n    /**\n     * Delete entry.\n     */\n    async deleteEntry(): Promise<void> {\n        // Log analytics even if the user cancels for consistency with LMS.\n        this.analyticsLogEvent(\n            'mod_glossary_delete_entry',\n            `/mod/glossary/deleteentry.php?id=${this.glossary?.id}&mode=delete&entry=${this.onlineEntry?.id}`,\n        );\n\n        const glossaryId = this.glossary?.id;\n        const cancelled = await CoreUtils.promiseFails(\n            CoreDomUtils.showConfirm(Translate.instant('addon.mod_glossary.areyousuredelete')),\n        );\n\n        if (!glossaryId || cancelled) {\n            return;\n        }\n\n        const modal = await CoreDomUtils.showModalLoading();\n\n        try {\n            if (this.onlineEntry) {\n                const entryId = this.onlineEntry.id;\n\n                await AddonModGlossary.deleteEntry(glossaryId, entryId);\n                await Promise.all([\n                    CoreUtils.ignoreErrors(AddonModGlossary.invalidateEntry(entryId)),\n                    CoreUtils.ignoreErrors(AddonModGlossary.invalidateEntriesByLetter(glossaryId)),\n                    CoreUtils.ignoreErrors(AddonModGlossary.invalidateEntriesByAuthor(glossaryId)),\n                    CoreUtils.ignoreErrors(AddonModGlossary.invalidateEntriesByCategory(glossaryId)),\n                    CoreUtils.ignoreErrors(AddonModGlossary.invalidateEntriesByDate(glossaryId, 'CREATION')),\n                    CoreUtils.ignoreErrors(AddonModGlossary.invalidateEntriesByDate(glossaryId, 'UPDATE')),\n                    CoreUtils.ignoreErrors(this.entries.getSource().invalidateCache(false)),\n                ]);\n            } else if (this.offlineEntry) {\n                const concept = this.offlineEntry.concept;\n                const timecreated = this.offlineEntry.timecreated;\n\n                await AddonModGlossaryOffline.deleteOfflineEntry(glossaryId, timecreated);\n                await AddonModGlossaryHelper.deleteStoredFiles(glossaryId, concept, timecreated);\n            }\n\n            CoreDomUtils.showToast('addon.mod_glossary.entrydeleted', true, ToastDuration.LONG);\n\n            if (this.splitView?.outletActivated) {\n                await CoreNavigator.navigate('../../');\n            } else {\n                await CoreNavigator.back();\n            }\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'addon.mod_glossary.errordeleting', true);\n        } finally {\n            modal.dismiss();\n        }\n    }\n\n    /**\n     * Refresh the data.\n     *\n     * @param refresher Refresher.\n     * @returns Promise resolved when done.\n     */\n    async doRefresh(refresher?: IonRefresher): Promise<void> {\n        if (this.onlineEntry && this.glossary?.allowcomments && this.onlineEntry.id > 0 && this.commentsEnabled && this.comments) {\n            // Refresh comments asynchronously (without blocking the current promise).\n            CoreUtils.ignoreErrors(this.comments.doRefresh());\n        }\n\n        try {\n            if (this.onlineEntry) {\n                await CoreUtils.ignoreErrors(AddonModGlossary.invalidateEntry(this.onlineEntry.id));\n                await this.loadOnlineEntry(this.onlineEntry.id);\n            } else if (this.offlineEntry) {\n                const entrySlug = CoreNavigator.getRequiredRouteParam<string>('entrySlug');\n                const timecreated = Number(entrySlug.slice(4));\n\n                await this.loadOfflineEntry(timecreated);\n            }\n        } finally {\n            refresher?.complete();\n        }\n    }\n\n    /**\n     * Load online entry data.\n     */\n    protected async loadOnlineEntry(entryId: number): Promise<void> {\n        try {\n            const result = await AddonModGlossary.getEntry(entryId);\n            const canDeleteEntries = CoreNetwork.isOnline() && await AddonModGlossary.canDeleteEntries();\n            const canUpdateEntries = CoreNetwork.isOnline() && await AddonModGlossary.canUpdateEntries();\n\n            this.onlineEntry = result.entry;\n            this.ratingInfo = result.ratinginfo;\n            this.canDelete = canDeleteEntries && !!result.permissions?.candelete;\n            this.canEdit = canUpdateEntries && !!result.permissions?.canupdate;\n\n            await this.loadGlossary();\n\n            this.logView();\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'addon.mod_glossary.errorloadingentry', true);\n        }\n    }\n\n    /**\n     * Load offline entry data.\n     *\n     * @param timecreated Entry Timecreated.\n     */\n    protected async loadOfflineEntry(timecreated: number): Promise<void> {\n        try {\n            const glossary = await this.loadGlossary();\n\n            this.offlineEntry = await AddonModGlossaryOffline.getOfflineEntry(glossary.id, timecreated);\n            this.offlineEntryFiles = this.offlineEntry.attachments && this.offlineEntry.attachments.offline > 0\n                ? await AddonModGlossaryHelper.getStoredFiles(\n                    glossary.id,\n                    this.offlineEntry.concept,\n                    timecreated,\n                )\n                : undefined;\n            this.canEdit = true;\n            this.canDelete = true;\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'addon.mod_glossary.errorloadingentry', true);\n        }\n    }\n\n    /**\n     * Load glossary data.\n     *\n     * @returns Glossary.\n     */\n    protected async loadGlossary(): Promise<AddonModGlossaryGlossary> {\n        if (this.glossary) {\n            return this.glossary;\n        }\n\n        this.glossary = await AddonModGlossary.getGlossary(this.courseId, this.cmId);\n        this.componentId = this.glossary.coursemodule;\n\n        switch (this.glossary.displayformat) {\n            case 'fullwithauthor':\n            case 'encyclopedia':\n                this.showAuthor = true;\n                this.showDate = true;\n                break;\n            case 'fullwithoutauthor':\n                this.showAuthor = false;\n                this.showDate = true;\n                break;\n            default: // Default, and faq, simple, entrylist, continuous.\n                this.showAuthor = false;\n                this.showDate = false;\n        }\n\n        return this.glossary;\n    }\n\n    /**\n     * Function called when rating is updated online.\n     */\n    ratingUpdated(): void {\n        if (!this.onlineEntry) {\n            return;\n        }\n\n        AddonModGlossary.invalidateEntry(this.onlineEntry.id);\n    }\n\n    /**\n     * Log analytics event.\n     *\n     * @param wsName WS name.\n     * @param url URL.\n     */\n    protected analyticsLogEvent(wsName: string, url: string): void {\n        if (!this.onlineEntry || !this.glossary) {\n            return;\n        }\n\n        CoreAnalytics.logEvent({\n            type: CoreAnalyticsEventType.VIEW_ITEM,\n            ws: wsName,\n            name: this.onlineEntry.concept,\n            data: { id: this.onlineEntry.id, glossaryid: this.glossary.id, category: 'glossary' },\n            url,\n        });\n    }\n\n}\n\n/**\n * Helper to manage swiping within a collection of glossary entries.\n */\nclass AddonModGlossaryEntryEntriesSwipeManager\n    extends CoreSwipeNavigationItemsManager<AddonModGlossaryEntryItem, AddonModGlossaryEntriesSource> {\n\n    /**\n     * @inheritdoc\n     */\n    protected getSelectedItemPathFromRoute(route: ActivatedRouteSnapshot): string | null {\n        return `${this.getSource().GLOSSARY_PATH_PREFIX}entry/${route.params.entrySlug}`;\n    }\n\n}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { ActivatedRoute, ActivatedRouteSnapshot, UrlSegment } from '@angular/router';\n\nimport { CoreNavigator } from '@services/navigator';\n\nimport { CoreRoutedItemsManager } from './routed-items-manager';\nimport { CoreRoutedItemsManagerSource } from './routed-items-manager-source';\n\n/**\n * Helper class to manage the state and routing of a swipeable page.\n */\nexport class CoreSwipeNavigationItemsManager<\n    Item = unknown,\n    Source extends CoreRoutedItemsManagerSource<Item> = CoreRoutedItemsManagerSource<Item>\n>\n    extends CoreRoutedItemsManager<Item, Source> {\n\n    /**\n     * Process page started operations.\n     */\n    async start(): Promise<void> {\n        this.updateSelectedItem();\n    }\n\n    /**\n     * Navigate to the next item.\n     */\n    async navigateToNextItem(): Promise<void> {\n        await this.navigateToItemBy(1, 'forward');\n    }\n\n    /**\n     * Navigate to the previous item.\n     */\n    async navigateToPreviousItem(): Promise<void> {\n        await this.navigateToItemBy(-1, 'back');\n    }\n\n    /**\n     * Has a next item.\n     *\n     * @returns If has next item.\n     */\n    async hasNextItem(): Promise<boolean> {\n        const item = await this.getItemBy(1);\n\n        return !!item;\n    }\n\n    /**\n     * Has a previous item.\n     *\n     * @returns If has previous item.\n     */\n    async hasPreviousItem(): Promise<boolean> {\n        const item = await this.getItemBy(-1);\n\n        return !!item;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected getCurrentPageRoute(): ActivatedRoute | null {\n        return CoreNavigator.getCurrentRoute();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected getSelectedItemPathFromRoute(route: ActivatedRouteSnapshot): string | null {\n        const segments: UrlSegment[] = [];\n\n        while (route) {\n            segments.push(...route.url);\n\n            if (!route.firstChild) {\n                break;\n            }\n\n            route = route.firstChild;\n        }\n\n        return segments.map(segment => segment.path).join('/').replace(/\\/+/, '/').trim() || null;\n    }\n\n    /**\n     * Navigate to an item by an offset.\n     *\n     * @param delta Index offset.\n     * @param animationDirection Animation direction.\n     */\n    protected async navigateToItemBy(delta: number, animationDirection: 'forward' | 'back'): Promise<void> {\n        const item = await this.getItemBy(delta);\n\n        if (!item) {\n            return;\n        }\n\n        await this.navigateToItem(item, { animationDirection, replace: true });\n    }\n\n    /**\n     * Get item by an offset.\n     *\n     * @param delta Index offset.\n     * @returns The item or null if none.\n     */\n    protected async getItemBy(delta: number): Promise<Item | null> {\n        const items = this.getSource().getItems();\n        const selectedIndex = (this.selectedItem && items?.indexOf(this.selectedItem)) ?? -1;\n\n        if (selectedIndex === -1 || items === null) {\n            return null;\n        }\n\n        const deltaStep = delta > 0 ? 1 : -1;\n        let nextIndex = selectedIndex;\n        let deltaMoved = 0;\n\n        while (deltaMoved !== delta) {\n            nextIndex += deltaStep;\n\n            if (nextIndex < 0) {\n                return null;\n            }\n\n            if (nextIndex >= items.length) {\n                break;\n            }\n\n            if (this.skipItemInSwipe(items[nextIndex])) {\n                continue;\n            }\n\n            deltaMoved += deltaStep;\n        }\n\n        if (deltaMoved === delta) {\n            return items[nextIndex];\n        }\n\n        if (!this.getSource().isCompleted()) {\n            await this.getSource().load();\n\n            return this.getItemBy(delta);\n        }\n\n        return null;\n    }\n\n    /**\n     * Check if an item should be skipped during swipe navigation.\n     *\n     * @param item Item.\n     * @returns Whether to skip this item during swipe navigation.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    protected skipItemInSwipe(item: Item): boolean {\n        return false;\n    }\n\n}\n"],"sourceRoot":"webpack:///"}