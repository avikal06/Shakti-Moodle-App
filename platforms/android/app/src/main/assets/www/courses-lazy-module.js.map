{"version":3,"sources":["./src/core/features/courses/pages/categories/categories.html","./src/core/features/courses/pages/list/list.html","./src/core/features/courses/courses-lazy.module.ts","./src/core/features/courses/pages/categories/categories.ts","./src/core/features/courses/pages/list/list.ts"],"names":[],"mappings":"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","file":"courses-lazy-module.js","sourcesContent":["export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <ion-title>\\r\\n            <h1>\\r\\n                <core-format-text [text]=\\\"title\\\" contextLevel=\\\"coursecat\\\" [contextInstanceId]=\\\"currentCategory && currentCategory!.id\\\">\\r\\n                </core-format-text>\\r\\n            </h1>\\r\\n        </ion-title>\\r\\n        <ion-buttons slot=\\\"end\\\">\\r\\n            <core-context-menu>\\r\\n                <core-context-menu-item *ngIf=\\\"downloadCourseEnabled || downloadCoursesEnabled\\\" [priority]=\\\"1000\\\"\\r\\n                    [content]=\\\"'core.settings.showdownloadoptions' | translate\\\" (action)=\\\"toggleDownload()\\\" iconAction=\\\"toggle\\\"\\r\\n                    [(toggle)]=\\\"downloadEnabled\\\"></core-context-menu-item>\\r\\n                <core-context-menu-item [priority]=\\\"900\\\" [content]=\\\"'core.courses.showonlyenrolled' | translate\\\" (action)=\\\"filterEnrolled()\\\"\\r\\n                    iconAction=\\\"toggle\\\" [(toggle)]=\\\"showOnlyEnrolled\\\"></core-context-menu-item>\\r\\n            </core-context-menu>\\r\\n        </ion-buttons>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content>\\r\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!categoriesLoaded\\\" (ionRefresh)=\\\"refreshCategories($event.target)\\\">\\r\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n    </ion-refresher>\\r\\n    <core-loading [hideUntil]=\\\"categoriesLoaded\\\">\\r\\n        <ion-list class=\\\"list-item-limited-width\\\">\\r\\n            <ion-item *ngIf=\\\"currentCategory\\\" class=\\\"ion-text-wrap\\\">\\r\\n                <ion-icon name=\\\"fas-folder\\\" slot=\\\"start\\\" [attr.aria-label]=\\\"'core.category' | translate\\\"></ion-icon>\\r\\n                <ion-label>\\r\\n                    <p class=\\\"item-heading\\\">\\r\\n                        <core-format-text [text]=\\\"currentCategory.name\\\" contextLevel=\\\"coursecat\\\" [contextInstanceId]=\\\"currentCategory.id\\\">\\r\\n                        </core-format-text>\\r\\n                    </p>\\r\\n                    <p *ngIf=\\\"currentCategory.description\\\">\\r\\n                        <core-format-text [text]=\\\"currentCategory.description\\\" collapsible-item contextLevel=\\\"coursecat\\\"\\r\\n                            [contextInstanceId]=\\\"currentCategory.id\\\"></core-format-text>\\r\\n                    </p>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n\\r\\n            <ng-container *ngIf=\\\"categories.length > 0\\\">\\r\\n                <ion-item-divider>\\r\\n                    <ion-label>\\r\\n                        <h2 class=\\\"big\\\">{{ 'core.courses.categories' | translate }}</h2>\\r\\n                    </ion-label>\\r\\n                </ion-item-divider>\\r\\n                <ion-card *ngFor=\\\"let category of categories\\\">\\r\\n                    <ion-item button class=\\\"ion-text-wrap\\\" (click)=\\\"openCategory(category.id)\\\" [attr.aria-label]=\\\"category.name\\\"\\r\\n                        detail=\\\"true\\\">\\r\\n                        <ion-icon name=\\\"fas-folder\\\" slot=\\\"start\\\" [attr.aria-label]=\\\"'core.category' | translate\\\"></ion-icon>\\r\\n                        <ion-label>\\r\\n                            <p class=\\\"item-heading\\\">\\r\\n                                <core-format-text [text]=\\\"category.name\\\" contextLevel=\\\"coursecat\\\" [contextInstanceId]=\\\"category.id\\\">\\r\\n                                </core-format-text>\\r\\n                            </p>\\r\\n                        </ion-label>\\r\\n                        <ion-badge slot=\\\"end\\\" *ngIf=\\\"!showOnlyEnrolled && category.coursecount > 0\\\" color=\\\"light\\\">\\r\\n                            <span aria-hidden=\\\"true\\\">{{ category.coursecount }}</span>\\r\\n                            <span class=\\\"sr-only\\\">{{ 'core.courses.therearecourses' | translate:{ $a: category.coursecount } }}</span>\\r\\n                        </ion-badge>\\r\\n                    </ion-item>\\r\\n                </ion-card>\\r\\n            </ng-container>\\r\\n\\r\\n            <ng-container *ngIf=\\\"courses.length > 0\\\">\\r\\n                <ion-item-divider>\\r\\n                    <ion-label>\\r\\n                        <h2 *ngIf=\\\"!showOnlyEnrolled\\\" class=\\\"big\\\">{{ 'core.courses.courses' | translate }}</h2>\\r\\n                        <h2 *ngIf=\\\"showOnlyEnrolled\\\" class=\\\"big\\\">{{ 'core.courses.mycourses' | translate }}</h2>\\r\\n                    </ion-label>\\r\\n                </ion-item-divider>\\r\\n                <core-courses-course-list-item *ngFor=\\\"let course of courses\\\" [course]=\\\"course\\\" [showDownload]=\\\"downloadEnabled\\\">\\r\\n                </core-courses-course-list-item>\\r\\n            </ng-container>\\r\\n        </ion-list>\\r\\n        <core-empty-box *ngIf=\\\"!categories.length && !courses.length\\\" icon=\\\"fas-graduation-cap\\\"\\r\\n            [message]=\\\"'core.courses.nocoursesyet' | translate\\\">\\r\\n        </core-empty-box>\\r\\n    </core-loading>\\r\\n</ion-content>\\r\\n\";","export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <ion-title>\\r\\n            <h1 *ngIf=\\\"!showOnlyEnrolled\\\">{{ 'core.courses.availablecourses' | translate }}</h1>\\r\\n            <h1 *ngIf=\\\"showOnlyEnrolled\\\">{{ 'core.courses.mycourses' | translate }}</h1>\\r\\n        </ion-title>\\r\\n        <ion-buttons slot=\\\"end\\\">\\r\\n            <core-context-menu>\\r\\n                <core-context-menu-item *ngIf=\\\"downloadCourseEnabled || downloadCoursesEnabled\\\" [priority]=\\\"1000\\\"\\r\\n                    [content]=\\\"'core.settings.showdownloadoptions' | translate\\\" (action)=\\\"toggleDownload()\\\" iconAction=\\\"toggle\\\"\\r\\n                    [(toggle)]=\\\"downloadEnabled\\\"></core-context-menu-item>\\r\\n                <core-context-menu-item [priority]=\\\"900\\\" [content]=\\\"'core.courses.showonlyenrolled' | translate\\\" (action)=\\\"toggleEnrolled()\\\"\\r\\n                    iconAction=\\\"toggle\\\" [(toggle)]=\\\"showOnlyEnrolled\\\"></core-context-menu-item>\\r\\n            </core-context-menu>\\r\\n            <core-user-menu-button></core-user-menu-button>\\r\\n        </ion-buttons>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content>\\r\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!loaded\\\" (ionRefresh)=\\\"refreshCourses($event.target)\\\">\\r\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n    </ion-refresher>\\r\\n\\r\\n    <core-search-box *ngIf=\\\"searchEnabled\\\" (onSubmit)=\\\"search($event)\\\" (onClear)=\\\"clearSearch()\\\"\\r\\n        [placeholder]=\\\"'core.courses.search' | translate\\\" [searchLabel]=\\\"'core.courses.search' | translate\\\" [autoFocus]=\\\"searchMode\\\"\\r\\n        searchArea=\\\"CoreCoursesSearch\\\"></core-search-box>\\r\\n\\r\\n    <core-loading [hideUntil]=\\\"loaded\\\">\\r\\n        <ng-container *ngIf=\\\"searchMode && searchTotal > 0\\\">\\r\\n            <ion-item-divider>\\r\\n                <ion-label>\\r\\n                    <h2>{{ 'core.courses.totalcoursesearchresults' | translate:{$a: searchTotal} }}</h2>\\r\\n                </ion-label>\\r\\n            </ion-item-divider>\\r\\n        </ng-container>\\r\\n\\r\\n        <ion-list class=\\\"list-item-limited-width\\\">\\r\\n            <core-courses-course-list-item *ngFor=\\\"let course of courses\\\" [course]=\\\"course\\\" [showDownload]=\\\"downloadEnabled\\\">\\r\\n            </core-courses-course-list-item>\\r\\n        </ion-list>\\r\\n\\r\\n        <core-infinite-loading [enabled]=\\\"canLoadMore\\\" (action)=\\\"loadMoreCourses($event)\\\" [error]=\\\"loadMoreError\\\">\\r\\n        </core-infinite-loading>\\r\\n\\r\\n\\r\\n        <core-empty-box *ngIf=\\\"searchMode && !courses.length\\\" icon=\\\"fas-magnifying-glass\\\"\\r\\n            [message]=\\\"'core.courses.nosearchresults' | translate\\\">\\r\\n        </core-empty-box>\\r\\n\\r\\n        <core-empty-box *ngIf=\\\"!searchMode && !courses.length\\\" icon=\\\"fas-graduation-cap\\\" [message]=\\\"'core.courses.nocourses' | translate\\\">\\r\\n        </core-empty-box>\\r\\n\\r\\n    </core-loading>\\r\\n</ion-content>\\r\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { CoreSharedModule } from '@/core/shared.module';\nimport { Injector, NgModule } from '@angular/core';\nimport { RouterModule, ROUTES, Routes } from '@angular/router';\nimport { CoreCoursesComponentsModule } from '@features/courses/components/components.module';\nimport { CoreCoursesCategoriesPage } from '@features/courses/pages/categories/categories';\nimport { CoreCoursesListPage } from '@features/courses/pages/list/list';\nimport { CoreMainMenuComponentsModule } from '@features/mainmenu/components/components.module';\nimport { buildTabMainRoutes } from '@features/mainmenu/mainmenu-tab-routing.module';\nimport { CoreSearchComponentsModule } from '@features/search/components/components.module';\nimport { CoreCoursesHelper } from './services/courses-helper';\nimport { CoreCoursesMyCoursesMainMenuHandlerService } from './services/handlers/my-courses-mainmenu';\n\n/**\n * Build module routes.\n *\n * @param injector Injector.\n * @returns Routes.\n */\nfunction buildRoutes(injector: Injector): Routes {\n    return [\n        {\n            path: 'my',\n            data: {\n                mainMenuTabRoot: CoreCoursesMyCoursesMainMenuHandlerService.PAGE_NAME,\n            },\n            loadChildren: () => CoreCoursesHelper.getMyRouteModule(),\n        },\n        {\n            path: 'categories',\n            redirectTo: 'categories/root', // Fake \"id\".\n            pathMatch: 'full',\n        },\n        {\n            path: 'categories/:id',\n            component: CoreCoursesCategoriesPage,\n        },\n        {\n            path: 'list',\n            component: CoreCoursesListPage,\n        },\n        ...buildTabMainRoutes(injector, {\n            redirectTo: 'my',\n            pathMatch: 'full',\n        }),\n    ];\n}\n\n@NgModule({\n    imports: [\n        CoreSharedModule,\n        CoreCoursesComponentsModule,\n        CoreMainMenuComponentsModule,\n        CoreSearchComponentsModule,\n    ],\n    declarations: [\n        CoreCoursesCategoriesPage,\n        CoreCoursesListPage,\n    ],\n    exports: [RouterModule],\n    providers: [\n        {\n            provide: ROUTES,\n            multi: true,\n            deps: [Injector],\n            useFactory: buildRoutes,\n        },\n    ],\n})\nexport class CoreCoursesLazyModule {}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnDestroy, OnInit } from '@angular/core';\nimport { IonRefresher } from '@ionic/angular';\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreCategoryData, CoreCourseListItem, CoreCourses, CoreCoursesProvider } from '../../services/courses';\nimport { Translate } from '@singletons';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreEventObserver, CoreEvents } from '@singletons/events';\nimport { CoreAnalytics, CoreAnalyticsEventType } from '@services/analytics';\nimport { CoreTime } from '@singletons/time';\n\n/**\n * Page that displays a list of categories and the courses in the current category if any.\n */\n@Component({\n    selector: 'page-core-courses-categories',\n    templateUrl: 'categories.html',\n})\nexport class CoreCoursesCategoriesPage implements OnInit, OnDestroy {\n\n    title: string;\n    currentCategory?: CoreCategoryData;\n    categories: CoreCategoryData[] = [];\n    courses: CoreCourseListItem[] = [];\n    categoriesLoaded = false;\n\n    showOnlyEnrolled = false;\n\n    downloadEnabled = false;\n    downloadCourseEnabled = false;\n    downloadCoursesEnabled = false;\n\n    protected categoryCourses: CoreCourseListItem[] = [];\n    protected currentSiteId: string;\n    protected categoryId = 0;\n    protected myCoursesObserver: CoreEventObserver;\n    protected siteUpdatedObserver: CoreEventObserver;\n    protected downloadEnabledObserver: CoreEventObserver;\n    protected isDestroyed = false;\n    protected logView: () => void;\n\n    constructor() {\n        this.title = Translate.instant('core.courses.categories');\n        this.currentSiteId = CoreSites.getRequiredCurrentSite().getId();\n\n        // Update list if user enrols in a course.\n        this.myCoursesObserver = CoreEvents.on(\n            CoreCoursesProvider.EVENT_MY_COURSES_UPDATED,\n            (data) => {\n                if (data.action == CoreCoursesProvider.ACTION_ENROL) {\n                    this.fetchCategories();\n                }\n            },\n\n            this.currentSiteId,\n        );\n\n        // Refresh the enabled flags if site is updated.\n        this.siteUpdatedObserver = CoreEvents.on(CoreEvents.SITE_UPDATED, () => {\n            this.downloadCourseEnabled = !CoreCourses.isDownloadCourseDisabledInSite();\n            this.downloadCoursesEnabled = !CoreCourses.isDownloadCoursesDisabledInSite();\n\n            this.downloadEnabled = (this.downloadCourseEnabled || this.downloadCoursesEnabled) && this.downloadEnabled;\n        }, this.currentSiteId);\n\n        this.downloadEnabledObserver = CoreEvents.on(CoreCoursesProvider.EVENT_DASHBOARD_DOWNLOAD_ENABLED_CHANGED, (data) => {\n            this.downloadEnabled = (this.downloadCourseEnabled || this.downloadCoursesEnabled) && data.enabled;\n        });\n\n        this.logView = CoreTime.once(() => {\n            CoreAnalytics.logEvent({\n                type: CoreAnalyticsEventType.VIEW_ITEM_LIST,\n                ws: 'core_course_get_categories',\n                name: this.title,\n                data: { categoryid: this.categoryId, category: 'course' },\n                url: '/course/index.php' + (this.categoryId > 0 ? `?categoryid=${this.categoryId}` : ''),\n            });\n        });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnInit(): void {\n        this.categoryId = CoreNavigator.getRouteNumberParam('id') || 0;\n        this.showOnlyEnrolled = CoreNavigator.getRouteBooleanParam('enrolled') || this.showOnlyEnrolled;\n\n        this.downloadCourseEnabled = !CoreCourses.isDownloadCourseDisabledInSite();\n        this.downloadCoursesEnabled = !CoreCourses.isDownloadCoursesDisabledInSite();\n\n        this.downloadEnabled =\n            (this.downloadCourseEnabled || this.downloadCoursesEnabled) && CoreCourses.getCourseDownloadOptionsEnabled();\n\n        this.fetchCategories().finally(() => {\n            this.categoriesLoaded = true;\n        });\n    }\n\n    /**\n     * Fetch the categories.\n     *\n     * @returns Promise resolved when done.\n     */\n    protected async fetchCategories(): Promise<void> {\n        try {\n            const categories: CoreCategoryData[] = await CoreCourses.getCategories(this.categoryId, true);\n\n            this.currentCategory = undefined;\n\n            const index = categories.findIndex((category) => category.id == this.categoryId);\n\n            if (index >= 0) {\n                this.currentCategory = categories[index];\n                // Delete current Category to avoid problems with the formatTree.\n                delete categories[index];\n            }\n\n            // Sort by depth and sortorder to avoid problems formatting Tree.\n            categories.sort((a, b) => {\n                if (a.depth == b.depth) {\n                    return (a.sortorder > b.sortorder) ? 1 : ((b.sortorder > a.sortorder) ? -1 : 0);\n                }\n\n                return a.depth > b.depth ? 1 : -1;\n            });\n\n            this.categories = CoreUtils.formatTree(categories, 'parent', 'id', this.categoryId);\n\n            if (this.currentCategory) {\n                this.title = this.currentCategory.name;\n\n                try {\n                    this.categoryCourses = await CoreCourses.getCoursesByField('category', this.categoryId);\n                    await this.filterEnrolled();\n                } catch (error) {\n                    !this.isDestroyed && CoreDomUtils.showErrorModalDefault(error, 'core.courses.errorloadcourses', true);\n                }\n            }\n\n            this.logView();\n        } catch (error) {\n            !this.isDestroyed && CoreDomUtils.showErrorModalDefault(error, 'core.courses.errorloadcategories', true);\n        }\n    }\n\n    /**\n     * Refresh the categories.\n     *\n     * @param refresher Refresher.\n     */\n    refreshCategories(refresher?: IonRefresher): void {\n        const promises: Promise<void>[] = [];\n\n        promises.push(CoreCourses.invalidateUserCourses());\n        promises.push(CoreCourses.invalidateCategories(this.categoryId, true));\n        promises.push(CoreCourses.invalidateCoursesByField('category', this.categoryId));\n        promises.push(CoreSites.getRequiredCurrentSite().invalidateConfig());\n\n        Promise.all(promises).finally(() => {\n            this.fetchCategories().finally(() => {\n                refresher?.complete();\n            });\n        });\n    }\n\n    /**\n     * Open a category.\n     *\n     * @param categoryId Category Id.\n     */\n    openCategory(categoryId: number): void {\n        CoreNavigator.navigateToSitePath(\n            'courses/categories/' + categoryId,\n            { params: {\n                enrolled: this.showOnlyEnrolled,\n            } },\n        );\n    }\n\n    /**\n     * Filter my courses or not.\n     */\n    async filterEnrolled(): Promise<void> {\n        if (!this.showOnlyEnrolled) {\n            this.courses = this.categoryCourses;\n        } else {\n            await Promise.all(this.categoryCourses.map(async (course) => {\n                const isEnrolled = course.progress !== undefined;\n\n                if (!isEnrolled) {\n                    try {\n                        const userCourse = await CoreCourses.getUserCourse(course.id);\n                        course.progress = userCourse.progress;\n                        course.completionusertracked = userCourse.completionusertracked;\n                    } catch {\n                        // Ignore errors.\n                    }\n                }\n            }));\n            this.courses = this.categoryCourses.filter((course) => 'progress' in course);\n        }\n    }\n\n    /**\n     * Toggle download enabled.\n     */\n    toggleDownload(): void {\n        CoreCourses.setCourseDownloadOptionsEnabled(this.downloadEnabled);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnDestroy(): void {\n        this.myCoursesObserver.off();\n        this.siteUpdatedObserver.off();\n        this.downloadEnabledObserver.off();\n        this.isDestroyed = true;\n    }\n\n}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnDestroy, OnInit } from '@angular/core';\nimport { CoreCoursesHelper, CoreEnrolledCourseDataWithExtraInfo } from '@features/courses/services/courses-helper';\nimport { IonRefresher } from '@ionic/angular';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreEventObserver, CoreEvents } from '@singletons/events';\nimport { CoreCourseBasicSearchedData, CoreCourses, CoreCoursesProvider } from '../../services/courses';\nimport { CoreTime } from '@singletons/time';\nimport { CoreAnalytics, CoreAnalyticsEventType } from '@services/analytics';\nimport { Translate } from '@singletons';\n\ntype CoreCoursesListMode = 'search' | 'all' | 'my';\n\n/**\n * Page that shows a list of courses.\n */\n@Component({\n    selector: 'page-core-courses-list',\n    templateUrl: 'list.html',\n})\nexport class CoreCoursesListPage implements OnInit, OnDestroy {\n\n    downloadAllCoursesEnabled = false;\n\n    searchEnabled = false;\n    searchMode = false;\n    searchTotal = 0;\n\n    downloadEnabled = false;\n    downloadCourseEnabled = false;\n    downloadCoursesEnabled = false;\n\n    courses: (CoreCourseBasicSearchedData|CoreEnrolledCourseDataWithExtraInfo)[] = [];\n    loaded = false;\n    coursesLoaded = 0;\n    canLoadMore = false;\n    loadMoreError = false;\n\n    showOnlyEnrolled = false;\n\n    protected loadedCourses: (CoreCourseBasicSearchedData|CoreEnrolledCourseDataWithExtraInfo)[] = [];\n    protected loadCoursesPerPage = 20;\n    protected currentSiteId: string;\n    protected frontpageCourseId: number;\n    protected searchPage = 0;\n    protected searchText = '';\n    protected myCoursesObserver: CoreEventObserver;\n    protected siteUpdatedObserver: CoreEventObserver;\n    protected downloadEnabledObserver: CoreEventObserver;\n    protected courseIds = '';\n    protected isDestroyed = false;\n    protected logView: () => void;\n    protected logSearch?: () => void;\n\n    constructor() {\n        this.currentSiteId = CoreSites.getRequiredCurrentSite().getId();\n        this.frontpageCourseId = CoreSites.getRequiredCurrentSite().getSiteHomeId();\n\n        // Update list if user enrols in a course.\n        this.myCoursesObserver = CoreEvents.on(\n            CoreCoursesProvider.EVENT_MY_COURSES_UPDATED,\n            (data) => {\n\n                if (data.action == CoreCoursesProvider.ACTION_ENROL) {\n                    this.fetchCourses();\n                }\n            },\n\n            this.currentSiteId,\n        );\n\n        // Refresh the enabled flags if site is updated.\n        this.siteUpdatedObserver = CoreEvents.on(CoreEvents.SITE_UPDATED, () => {\n            this.searchEnabled = !CoreCourses.isSearchCoursesDisabledInSite();\n            this.downloadCourseEnabled = !CoreCourses.isDownloadCourseDisabledInSite();\n            this.downloadCoursesEnabled = !CoreCourses.isDownloadCoursesDisabledInSite();\n\n            this.downloadEnabled = (this.downloadCourseEnabled || this.downloadCoursesEnabled) && this.downloadEnabled;\n            if (!this.searchEnabled && this.searchMode) {\n                this.searchMode = false;\n\n                this.fetchCourses();\n            }\n        }, this.currentSiteId);\n\n        this.downloadEnabledObserver = CoreEvents.on(CoreCoursesProvider.EVENT_DASHBOARD_DOWNLOAD_ENABLED_CHANGED, (data) => {\n            this.downloadEnabled = (this.downloadCourseEnabled || this.downloadCoursesEnabled) && data.enabled;\n        });\n\n        this.logView = CoreTime.once(async () => {\n            if (this.showOnlyEnrolled) {\n                CoreAnalytics.logEvent({\n                    type: CoreAnalyticsEventType.VIEW_ITEM_LIST,\n                    ws: 'core_enrol_get_users_courses',\n                    name: Translate.instant('core.courses.mycourses'),\n                    data: { category: 'course' },\n                    url: '/my/courses.php',\n                });\n            } else {\n                CoreAnalytics.logEvent({\n                    type: CoreAnalyticsEventType.VIEW_ITEM_LIST,\n                    ws: 'core_course_get_courses_by_field',\n                    name: Translate.instant('core.courses.availablecourses'),\n                    data: { category: 'course' },\n                    url: '/course/index.php',\n                });\n            }\n        });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnInit(): void {\n        this.downloadCourseEnabled = !CoreCourses.isDownloadCourseDisabledInSite();\n        this.downloadCoursesEnabled = !CoreCourses.isDownloadCoursesDisabledInSite();\n\n        this.downloadEnabled =\n            (this.downloadCourseEnabled || this.downloadCoursesEnabled) && CoreCourses.getCourseDownloadOptionsEnabled();\n\n        const mode = CoreNavigator.getRouteParam<CoreCoursesListMode>('mode') || 'my';\n\n        if (mode == 'search') {\n            this.searchMode = true;\n        }\n\n        if (mode == 'my') {\n            this.showOnlyEnrolled = true;\n        }\n\n        this.searchEnabled = !CoreCourses.isSearchCoursesDisabledInSite();\n        if (!this.searchEnabled) {\n            this.searchMode = false;\n        }\n\n        this.fetchCourses();\n    }\n\n    /**\n     * Load the course list.\n     *\n     * @returns Promise resolved when done.\n     */\n    protected async fetchCourses(): Promise<void> {\n        try {\n            if (this.searchMode) {\n                if (this.searchText) {\n                    await this.searchCourses();\n                }\n            } else {\n                await this.loadCourses(true);\n            }\n        } finally {\n            this.loaded = true;\n        }\n    }\n\n    /**\n     * Fetch the courses.\n     *\n     * @param clearTheList If list needs to be reloaded.\n     * @returns Promise resolved when done.\n     */\n    protected async loadCourses(clearTheList = false): Promise<void> {\n        this.loadMoreError = false;\n\n        try {\n            if (clearTheList) {\n                if (this.showOnlyEnrolled) {\n                    this.loadedCourses = await CoreCourses.getUserCourses();\n                } else {\n                    const courses = await CoreCourses.getCoursesByField();\n                    this.loadedCourses = courses.filter((course) => course.id != this.frontpageCourseId);\n                }\n\n                this.coursesLoaded = 0;\n                this.courses = [];\n            }\n\n            const addCourses = this.loadedCourses.slice(this.coursesLoaded, this.coursesLoaded + this.loadCoursesPerPage);\n            await CoreCoursesHelper.loadCoursesExtraInfo(addCourses, true);\n\n            this.courses = this.courses.concat(addCourses);\n\n            this.courseIds = this.courses.map((course) => course.id).join(',');\n\n            this.coursesLoaded = this.courses.length;\n            this.canLoadMore = this.loadedCourses.length > this.courses.length;\n\n            this.logView();\n        } catch (error) {\n            this.loadMoreError = true; // Set to prevent infinite calls with infinite-loading.\n            !this.isDestroyed && CoreDomUtils.showErrorModalDefault(error, 'core.courses.errorloadcourses', true);\n        }\n\n    }\n\n    /**\n     * Refresh the courses.\n     *\n     * @param refresher Refresher.\n     */\n    refreshCourses(refresher: IonRefresher): void {\n        const promises: Promise<void>[] = [];\n\n        if (!this.searchMode) {\n            if (this.showOnlyEnrolled) {\n                promises.push(CoreCourses.invalidateUserCourses());\n            } else {\n                promises.push(CoreCourses.invalidateCoursesByField());\n            }\n\n            if (this.courseIds) {\n                promises.push(CoreCourses.invalidateCoursesByField('ids', this.courseIds));\n            }\n        }\n\n        Promise.all(promises).finally(() => {\n            this.fetchCourses().finally(() => {\n                refresher?.complete();\n            });\n        });\n    }\n\n    /**\n     * Search a new text.\n     *\n     * @param text The text to search.\n     */\n    async search(text: string): Promise<void> {\n        this.searchMode = true;\n        this.searchText = text;\n        this.courses = [];\n        this.searchPage = 0;\n        this.searchTotal = 0;\n        this.logSearch = CoreTime.once(() => this.performLogSearch());\n\n        const modal = await CoreDomUtils.showModalLoading('core.searching', true);\n        await this.searchCourses().finally(() => {\n            modal.dismiss();\n        });\n    }\n\n    /**\n     * Clear search box.\n     */\n    clearSearch(): void {\n        this.searchText = '';\n        this.courses = [];\n        this.searchPage = 0;\n        this.searchTotal = 0;\n        this.searchMode = false;\n\n        this.loaded = false;\n        this.fetchCourses();\n    }\n\n    /**\n     * Log search.\n     */\n    protected async performLogSearch(): Promise<void> {\n        if (!this.searchMode) {\n            return;\n        }\n\n        CoreAnalytics.logEvent({\n            type: CoreAnalyticsEventType.VIEW_ITEM_LIST,\n            ws: 'core_course_search_courses',\n            name: Translate.instant('core.courses.availablecourses'),\n            data: { search: this.searchText, category: 'course' },\n            url: `/course/search.php?search=${this.searchText}`,\n        });\n    }\n\n    /**\n     * Load more courses.\n     *\n     * @param infiniteComplete Infinite scroll complete function. Only used from core-infinite-loading.\n     */\n    async loadMoreCourses(infiniteComplete?: () => void ): Promise<void> {\n        try {\n            if (this.searchMode) {\n                await this.searchCourses();\n            } else {\n                await this.loadCourses();\n            }\n        } finally {\n            infiniteComplete && infiniteComplete();\n        }\n    }\n\n    /**\n     * Search courses or load the next page of current search.\n     *\n     * @returns Promise resolved when done.\n     */\n    protected async searchCourses(): Promise<void> {\n        this.loadMoreError = false;\n\n        try {\n            const response = await CoreCourses.search(this.searchText, this.searchPage, undefined, this.showOnlyEnrolled);\n\n            if (this.searchPage === 0) {\n                this.courses = response.courses;\n            } else {\n                this.courses = this.courses.concat(response.courses);\n            }\n            this.searchTotal = response.total;\n\n            this.searchPage++;\n            this.canLoadMore = this.courses.length < this.searchTotal;\n\n            this.logSearch?.();\n        } catch (error) {\n            this.loadMoreError = true; // Set to prevent infinite calls with infinite-loading.\n            !this.isDestroyed && CoreDomUtils.showErrorModalDefault(error, 'core.courses.errorsearching', true);\n        }\n    }\n\n    /**\n     * Toggle show only my courses.\n     */\n    toggleEnrolled(): void {\n        this.loaded = false;\n        this.fetchCourses();\n    }\n\n    /**\n     * Toggle download enabled.\n     */\n    toggleDownload(): void {\n        CoreCourses.setCourseDownloadOptionsEnabled(this.downloadEnabled);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnDestroy(): void {\n        this.myCoursesObserver.off();\n        this.siteUpdatedObserver.off();\n        this.downloadEnabledObserver.off();\n        this.isDestroyed = true;\n    }\n\n}\n"],"sourceRoot":"webpack:///"}