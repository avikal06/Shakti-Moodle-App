{"version":3,"sources":["./src/core/components/password-modal/password-modal.html","./src/core/components/password-modal/password-modal.module.ts","./src/core/components/password-modal/password-modal.ts"],"names":[],"mappings":"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","file":"core-components-password-modal-password-modal-module.js","sourcesContent":["export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-title>\\r\\n            <h1>{{ title | translate }}</h1>\\r\\n        </ion-title>\\r\\n        <ion-buttons slot=\\\"end\\\">\\r\\n            <ion-button fill=\\\"clear\\\" (click)=\\\"closeModal()\\\" [attr.aria-label]=\\\"'core.close' | translate\\\">\\r\\n                <ion-icon slot=\\\"icon-only\\\" name=\\\"fas-xmark\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n            </ion-button>\\r\\n        </ion-buttons>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content class=\\\"ion-padding\\\">\\r\\n    <form (ngSubmit)=\\\"submitPassword($event)\\\" #passwordForm>\\r\\n        <div>\\r\\n            <ion-item>\\r\\n                <ion-label class=\\\"sr-only\\\">{{ placeholder | translate }}</ion-label>\\r\\n                <core-show-password name=\\\"password\\\">\\r\\n                    <ion-input class=\\\"ion-text-wrap core-ioninput-password\\\" name=\\\"password\\\" type=\\\"password\\\"\\r\\n                        placeholder=\\\"{{ placeholder | translate }}\\\" [(ngModel)]=\\\"password\\\" core-auto-focus [clearOnEdit]=\\\"false\\\">\\r\\n                    </ion-input>\\r\\n                </core-show-password>\\r\\n            </ion-item>\\r\\n            <ion-item *ngIf=\\\"error\\\" class=\\\"ion-text-wrap ion-padding-top text-danger\\\">\\r\\n                <core-format-text [text]=\\\"error | translate\\\"></core-format-text>\\r\\n            </ion-item>\\r\\n        </div>\\r\\n        <ion-button expand=\\\"block\\\" type=\\\"submit\\\" [disabled]=\\\"!password\\\">\\r\\n            {{ submit | translate }}\\r\\n        </ion-button>\\r\\n        <!-- Remove this once Ionic fixes this bug: https://github.com/ionic-team/ionic-framework/issues/19368 -->\\r\\n        <input type=\\\"submit\\\" class=\\\"core-submit-hidden-enter\\\" />\\r\\n    </form>\\r\\n</ion-content>\\r\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { NgModule } from '@angular/core';\nimport { CorePasswordModalComponent } from './password-modal';\nimport { CoreSharedModule } from '@/core/shared.module';\n\nexport { CorePasswordModalComponent };\n\n@NgModule({\n    declarations: [\n        CorePasswordModalComponent,\n    ],\n    imports: [\n        CoreSharedModule,\n    ],\n})\nexport class CorePasswordModalModule {}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, ViewChild, ElementRef, Input } from '@angular/core';\n\nimport { CoreSites } from '@services/sites';\nimport { CoreForms } from '@singletons/form';\nimport { ModalController } from '@singletons';\nimport { CoreDomUtils } from '@services/utils/dom';\n\n/**\n * Modal that asks the password.\n *\n * WARNING: This component is not loaded with components.module.ts.\n */\n@Component({\n    selector: 'core-password-modal',\n    templateUrl: 'password-modal.html',\n})\nexport class CorePasswordModalComponent {\n\n    @ViewChild('passwordForm') formElement?: ElementRef;\n\n    @Input() title = 'core.login.password'; // Translatable string to be shown on modal title.\n    @Input() placeholder =  'core.login.password'; // Translatable string to be shown on password input as placeholder.\n    @Input() submit = 'core.submit'; // Translatable string to be shown on submit button.\n    @Input() validator?: (password?: string) => Promise<CorePasswordModalResponse>; // Function to validate the password.\n\n    password = ''; // Previous entered password.\n    error?: string; // Error message to be shown.\n\n    /**\n     * Send the password back.\n     *\n     * @param e Event.\n     */\n    async submitPassword(e: Event): Promise<void> {\n        e.preventDefault();\n        e.stopPropagation();\n\n        CoreForms.triggerFormSubmittedEvent(this.formElement, false, CoreSites.getCurrentSiteId());\n\n        const response = await this.validatePassword(this.password);\n\n        if (response.validated === undefined) {\n            ModalController.dismiss(response);\n        }\n\n        if (response.validated) {\n            ModalController.dismiss(response);\n        }\n\n        this.error = response.error;\n    }\n\n    /**\n     * Validates the entered password if validator is available.\n     *\n     * @param password Entered password.\n     * @returns Response of the modal.\n     */\n    protected async validatePassword(password: string): Promise<CorePasswordModalResponse> {\n        const response: CorePasswordModalResponse = { password };\n\n        if (!this.validator) {\n            return response;\n        }\n\n        const modal = await CoreDomUtils.showModalLoading('core.loading', true);\n        try {\n            return await this.validator(password);\n        } catch (error) {\n            response.validated = false;\n            response.error = error;\n        } finally {\n            modal.dismiss();\n        }\n\n        return response;\n\n    }\n\n    /**\n     * Close modal.\n     */\n    closeModal(): void {\n        CoreForms.triggerFormCancelledEvent(this.formElement, CoreSites.getCurrentSiteId());\n\n        ModalController.dismiss();\n    }\n\n}\n\nexport type CorePasswordModalParams = Partial<Pick<CorePasswordModalComponent, 'title' | 'placeholder' | 'submit' | 'validator'>>;\n\nexport type CorePasswordModalResponse = {\n    password: string;\n    validated?: boolean;\n    error?: string;\n};\n"],"sourceRoot":"webpack:///"}