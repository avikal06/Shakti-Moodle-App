{"version":3,"sources":["./src/addons/mod/glossary/pages/edit/edit.html","./src/addons/mod/glossary/glossary-edit-lazy.module.ts","./src/addons/mod/glossary/pages/edit/edit.ts"],"names":[],"mappings":"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","file":"glossary-edit-lazy-module.js","sourcesContent":["export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <ion-title>\\r\\n            <h1 *ngIf=\\\"glossary\\\">\\r\\n                <core-format-text [text]=\\\"glossary.name\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"cmId\\\" [courseId]=\\\"courseId\\\">\\r\\n                </core-format-text>\\r\\n            </h1>\\r\\n        </ion-title>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content>\\r\\n    <core-loading [hideUntil]=\\\"loaded\\\">\\r\\n        <form #editFormEl *ngIf=\\\"glossary\\\">\\r\\n            <ion-item>\\r\\n                <ion-label position=\\\"stacked\\\">{{ 'addon.mod_glossary.concept' | translate }}</ion-label>\\r\\n                <ion-input type=\\\"text\\\" [placeholder]=\\\"'addon.mod_glossary.concept' | translate\\\" [(ngModel)]=\\\"data.concept\\\" name=\\\"concept\\\">\\r\\n                </ion-input>\\r\\n            </ion-item>\\r\\n            <ion-item>\\r\\n                <ion-label position=\\\"stacked\\\">{{ 'addon.mod_glossary.definition' | translate }}</ion-label>\\r\\n                <core-rich-text-editor [control]=\\\"definitionControl\\\" (contentChanged)=\\\"onDefinitionChange($event)\\\"\\r\\n                    [placeholder]=\\\"'addon.mod_glossary.definition' | translate\\\" name=\\\"addon_mod_glossary_edit\\\" [component]=\\\"component\\\"\\r\\n                    [componentId]=\\\"cmId\\\" [autoSave]=\\\"true\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"cmId\\\" elementId=\\\"definition_editor\\\"\\r\\n                    [draftExtraParams]=\\\"editorExtraParams\\\">\\r\\n                </core-rich-text-editor>\\r\\n            </ion-item>\\r\\n            <ion-item *ngIf=\\\"categories.length > 0\\\">\\r\\n                <ion-label position=\\\"stacked\\\">\\r\\n                    {{ 'addon.mod_glossary.categories' | translate }}\\r\\n                </ion-label>\\r\\n                <ion-select [(ngModel)]=\\\"data.categories\\\" multiple=\\\"true\\\" interface=\\\"action-sheet\\\"\\r\\n                    [placeholder]=\\\"'addon.mod_glossary.categories' | translate\\\" name=\\\"categories\\\" [cancelText]=\\\"'core.cancel' | translate\\\"\\r\\n                    [interfaceOptions]=\\\"{header: 'addon.mod_glossary.categories' | translate}\\\">\\r\\n                    <ion-select-option *ngFor=\\\"let category of categories\\\" [value]=\\\"category.id\\\">\\r\\n                        {{ category.name }}\\r\\n                    </ion-select-option>\\r\\n                </ion-select>\\r\\n            </ion-item>\\r\\n            <ion-item *ngIf=\\\"showAliases\\\">\\r\\n                <ion-label position=\\\"stacked\\\">\\r\\n                    {{ 'addon.mod_glossary.aliases' | translate }}\\r\\n                </ion-label>\\r\\n                <ion-textarea [(ngModel)]=\\\"data.aliases\\\" rows=\\\"1\\\" [core-auto-rows]=\\\"data.aliases\\\" name=\\\"aliases\\\">\\r\\n                </ion-textarea>\\r\\n            </ion-item>\\r\\n            <ion-item-divider>\\r\\n                <ion-label>\\r\\n                    <h2>{{ 'addon.mod_glossary.attachment' | translate }}</h2>\\r\\n                </ion-label>\\r\\n            </ion-item-divider>\\r\\n            <core-attachments [files]=\\\"data.attachments\\\" [component]=\\\"component\\\" [componentId]=\\\"glossary.coursemodule\\\" [allowOffline]=\\\"true\\\"\\r\\n                [courseId]=\\\"courseId\\\">\\r\\n            </core-attachments>\\r\\n            <ng-container *ngIf=\\\"glossary.usedynalink\\\">\\r\\n                <ion-item-divider>\\r\\n                    <ion-label>\\r\\n                        <h2>{{ 'addon.mod_glossary.linking' | translate }}</h2>\\r\\n                    </ion-label>\\r\\n                </ion-item-divider>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                    <ion-label>{{ 'addon.mod_glossary.entryusedynalink' | translate }}</ion-label>\\r\\n                    <ion-toggle [(ngModel)]=\\\"data.usedynalink\\\" name=\\\"usedynalink\\\"></ion-toggle>\\r\\n                </ion-item>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                    <ion-label>{{ 'addon.mod_glossary.casesensitive' | translate }}</ion-label>\\r\\n                    <ion-toggle [disabled]=\\\"!data.usedynalink\\\" [(ngModel)]=\\\"data.casesensitive\\\" name=\\\"casesensitive\\\">\\r\\n                    </ion-toggle>\\r\\n                </ion-item>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                    <ion-label>{{ 'addon.mod_glossary.fullmatch' | translate }}</ion-label>\\r\\n                    <ion-toggle [disabled]=\\\"!data.usedynalink\\\" [(ngModel)]=\\\"data.fullmatch\\\" name=\\\"fullmatch\\\"></ion-toggle>\\r\\n                </ion-item>\\r\\n            </ng-container>\\r\\n            <ion-button class=\\\"ion-margin\\\" expand=\\\"block\\\" [disabled]=\\\"!data.concept || !data.definition\\\" (click)=\\\"save()\\\">\\r\\n                {{ 'core.save' | translate }}\\r\\n            </ion-button>\\r\\n        </form>\\r\\n    </core-loading>\\r\\n</ion-content>\\r\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { NgModule } from '@angular/core';\nimport { CoreSharedModule } from '@/core/shared.module';\nimport { CoreEditorComponentsModule } from '@features/editor/components/components.module';\nimport { RouterModule, Routes } from '@angular/router';\nimport { CanLeaveGuard } from '@guards/can-leave';\nimport { AddonModGlossaryEditPage } from '@addons/mod/glossary/pages/edit/edit';\n\nconst routes: Routes = [{\n    path: '',\n    component: AddonModGlossaryEditPage,\n    canDeactivate: [CanLeaveGuard],\n}];\n\n@NgModule({\n    declarations: [\n        AddonModGlossaryEditPage,\n    ],\n    imports: [\n        RouterModule.forChild(routes),\n        CoreSharedModule,\n        CoreEditorComponentsModule,\n    ],\n})\nexport class AddonModGlossaryEditLazyModule {}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnInit, ViewChild, ElementRef, Optional } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { CoreError } from '@classes/errors/error';\nimport { CoreNetworkError } from '@classes/errors/network-error';\nimport { CoreSplitViewComponent } from '@components/split-view/split-view';\nimport { CoreFileUploader, CoreFileUploaderStoreFilesResult } from '@features/fileuploader/services/fileuploader';\nimport { CanLeave } from '@guards/can-leave';\nimport { CoreFileEntry } from '@services/file-helper';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreNetwork } from '@services/network';\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreUtils } from '@services/utils/utils';\nimport { Translate } from '@singletons';\nimport { CoreEventObserver, CoreEvents } from '@singletons/events';\nimport { CoreForms } from '@singletons/form';\nimport {\n    AddonModGlossary,\n    AddonModGlossaryCategory,\n    AddonModGlossaryEntry,\n    AddonModGlossaryEntryOption,\n    AddonModGlossaryGlossary,\n    AddonModGlossaryProvider,\n} from '../../services/glossary';\nimport { AddonModGlossaryHelper } from '../../services/glossary-helper';\nimport { AddonModGlossaryOffline } from '../../services/glossary-offline';\nimport { CoreAnalytics, CoreAnalyticsEventType } from '@services/analytics';\n\n/**\n * Page that displays the edit form.\n */\n@Component({\n    selector: 'page-addon-mod-glossary-edit',\n    templateUrl: 'edit.html',\n})\nexport class AddonModGlossaryEditPage implements OnInit, CanLeave {\n\n    @ViewChild('editFormEl') formElement?: ElementRef;\n\n    component = AddonModGlossaryProvider.COMPONENT;\n    cmId!: number;\n    courseId!: number;\n    loaded = false;\n    glossary?: AddonModGlossaryGlossary;\n    definitionControl = new FormControl();\n    categories: AddonModGlossaryCategory[] = [];\n    showAliases = true;\n    editorExtraParams: Record<string, unknown> = {};\n    handler!: AddonModGlossaryFormHandler;\n    data: AddonModGlossaryFormData = {\n        concept: '',\n        definition: '',\n        timecreated: 0,\n        attachments: [],\n        categories: [],\n        aliases: '',\n        usedynalink: false,\n        casesensitive: false,\n        fullmatch: false,\n    };\n\n    originalData?: AddonModGlossaryFormData;\n\n    protected entry?: AddonModGlossaryEntry;\n    protected syncId?: string;\n    protected syncObserver?: CoreEventObserver;\n    protected isDestroyed = false;\n    protected saved = false;\n\n    constructor(protected route: ActivatedRoute, @Optional() protected splitView: CoreSplitViewComponent) {}\n\n    /**\n     * @inheritdoc\n     */\n    async ngOnInit(): Promise<void> {\n        try {\n            const entrySlug = CoreNavigator.getRouteParam<string>('entrySlug');\n            this.cmId = CoreNavigator.getRequiredRouteNumberParam('cmId');\n            this.courseId = CoreNavigator.getRequiredRouteNumberParam('courseId');\n\n            if (entrySlug?.startsWith('new-')) {\n                const timecreated = Number(entrySlug.slice(4));\n                this.editorExtraParams.timecreated = timecreated;\n                this.handler = new AddonModGlossaryOfflineFormHandler(this, timecreated);\n            } else if (entrySlug) {\n                const { entry } = await AddonModGlossary.getEntry(Number(entrySlug));\n\n                this.entry = entry;\n                this.editorExtraParams.timecreated = entry.timecreated;\n                this.handler = new AddonModGlossaryOnlineFormHandler(this, entry);\n            } else {\n                this.handler = new AddonModGlossaryNewFormHandler(this);\n            }\n        } catch (error) {\n            CoreDomUtils.showErrorModal(error);\n\n            this.goBack();\n\n            return;\n        }\n\n        this.fetchData();\n    }\n\n    /**\n     * Fetch required data.\n     *\n     * @returns Promise resolved when done.\n     */\n    protected async fetchData(): Promise<void> {\n        try {\n            this.glossary = await AddonModGlossary.getGlossary(this.courseId, this.cmId);\n\n            await this.handler.loadData(this.glossary);\n\n            this.loaded = true;\n\n            if (this.handler instanceof AddonModGlossaryOfflineFormHandler) {\n                return;\n            }\n\n            CoreAnalytics.logEvent({\n                type: CoreAnalyticsEventType.VIEW_ITEM,\n                ws: 'mod_glossary_get_glossaries_by_courses',\n                name: this.glossary.name,\n                data: { id: this.glossary.id, category: 'glossary' },\n                url: '/mod/glossary/edit.php' + (this.entry ? `?cmid=${this.cmId}&id=${this.entry.id}` : ''),\n            });\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'addon.mod_glossary.errorloadingglossary', true);\n\n            this.goBack();\n        }\n    }\n\n    /**\n     * Reset the form data.\n     */\n    protected resetForm(): void {\n        this.originalData = undefined;\n\n        this.data.concept = '';\n        this.data.definition = '';\n        this.data.timecreated = 0;\n        this.data.categories = [];\n        this.data.aliases = '';\n        this.data.usedynalink = false;\n        this.data.casesensitive = false;\n        this.data.fullmatch = false;\n        this.data.attachments.length = 0; // Empty the array.\n\n        this.definitionControl.setValue('');\n    }\n\n    /**\n     * Definition changed.\n     *\n     * @param text The new text.\n     */\n    onDefinitionChange(text: string): void {\n        this.data.definition = text;\n    }\n\n    /**\n     * Check if we can leave the page or not.\n     *\n     * @returns Resolved if we can leave it, rejected if not.\n     */\n    async canLeave(): Promise<boolean> {\n        if (this.saved) {\n            return true;\n        }\n\n        if (this.hasDataChanged()) {\n            // Show confirmation if some data has been modified.\n            await CoreDomUtils.showConfirm(Translate.instant('core.confirmcanceledit'));\n        }\n\n        // Delete the local files from the tmp folder.\n        CoreFileUploader.clearTmpFiles(this.data.attachments);\n\n        CoreForms.triggerFormCancelledEvent(this.formElement, CoreSites.getCurrentSiteId());\n\n        return true;\n    }\n\n    /**\n     * Save the entry.\n     */\n    async save(): Promise<void> {\n        if (!this.data.concept || !this.data.definition) {\n            CoreDomUtils.showErrorModal('addon.mod_glossary.fillfields', true);\n\n            return;\n        }\n\n        if (!this.glossary) {\n            return;\n        }\n\n        const modal = await CoreDomUtils.showModalLoading('core.sending', true);\n\n        try {\n            const savedOnline = await this.handler.save(this.glossary);\n\n            this.saved = true;\n\n            CoreForms.triggerFormSubmittedEvent(this.formElement, savedOnline, CoreSites.getCurrentSiteId());\n\n            this.goBack();\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'addon.mod_glossary.cannoteditentry', true);\n        } finally {\n            modal.dismiss();\n        }\n    }\n\n    /**\n     * Check if the form data has changed.\n     *\n     * @returns True if data has changed, false otherwise.\n     */\n    protected hasDataChanged(): boolean {\n        if (!this.originalData || this.originalData.concept === undefined) {\n            // There is no original data.\n            return !!(this.data.definition || this.data.concept || this.data.attachments.length > 0);\n        }\n\n        if (this.originalData.definition != this.data.definition || this.originalData.concept != this.data.concept) {\n            return true;\n        }\n\n        return CoreFileUploader.areFileListDifferent(this.data.attachments, this.originalData.attachments);\n    }\n\n    /**\n     * Helper function to go back.\n     */\n    protected goBack(): void {\n        if (this.splitView?.outletActivated) {\n            CoreNavigator.navigate('../../');\n        } else {\n            CoreNavigator.back();\n        }\n    }\n\n}\n\n/**\n * Helper to manage form data.\n */\nabstract class AddonModGlossaryFormHandler {\n\n    constructor(protected page: AddonModGlossaryEditPage) {}\n\n    /**\n     * Load form data.\n     *\n     * @param glossary Glossary.\n     */\n    abstract loadData(glossary: AddonModGlossaryGlossary): Promise<void>;\n\n    /**\n     * Save form data.\n     *\n     * @param glossary Glossary.\n     * @returns Whether the form was saved online.\n     */\n    abstract save(glossary: AddonModGlossaryGlossary): Promise<boolean>;\n\n    /**\n     * Load form categories.\n     *\n     * @param glossary Glossary.\n     */\n    protected async loadCategories(glossary: AddonModGlossaryGlossary): Promise<void> {\n        this.page.categories = await AddonModGlossary.getAllCategories(glossary.id, {\n            cmId: this.page.cmId,\n        });\n    }\n\n    /**\n     * Upload attachments online.\n     *\n     * @param glossary Glossary.\n     * @returns Uploaded attachments item id.\n     */\n    protected async uploadAttachments(glossary: AddonModGlossaryGlossary): Promise<number> {\n        const data = this.page.data;\n        const itemId = await CoreFileUploader.uploadOrReuploadFiles(\n            data.attachments,\n            AddonModGlossaryProvider.COMPONENT,\n            glossary.id,\n        );\n\n        return itemId;\n    }\n\n    /**\n     * Store attachments offline.\n     *\n     * @param glossary Glossary.\n     * @param timecreated Entry time created.\n     * @returns Storage result.\n     */\n    protected async storeAttachments(\n        glossary: AddonModGlossaryGlossary,\n        timecreated: number,\n    ): Promise<CoreFileUploaderStoreFilesResult> {\n        const data = this.page.data;\n        const result = await AddonModGlossaryHelper.storeFiles(\n            glossary.id,\n            data.concept,\n            timecreated,\n            data.attachments,\n        );\n\n        return result;\n    }\n\n    /**\n     * Make sure that the new entry won't create any duplicates.\n     *\n     * @param glossary Glossary.\n     */\n    protected async checkDuplicates(glossary: AddonModGlossaryGlossary): Promise<void> {\n        if (glossary.allowduplicatedentries) {\n            return;\n        }\n\n        const data = this.page.data;\n        const isUsed = await AddonModGlossary.isConceptUsed(glossary.id, data.concept, {\n            timeCreated: data.timecreated,\n            cmId: this.page.cmId,\n        });\n\n        if (isUsed) {\n            // There's a entry with same name, reject with error message.\n            throw new CoreError(Translate.instant('addon.mod_glossary.errconceptalreadyexists'));\n        }\n    }\n\n    /**\n     * Get additional options to save an entry.\n     *\n     * @param glossary Glossary.\n     * @returns Options.\n     */\n    protected getSaveOptions(glossary: AddonModGlossaryGlossary): Record<string, AddonModGlossaryEntryOption> {\n        const data = this.page.data;\n        const options: Record<string, AddonModGlossaryEntryOption> = {};\n\n        if (this.page.showAliases) {\n            options.aliases = data.aliases;\n        }\n\n        if (this.page.categories.length > 0) {\n            options.categories = data.categories.join(',');\n        }\n\n        if (glossary.usedynalink) {\n            options.usedynalink = data.usedynalink ? 1 : 0;\n\n            if (data.usedynalink) {\n                options.casesensitive = data.casesensitive ? 1 : 0;\n                options.fullmatch = data.fullmatch ? 1 : 0;\n            }\n        }\n\n        return options;\n    }\n\n}\n\n/**\n * Helper to manage the form data for an offline entry.\n */\nclass AddonModGlossaryOfflineFormHandler extends AddonModGlossaryFormHandler {\n\n    private timecreated: number;\n\n    constructor(page: AddonModGlossaryEditPage, timecreated: number) {\n        super(page);\n\n        this.timecreated = timecreated;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async loadData(glossary: AddonModGlossaryGlossary): Promise<void> {\n        const data = this.page.data;\n        const entry = await AddonModGlossaryOffline.getOfflineEntry(glossary.id, this.timecreated);\n\n        data.concept = entry.concept || '';\n        data.definition = entry.definition || '';\n        data.timecreated = entry.timecreated;\n\n        if (entry.options) {\n            data.categories = ((entry.options.categories as string)?.split(',') ?? []).map(id => Number(id));\n            data.aliases = entry.options.aliases as string ?? '';\n            data.usedynalink = !!entry.options.usedynalink;\n\n            if (data.usedynalink) {\n                data.casesensitive = !!entry.options.casesensitive;\n                data.fullmatch = !!entry.options.fullmatch;\n            }\n        }\n\n        // Treat offline attachments if any.\n        if (entry.attachments?.offline) {\n            data.attachments = await AddonModGlossaryHelper.getStoredFiles(glossary.id, entry.concept, entry.timecreated);\n        }\n\n        this.page.originalData = {\n            concept: data.concept,\n            definition: data.definition,\n            attachments: data.attachments.slice(),\n            timecreated: data.timecreated,\n            categories: data.categories.slice(),\n            aliases: data.aliases,\n            usedynalink: data.usedynalink,\n            casesensitive: data.casesensitive,\n            fullmatch: data.fullmatch,\n        };\n\n        this.page.definitionControl.setValue(data.definition);\n\n        await this.loadCategories(glossary);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async save(glossary: AddonModGlossaryGlossary): Promise<boolean> {\n        const originalData = this.page.data;\n        const data = this.page.data;\n\n        // Upload attachments first if any.\n        let offlineAttachments: CoreFileUploaderStoreFilesResult | undefined = undefined;\n\n        if (data.attachments.length) {\n            offlineAttachments = await this.storeAttachments(glossary, data.timecreated);\n        }\n\n        if (originalData.concept !== data.concept) {\n            await AddonModGlossaryHelper.deleteStoredFiles(glossary.id, originalData.concept, data.timecreated);\n        }\n\n        // Save entry data.\n        await this.updateOfflineEntry(glossary, offlineAttachments);\n\n        // Delete the local files from the tmp folder.\n        CoreFileUploader.clearTmpFiles(data.attachments);\n\n        return false;\n    }\n\n    /**\n     * Update an offline entry.\n     *\n     * @param glossary Glossary.\n     * @param uploadedAttachments Uploaded attachments.\n     */\n    protected async updateOfflineEntry(\n        glossary: AddonModGlossaryGlossary,\n        uploadedAttachments?: CoreFileUploaderStoreFilesResult,\n    ): Promise<void> {\n        const originalData = this.page.originalData;\n        const data = this.page.data;\n        const options = this.getSaveOptions(glossary);\n        const definition = CoreTextUtils.formatHtmlLines(data.definition);\n\n        if (!originalData) {\n            return;\n        }\n\n        await this.checkDuplicates(glossary);\n        await AddonModGlossaryOffline.updateOfflineEntry(\n            {\n                glossaryid: glossary.id,\n                courseid: this.page.courseId,\n                concept: originalData.concept,\n                timecreated: originalData.timecreated,\n            },\n            data.concept,\n            definition,\n            options,\n            uploadedAttachments,\n        );\n    }\n\n}\n\n/**\n * Helper to manage the form data for creating a new entry.\n */\nclass AddonModGlossaryNewFormHandler extends AddonModGlossaryFormHandler {\n\n    /**\n     * @inheritdoc\n     */\n    async loadData(glossary: AddonModGlossaryGlossary): Promise<void> {\n        await this.loadCategories(glossary);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async save(glossary: AddonModGlossaryGlossary): Promise<boolean> {\n        const data = this.page.data;\n        const timecreated = Date.now();\n\n        // Upload attachments first if any.\n        let onlineAttachments: number | undefined = undefined;\n        let offlineAttachments: CoreFileUploaderStoreFilesResult | undefined = undefined;\n\n        if (data.attachments.length) {\n            try {\n                onlineAttachments = await this.uploadAttachments(glossary);\n            } catch (error) {\n                if (CoreUtils.isWebServiceError(error)) {\n                    throw error;\n                }\n\n                offlineAttachments = await this.storeAttachments(glossary, timecreated);\n            }\n        }\n\n        // Save entry data.\n        const entryId = offlineAttachments\n            ? await this.createOfflineEntry(glossary, timecreated, offlineAttachments)\n            : await this.createOnlineEntry(glossary, timecreated, onlineAttachments, !data.attachments.length);\n\n        // Delete the local files from the tmp folder.\n        CoreFileUploader.clearTmpFiles(data.attachments);\n\n        if (entryId) {\n            // Data sent to server, delete stored files (if any).\n            AddonModGlossaryHelper.deleteStoredFiles(glossary.id, data.concept, timecreated);\n            CoreEvents.trigger(CoreEvents.ACTIVITY_DATA_SENT, { module: 'glossary' });\n        }\n\n        return !!entryId;\n    }\n\n    /**\n     * Create an offline entry.\n     *\n     * @param glossary Glossary.\n     * @param timecreated Time created.\n     * @param uploadedAttachments Uploaded attachments.\n     */\n    protected async createOfflineEntry(\n        glossary: AddonModGlossaryGlossary,\n        timecreated: number,\n        uploadedAttachments?: CoreFileUploaderStoreFilesResult,\n    ): Promise<void> {\n        const data = this.page.data;\n        const options = this.getSaveOptions(glossary);\n        const definition = CoreTextUtils.formatHtmlLines(data.definition);\n\n        await this.checkDuplicates(glossary);\n        await AddonModGlossaryOffline.addOfflineEntry(\n            glossary.id,\n            data.concept,\n            definition,\n            this.page.courseId,\n            timecreated,\n            options,\n            uploadedAttachments,\n            undefined,\n            undefined,\n        );\n    }\n\n    /**\n     * Create an online entry.\n     *\n     * @param glossary Glossary.\n     * @param timecreated Time created.\n     * @param uploadedAttachmentsId Id of the uploaded attachments.\n     * @param allowOffline Allow falling back to creating the entry offline.\n     * @returns Entry id.\n     */\n    protected async createOnlineEntry(\n        glossary: AddonModGlossaryGlossary,\n        timecreated: number,\n        uploadedAttachmentsId?: number,\n        allowOffline?: boolean,\n    ): Promise<number | false> {\n        const data = this.page.data;\n        const options = this.getSaveOptions(glossary);\n        const definition = CoreTextUtils.formatHtmlLines(data.definition);\n        const entryId = await AddonModGlossary.addEntry(\n            glossary.id,\n            data.concept,\n            definition,\n            this.page.courseId,\n            options,\n            uploadedAttachmentsId,\n            {\n                timeCreated: timecreated,\n                allowOffline: allowOffline,\n                checkDuplicates: !glossary.allowduplicatedentries,\n            },\n        );\n\n        return entryId;\n    }\n\n}\n\n/**\n * Helper to manage the form data for an online entry.\n */\nclass AddonModGlossaryOnlineFormHandler extends AddonModGlossaryFormHandler {\n\n    private entry: AddonModGlossaryEntry;\n\n    constructor(page: AddonModGlossaryEditPage, entry: AddonModGlossaryEntry) {\n        super(page);\n\n        this.entry = entry;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async loadData(): Promise<void> {\n        const data = this.page.data;\n\n        data.concept = this.entry.concept;\n        data.definition = this.entry.definition || '';\n        data.timecreated = this.entry.timecreated;\n        data.usedynalink = this.entry.usedynalink;\n\n        if (data.usedynalink) {\n            data.casesensitive = this.entry.casesensitive;\n            data.fullmatch = this.entry.fullmatch;\n        }\n\n        // Treat offline attachments if any.\n        if (this.entry.attachments) {\n            data.attachments = this.entry.attachments;\n        }\n\n        this.page.originalData = {\n            concept: data.concept,\n            definition: data.definition,\n            attachments: data.attachments.slice(),\n            timecreated: data.timecreated,\n            categories: data.categories.slice(),\n            aliases: data.aliases,\n            usedynalink: data.usedynalink,\n            casesensitive: data.casesensitive,\n            fullmatch: data.fullmatch,\n        };\n\n        this.page.definitionControl.setValue(data.definition);\n        this.page.showAliases = false;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async save(glossary: AddonModGlossaryGlossary): Promise<boolean> {\n        if (!CoreNetwork.isOnline()) {\n            throw new CoreNetworkError();\n        }\n\n        const data = this.page.data;\n        const options = this.getSaveOptions(glossary);\n        const definition = CoreTextUtils.formatHtmlLines(data.definition);\n\n        // Upload attachments, if any.\n        let attachmentsId: number | undefined = undefined;\n\n        if (data.attachments.length) {\n            attachmentsId = await this.uploadAttachments(glossary);\n        }\n\n        // Save entry data.\n        await AddonModGlossary.updateEntry(glossary.id, this.entry.id, data.concept, definition, options, attachmentsId);\n\n        // Delete the local files from the tmp folder.\n        CoreFileUploader.clearTmpFiles(data.attachments);\n\n        CoreEvents.trigger(CoreEvents.ACTIVITY_DATA_SENT, { module: 'glossary' });\n\n        return true;\n    }\n\n}\n\n/**\n * Form data.\n */\ntype AddonModGlossaryFormData = {\n    concept: string;\n    definition: string;\n    timecreated: number;\n    attachments: CoreFileEntry[];\n    categories: number[];\n    aliases: string;\n    usedynalink: boolean;\n    casesensitive: boolean;\n    fullmatch: boolean;\n};\n"],"sourceRoot":"webpack:///"}